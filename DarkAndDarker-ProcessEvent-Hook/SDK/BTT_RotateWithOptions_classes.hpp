#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_RotateWithOptions

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_RotateOption_structs.hpp"
#include "DungeonCrawler_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_RotateWithOptions.BTT_RotateWithOptions_C
// 0x0090 (0x0138 - 0x00A8)
class UBTT_RotateWithOptions_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	E_RotateOption                                RotateTo;                                          // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitBoxType                                   HitBoxType;                                        // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A54[0x6];                                     // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Angle;                                             // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RotateSpeed;                                       // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetActor;                                       // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FloatValue;                                        // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DestLocation;                                      // 0x00D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DestRotation;                                      // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        FinalRotationAngle;                                // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          Owner_Controller;                                  // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Controlled_Pawn;                                   // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ADCCharacterBase*                       As_DCCharacter_Base;                               // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   Angle_Key;                                         // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Asa0;                                              // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTT_RotateWithOptions(int32 EntryPoint);
	void GetFloatRotationValue();
	void GetHitBoxLocation(class ADCCharacterBase* DCCharacterBase);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_RotateWithOptions_C">();
	}
	static class UBTT_RotateWithOptions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_RotateWithOptions_C>();
	}
};
static_assert(alignof(UBTT_RotateWithOptions_C) == 0x000008, "Wrong alignment on UBTT_RotateWithOptions_C");
static_assert(sizeof(UBTT_RotateWithOptions_C) == 0x000138, "Wrong size on UBTT_RotateWithOptions_C");
static_assert(offsetof(UBTT_RotateWithOptions_C, UberGraphFrame) == 0x0000A8, "Member 'UBTT_RotateWithOptions_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_RotateWithOptions_C, RotateTo) == 0x0000B0, "Member 'UBTT_RotateWithOptions_C::RotateTo' has a wrong offset!");
static_assert(offsetof(UBTT_RotateWithOptions_C, HitBoxType) == 0x0000B1, "Member 'UBTT_RotateWithOptions_C::HitBoxType' has a wrong offset!");
static_assert(offsetof(UBTT_RotateWithOptions_C, Angle) == 0x0000B8, "Member 'UBTT_RotateWithOptions_C::Angle' has a wrong offset!");
static_assert(offsetof(UBTT_RotateWithOptions_C, RotateSpeed) == 0x0000C0, "Member 'UBTT_RotateWithOptions_C::RotateSpeed' has a wrong offset!");
static_assert(offsetof(UBTT_RotateWithOptions_C, TargetActor) == 0x0000C8, "Member 'UBTT_RotateWithOptions_C::TargetActor' has a wrong offset!");
static_assert(offsetof(UBTT_RotateWithOptions_C, FloatValue) == 0x0000D0, "Member 'UBTT_RotateWithOptions_C::FloatValue' has a wrong offset!");
static_assert(offsetof(UBTT_RotateWithOptions_C, DestLocation) == 0x0000D8, "Member 'UBTT_RotateWithOptions_C::DestLocation' has a wrong offset!");
static_assert(offsetof(UBTT_RotateWithOptions_C, DestRotation) == 0x0000F0, "Member 'UBTT_RotateWithOptions_C::DestRotation' has a wrong offset!");
static_assert(offsetof(UBTT_RotateWithOptions_C, FinalRotationAngle) == 0x000108, "Member 'UBTT_RotateWithOptions_C::FinalRotationAngle' has a wrong offset!");
static_assert(offsetof(UBTT_RotateWithOptions_C, Owner_Controller) == 0x000110, "Member 'UBTT_RotateWithOptions_C::Owner_Controller' has a wrong offset!");
static_assert(offsetof(UBTT_RotateWithOptions_C, Controlled_Pawn) == 0x000118, "Member 'UBTT_RotateWithOptions_C::Controlled_Pawn' has a wrong offset!");
static_assert(offsetof(UBTT_RotateWithOptions_C, As_DCCharacter_Base) == 0x000120, "Member 'UBTT_RotateWithOptions_C::As_DCCharacter_Base' has a wrong offset!");
static_assert(offsetof(UBTT_RotateWithOptions_C, Angle_Key) == 0x000128, "Member 'UBTT_RotateWithOptions_C::Angle_Key' has a wrong offset!");
static_assert(offsetof(UBTT_RotateWithOptions_C, Asa0) == 0x000130, "Member 'UBTT_RotateWithOptions_C::Asa0' has a wrong offset!");

}

