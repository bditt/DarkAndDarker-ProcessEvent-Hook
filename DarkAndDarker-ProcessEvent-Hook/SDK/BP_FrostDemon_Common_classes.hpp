#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FrostDemon_Common

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_DCMonsterBaseWithOptions_SubBoss_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FrostDemon_Common.BP_FrostDemon_Common_C
// 0x00E0 (0x14C0 - 0x13E0)
class ABP_FrostDemon_Common_C : public ABP_DCMonsterBaseWithOptions_SubBoss_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_FrostDemon_Common_C;             // 0x13D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Foot_L;                                // 0x13E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Foot_R;                                // 0x13E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Calf_L;                                // 0x13F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Calf_R;                                // 0x13F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Thigh_L;                               // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Thigh_R;                               // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Hand_L;                                // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Hand_R;                                // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Body02;                                // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Arm_L_L;                               // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Arm_U_L;                               // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Arm_L_R;                               // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Arm_U_R;                               // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Body01;                                // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Head;                                  // 0x1450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Phase_Count;                                       // 0x1458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Min;                                               // 0x145C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max;                                               // 0x1460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4616[0x4];                                     // 0x1464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Blizzard_Radius;                                   // 0x1468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BlizzardStartLocations;                            // 0x1470(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HealPhaseHP;                                       // 0x1488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HealPhaseSubtract;                                 // 0x1490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxHealCount;                                      // 0x1498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spawn_Blizzard_MoveSpeed;                          // 0x14A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blizzard_Aoe_Radius;                               // 0x14A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityAsync_WaitGameplayTagRemoved*   Wait_Playing_Tag_Remove_Async_Action;              // 0x14B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FrostDemon_Common(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void OnFMsgGASAttributeNotifyBlueprint(const struct FMsgGASAttributeNotify& InMsg);
	void Phase_Count_Function();
	void Phase_Count_Reset();
	void Use_Heal();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FrostDemon_Common_C">();
	}
	static class ABP_FrostDemon_Common_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FrostDemon_Common_C>();
	}
};
static_assert(alignof(ABP_FrostDemon_Common_C) == 0x000010, "Wrong alignment on ABP_FrostDemon_Common_C");
static_assert(sizeof(ABP_FrostDemon_Common_C) == 0x0014C0, "Wrong size on ABP_FrostDemon_Common_C");
static_assert(offsetof(ABP_FrostDemon_Common_C, UberGraphFrame_BP_FrostDemon_Common_C) == 0x0013D8, "Member 'ABP_FrostDemon_Common_C::UberGraphFrame_BP_FrostDemon_Common_C' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, BP_DCHitBox_Foot_L) == 0x0013E0, "Member 'ABP_FrostDemon_Common_C::BP_DCHitBox_Foot_L' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, BP_DCHitBox_Foot_R) == 0x0013E8, "Member 'ABP_FrostDemon_Common_C::BP_DCHitBox_Foot_R' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, BP_DCHitBox_Calf_L) == 0x0013F0, "Member 'ABP_FrostDemon_Common_C::BP_DCHitBox_Calf_L' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, BP_DCHitBox_Calf_R) == 0x0013F8, "Member 'ABP_FrostDemon_Common_C::BP_DCHitBox_Calf_R' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, BP_DCHitBox_Thigh_L) == 0x001400, "Member 'ABP_FrostDemon_Common_C::BP_DCHitBox_Thigh_L' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, BP_DCHitBox_Thigh_R) == 0x001408, "Member 'ABP_FrostDemon_Common_C::BP_DCHitBox_Thigh_R' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, BP_DCHitBox_Hand_L) == 0x001410, "Member 'ABP_FrostDemon_Common_C::BP_DCHitBox_Hand_L' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, BP_DCHitBox_Hand_R) == 0x001418, "Member 'ABP_FrostDemon_Common_C::BP_DCHitBox_Hand_R' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, BP_DCHitBox_Body02) == 0x001420, "Member 'ABP_FrostDemon_Common_C::BP_DCHitBox_Body02' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, BP_DCHitBox_Arm_L_L) == 0x001428, "Member 'ABP_FrostDemon_Common_C::BP_DCHitBox_Arm_L_L' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, BP_DCHitBox_Arm_U_L) == 0x001430, "Member 'ABP_FrostDemon_Common_C::BP_DCHitBox_Arm_U_L' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, BP_DCHitBox_Arm_L_R) == 0x001438, "Member 'ABP_FrostDemon_Common_C::BP_DCHitBox_Arm_L_R' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, BP_DCHitBox_Arm_U_R) == 0x001440, "Member 'ABP_FrostDemon_Common_C::BP_DCHitBox_Arm_U_R' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, BP_DCHitBox_Body01) == 0x001448, "Member 'ABP_FrostDemon_Common_C::BP_DCHitBox_Body01' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, BP_DCHitBox_Head) == 0x001450, "Member 'ABP_FrostDemon_Common_C::BP_DCHitBox_Head' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, Phase_Count) == 0x001458, "Member 'ABP_FrostDemon_Common_C::Phase_Count' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, Min) == 0x00145C, "Member 'ABP_FrostDemon_Common_C::Min' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, Max) == 0x001460, "Member 'ABP_FrostDemon_Common_C::Max' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, Blizzard_Radius) == 0x001468, "Member 'ABP_FrostDemon_Common_C::Blizzard_Radius' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, BlizzardStartLocations) == 0x001470, "Member 'ABP_FrostDemon_Common_C::BlizzardStartLocations' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, HealPhaseHP) == 0x001488, "Member 'ABP_FrostDemon_Common_C::HealPhaseHP' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, HealPhaseSubtract) == 0x001490, "Member 'ABP_FrostDemon_Common_C::HealPhaseSubtract' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, MaxHealCount) == 0x001498, "Member 'ABP_FrostDemon_Common_C::MaxHealCount' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, Spawn_Blizzard_MoveSpeed) == 0x0014A0, "Member 'ABP_FrostDemon_Common_C::Spawn_Blizzard_MoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, Blizzard_Aoe_Radius) == 0x0014A8, "Member 'ABP_FrostDemon_Common_C::Blizzard_Aoe_Radius' has a wrong offset!");
static_assert(offsetof(ABP_FrostDemon_Common_C, Wait_Playing_Tag_Remove_Async_Action) == 0x0014B0, "Member 'ABP_FrostDemon_Common_C::Wait_Playing_Tag_Remove_Async_Action' has a wrong offset!");

}

