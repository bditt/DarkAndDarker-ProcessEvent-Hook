#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DCMonsterBaseWithOptions_Boss

#include "Basic.hpp"

#include "BP_DCMonsterBaseWithOptions_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DCMonsterBaseWithOptions_Boss.BP_DCMonsterBaseWithOptions_Boss_C
// 0x0020 (0x1400 - 0x13E0)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_DCMonsterBaseWithOptions_Boss_C : public ABP_DCMonsterBaseWithOptions_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DCMonsterBaseWithOptions_Boss_C; // 0x13D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          AI_Recog_Area;                                     // 0x13E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          AI_Combat_Area;                                    // 0x13E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ModeCheck_TimerHandle;                             // 0x13F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Check_Mode_Change();
	void ExecuteUbergraph_BP_DCMonsterBaseWithOptions_Boss(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void OnBeforeDeath();
	void OnSetAI();
	void Trigger_In_Overlap_NPT_Area(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DCMonsterBaseWithOptions_Boss_C">();
	}
	static class ABP_DCMonsterBaseWithOptions_Boss_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DCMonsterBaseWithOptions_Boss_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_DCMonsterBaseWithOptions_Boss_C) == 0x000010, "Wrong alignment on ABP_DCMonsterBaseWithOptions_Boss_C");
static_assert(sizeof(ABP_DCMonsterBaseWithOptions_Boss_C) == 0x001400, "Wrong size on ABP_DCMonsterBaseWithOptions_Boss_C");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_Boss_C, UberGraphFrame_BP_DCMonsterBaseWithOptions_Boss_C) == 0x0013D8, "Member 'ABP_DCMonsterBaseWithOptions_Boss_C::UberGraphFrame_BP_DCMonsterBaseWithOptions_Boss_C' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_Boss_C, AI_Recog_Area) == 0x0013E0, "Member 'ABP_DCMonsterBaseWithOptions_Boss_C::AI_Recog_Area' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_Boss_C, AI_Combat_Area) == 0x0013E8, "Member 'ABP_DCMonsterBaseWithOptions_Boss_C::AI_Combat_Area' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_Boss_C, ModeCheck_TimerHandle) == 0x0013F0, "Member 'ABP_DCMonsterBaseWithOptions_Boss_C::ModeCheck_TimerHandle' has a wrong offset!");

}

