#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Dreamwalk

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function GA_Dreamwalk.GA_Dreamwalk_C.CanActivatePerk
// 0x00C8 (0x00C8 - 0x0000)
struct GA_Dreamwalk_C_CanActivatePerk final
{
public:
	struct FGameplayEventData                     InEventData;                                       // 0x0000(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          IsActivate;                                        // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSystemDamageFromEffectData_ReturnValue; // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_416D[0x6];                                     // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Dreamwalk_C_CanActivatePerk) == 0x000008, "Wrong alignment on GA_Dreamwalk_C_CanActivatePerk");
static_assert(sizeof(GA_Dreamwalk_C_CanActivatePerk) == 0x0000C8, "Wrong size on GA_Dreamwalk_C_CanActivatePerk");
static_assert(offsetof(GA_Dreamwalk_C_CanActivatePerk, InEventData) == 0x000000, "Member 'GA_Dreamwalk_C_CanActivatePerk::InEventData' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_CanActivatePerk, IsActivate) == 0x0000B0, "Member 'GA_Dreamwalk_C_CanActivatePerk::IsActivate' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_CanActivatePerk, CallFunc_IsSystemDamageFromEffectData_ReturnValue) == 0x0000B1, "Member 'GA_Dreamwalk_C_CanActivatePerk::CallFunc_IsSystemDamageFromEffectData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_CanActivatePerk, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x0000B8, "Member 'GA_Dreamwalk_C_CanActivatePerk::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_CanActivatePerk, CallFunc_HasTag_ReturnValue) == 0x0000C0, "Member 'GA_Dreamwalk_C_CanActivatePerk::CallFunc_HasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_CanActivatePerk, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000C1, "Member 'GA_Dreamwalk_C_CanActivatePerk::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_CanActivatePerk, CallFunc_BooleanOR_ReturnValue) == 0x0000C2, "Member 'GA_Dreamwalk_C_CanActivatePerk::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_CanActivatePerk, CallFunc_Not_PreBool_ReturnValue) == 0x0000C3, "Member 'GA_Dreamwalk_C_CanActivatePerk::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function GA_Dreamwalk.GA_Dreamwalk_C.EventReceived_99B0728A478C88849BDAF7A5973DEB83
// 0x00B8 (0x00B8 - 0x0000)
struct GA_Dreamwalk_C_EventReceived_99B0728A478C88849BDAF7A5973DEB83 final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     EventData;                                         // 0x0008(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_Dreamwalk_C_EventReceived_99B0728A478C88849BDAF7A5973DEB83) == 0x000008, "Wrong alignment on GA_Dreamwalk_C_EventReceived_99B0728A478C88849BDAF7A5973DEB83");
static_assert(sizeof(GA_Dreamwalk_C_EventReceived_99B0728A478C88849BDAF7A5973DEB83) == 0x0000B8, "Wrong size on GA_Dreamwalk_C_EventReceived_99B0728A478C88849BDAF7A5973DEB83");
static_assert(offsetof(GA_Dreamwalk_C_EventReceived_99B0728A478C88849BDAF7A5973DEB83, EventTag) == 0x000000, "Member 'GA_Dreamwalk_C_EventReceived_99B0728A478C88849BDAF7A5973DEB83::EventTag' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_EventReceived_99B0728A478C88849BDAF7A5973DEB83, EventData) == 0x000008, "Member 'GA_Dreamwalk_C_EventReceived_99B0728A478C88849BDAF7A5973DEB83::EventData' has a wrong offset!");

// Function GA_Dreamwalk.GA_Dreamwalk_C.ExecuteUbergraph_GA_Dreamwalk
// 0x0420 (0x0420 - 0x0000)
struct GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_416E[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     Temp_struct_Variable;                              // 0x0018(0x00B0)(ConstParm)
	TArray<struct FActiveGameplayEffectHandle>    CallFunc_ApplyEffectContainer_ReturnValue;         // 0x00C8(0x0010)(ReferenceParm)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x00D8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayTagRemoved*    CallFunc_WaitGameplayTagRemove_ReturnValue;        // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x00F0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_416F[0x3];                                     // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_CustomEvent_EventTag;                       // 0x0104(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4170[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_CustomEvent_EventData;                      // 0x0110(0x00B0)()
	struct FGameplayEventData                     Temp_struct_Variable_1;                            // 0x01C0(0x00B0)()
	struct FGameplayTag                           Temp_struct_Variable_2;                            // 0x0270(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanActivatePerk_IsActivate;               // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4171[0x7];                                     // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDCAT_WaitForGameplayEvents*            CallFunc_WaitForGameplayEvents_ReturnValue;        // 0x0280(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4172[0x7];                                     // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_Event_EventData;                            // 0x0290(0x00B0)(ConstParm)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4173[0x7];                                     // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     Temp_struct_Variable_3;                            // 0x0348(0x00B0)(ConstParm)
	TArray<struct FActiveGameplayEffectHandle>    CallFunc_ApplyEffectContainer_ReturnValue_1;       // 0x03F8(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue;                // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4174[0x3];                                     // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetActiveGameplayEffectRemainingDuration_ReturnValue; // 0x040C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitDelay*                 CallFunc_WaitDelay_ReturnValue;                    // 0x0410(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk) == 0x000008, "Wrong alignment on GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk");
static_assert(sizeof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk) == 0x000420, "Wrong size on GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, EntryPoint) == 0x000000, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, Temp_struct_Variable) == 0x000018, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, CallFunc_ApplyEffectContainer_ReturnValue) == 0x0000C8, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::CallFunc_ApplyEffectContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000D8, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, CallFunc_WaitGameplayTagRemove_ReturnValue) == 0x0000E8, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::CallFunc_WaitGameplayTagRemove_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000F0, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, CallFunc_IsValid_ReturnValue) == 0x000100, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, K2Node_CustomEvent_EventTag) == 0x000104, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::K2Node_CustomEvent_EventTag' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, K2Node_CustomEvent_EventData) == 0x000110, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::K2Node_CustomEvent_EventData' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, Temp_struct_Variable_1) == 0x0001C0, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, Temp_struct_Variable_2) == 0x000270, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, CallFunc_CanActivatePerk_IsActivate) == 0x000278, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::CallFunc_CanActivatePerk_IsActivate' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, CallFunc_WaitForGameplayEvents_ReturnValue) == 0x000280, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::CallFunc_WaitForGameplayEvents_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, CallFunc_IsValid_ReturnValue_1) == 0x000288, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, K2Node_Event_EventData) == 0x000290, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::K2Node_Event_EventData' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, CallFunc_K2_HasAuthority_ReturnValue) == 0x000340, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, Temp_struct_Variable_3) == 0x000348, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, CallFunc_ApplyEffectContainer_ReturnValue_1) == 0x0003F8, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::CallFunc_ApplyEffectContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, CallFunc_Array_IsEmpty_ReturnValue) == 0x000408, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::CallFunc_Array_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, CallFunc_GetActiveGameplayEffectRemainingDuration_ReturnValue) == 0x00040C, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::CallFunc_GetActiveGameplayEffectRemainingDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, CallFunc_WaitDelay_ReturnValue) == 0x000410, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::CallFunc_WaitDelay_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk, CallFunc_IsValid_ReturnValue_2) == 0x000418, "Member 'GA_Dreamwalk_C_ExecuteUbergraph_GA_Dreamwalk::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function GA_Dreamwalk.GA_Dreamwalk_C.K2_ActivateAbilityFromEvent
// 0x00B0 (0x00B0 - 0x0000)
struct GA_Dreamwalk_C_K2_ActivateAbilityFromEvent final
{
public:
	struct FGameplayEventData                     EventData;                                         // 0x0000(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_Dreamwalk_C_K2_ActivateAbilityFromEvent) == 0x000008, "Wrong alignment on GA_Dreamwalk_C_K2_ActivateAbilityFromEvent");
static_assert(sizeof(GA_Dreamwalk_C_K2_ActivateAbilityFromEvent) == 0x0000B0, "Wrong size on GA_Dreamwalk_C_K2_ActivateAbilityFromEvent");
static_assert(offsetof(GA_Dreamwalk_C_K2_ActivateAbilityFromEvent, EventData) == 0x000000, "Member 'GA_Dreamwalk_C_K2_ActivateAbilityFromEvent::EventData' has a wrong offset!");

}

