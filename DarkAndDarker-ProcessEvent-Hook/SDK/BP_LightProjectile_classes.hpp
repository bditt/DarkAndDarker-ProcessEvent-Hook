#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightProjectile

#include "Basic.hpp"

#include "BP_ProjectileActor_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightProjectile.BP_LightProjectile_C
// 0x01C0 (0x0950 - 0x0790)
class ABP_LightProjectile_C final : public ABP_ProjectileActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_LightProjectile_C;               // 0x0788(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       DetectingSphere;                                   // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      LightEffect;                                       // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         DetectedActors;                                    // 0x07A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FGameplayEffectQuery                   GEQuery;                                           // 0x07B8(0x0198)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void BndEvt__BP_LightProjectile_DetectingSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_LightProjectile_DetectingSphere_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ExecuteUbergraph_BP_LightProjectile(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightProjectile_C">();
	}
	static class ABP_LightProjectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightProjectile_C>();
	}
};
static_assert(alignof(ABP_LightProjectile_C) == 0x000010, "Wrong alignment on ABP_LightProjectile_C");
static_assert(sizeof(ABP_LightProjectile_C) == 0x000950, "Wrong size on ABP_LightProjectile_C");
static_assert(offsetof(ABP_LightProjectile_C, UberGraphFrame_BP_LightProjectile_C) == 0x000788, "Member 'ABP_LightProjectile_C::UberGraphFrame_BP_LightProjectile_C' has a wrong offset!");
static_assert(offsetof(ABP_LightProjectile_C, DetectingSphere) == 0x000790, "Member 'ABP_LightProjectile_C::DetectingSphere' has a wrong offset!");
static_assert(offsetof(ABP_LightProjectile_C, PointLight) == 0x000798, "Member 'ABP_LightProjectile_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_LightProjectile_C, LightEffect) == 0x0007A0, "Member 'ABP_LightProjectile_C::LightEffect' has a wrong offset!");
static_assert(offsetof(ABP_LightProjectile_C, DetectedActors) == 0x0007A8, "Member 'ABP_LightProjectile_C::DetectedActors' has a wrong offset!");
static_assert(offsetof(ABP_LightProjectile_C, GEQuery) == 0x0007B8, "Member 'ABP_LightProjectile_C::GEQuery' has a wrong offset!");

}

