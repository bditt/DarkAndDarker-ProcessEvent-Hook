#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CaveTroll_Common

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_DCMonsterBaseWithOptions_Boss_GoblinCave_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CaveTroll_Common.BP_CaveTroll_Common_C
// 0x0070 (0x1470 - 0x1400)
class ABP_CaveTroll_Common_C : public ABP_DCMonsterBaseWithOptions_Boss_GoblinCave_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_CaveTroll_Common_C;              // 0x13F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_DCHitBox_C*                         BP_DCHitBox9;                                      // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox8;                                      // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox6;                                      // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox5;                                      // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox7;                                      // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox4;                                      // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox3;                                      // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox2;                                      // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox1;                                      // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox;                                       // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Combo_Trigger_Ratio;                               // 0x1450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Subtract_Combo_Trigger_Ratio;                      // 0x1458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Phase_Subtract;                                    // 0x1460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Phase_Add_Min;                                     // 0x1464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Phase_Add_Max;                                     // 0x1468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Comeback_Event_Start();
	void EventReceived_0B96BE9F4BE2B9A385CB12AAB43A0BC6(const struct FGameplayEventData& Payload);
	void EventReceived_91854E014BDF1001DBBDF39E92099E75(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_BP_CaveTroll_Common(int32 EntryPoint);
	void OnSetAI();
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CaveTroll_Common_C">();
	}
	static class ABP_CaveTroll_Common_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CaveTroll_Common_C>();
	}
};
static_assert(alignof(ABP_CaveTroll_Common_C) == 0x000010, "Wrong alignment on ABP_CaveTroll_Common_C");
static_assert(sizeof(ABP_CaveTroll_Common_C) == 0x001470, "Wrong size on ABP_CaveTroll_Common_C");
static_assert(offsetof(ABP_CaveTroll_Common_C, UberGraphFrame_BP_CaveTroll_Common_C) == 0x0013F8, "Member 'ABP_CaveTroll_Common_C::UberGraphFrame_BP_CaveTroll_Common_C' has a wrong offset!");
static_assert(offsetof(ABP_CaveTroll_Common_C, BP_DCHitBox9) == 0x001400, "Member 'ABP_CaveTroll_Common_C::BP_DCHitBox9' has a wrong offset!");
static_assert(offsetof(ABP_CaveTroll_Common_C, BP_DCHitBox8) == 0x001408, "Member 'ABP_CaveTroll_Common_C::BP_DCHitBox8' has a wrong offset!");
static_assert(offsetof(ABP_CaveTroll_Common_C, BP_DCHitBox6) == 0x001410, "Member 'ABP_CaveTroll_Common_C::BP_DCHitBox6' has a wrong offset!");
static_assert(offsetof(ABP_CaveTroll_Common_C, BP_DCHitBox5) == 0x001418, "Member 'ABP_CaveTroll_Common_C::BP_DCHitBox5' has a wrong offset!");
static_assert(offsetof(ABP_CaveTroll_Common_C, BP_DCHitBox7) == 0x001420, "Member 'ABP_CaveTroll_Common_C::BP_DCHitBox7' has a wrong offset!");
static_assert(offsetof(ABP_CaveTroll_Common_C, BP_DCHitBox4) == 0x001428, "Member 'ABP_CaveTroll_Common_C::BP_DCHitBox4' has a wrong offset!");
static_assert(offsetof(ABP_CaveTroll_Common_C, BP_DCHitBox3) == 0x001430, "Member 'ABP_CaveTroll_Common_C::BP_DCHitBox3' has a wrong offset!");
static_assert(offsetof(ABP_CaveTroll_Common_C, BP_DCHitBox2) == 0x001438, "Member 'ABP_CaveTroll_Common_C::BP_DCHitBox2' has a wrong offset!");
static_assert(offsetof(ABP_CaveTroll_Common_C, BP_DCHitBox1) == 0x001440, "Member 'ABP_CaveTroll_Common_C::BP_DCHitBox1' has a wrong offset!");
static_assert(offsetof(ABP_CaveTroll_Common_C, BP_DCHitBox) == 0x001448, "Member 'ABP_CaveTroll_Common_C::BP_DCHitBox' has a wrong offset!");
static_assert(offsetof(ABP_CaveTroll_Common_C, Combo_Trigger_Ratio) == 0x001450, "Member 'ABP_CaveTroll_Common_C::Combo_Trigger_Ratio' has a wrong offset!");
static_assert(offsetof(ABP_CaveTroll_Common_C, Subtract_Combo_Trigger_Ratio) == 0x001458, "Member 'ABP_CaveTroll_Common_C::Subtract_Combo_Trigger_Ratio' has a wrong offset!");
static_assert(offsetof(ABP_CaveTroll_Common_C, Phase_Subtract) == 0x001460, "Member 'ABP_CaveTroll_Common_C::Phase_Subtract' has a wrong offset!");
static_assert(offsetof(ABP_CaveTroll_Common_C, Phase_Add_Min) == 0x001464, "Member 'ABP_CaveTroll_Common_C::Phase_Add_Min' has a wrong offset!");
static_assert(offsetof(ABP_CaveTroll_Common_C, Phase_Add_Max) == 0x001468, "Member 'ABP_CaveTroll_Common_C::Phase_Add_Max' has a wrong offset!");

}

