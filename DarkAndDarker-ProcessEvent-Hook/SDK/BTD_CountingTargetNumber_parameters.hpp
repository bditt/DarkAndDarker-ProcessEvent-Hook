#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_CountingTargetNumber

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BTD_CountingTargetNumber.BTD_CountingTargetNumber_C.FilterRange
// 0x0048 (0x0048 - 0x0000)
struct BTD_CountingTargetNumber_C_FilterRange final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Max_Distance_From_Perception_Result;  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C22[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Get_Max_Distance_From_Perception_Return_Value; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Max_Distance_From_Perception_Result_1; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C23[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Get_Max_Distance_From_Perception_Return_Value_1; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FilterTargetsWithinDirectionAngleAndAllowedAngle_ReturnValue; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C24[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetVisionAngle_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FilterTargetsWithinXYRange_ReturnValue;   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FilterTargetsWithinDirectionAngleAndAllowedAngle_ReturnValue_1; // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FilterTargetsWithinDistance_ReturnValue;  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C25[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FilterTargetsWithinDirectionAngleAndAllowedAngle_AllowedAngle_ImplicitCast; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FilterTargetsWithinDirectionAngleAndAllowedAngle_DirectionalAngle_ImplicitCast; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FilterTargetsWithinDirectionAngleAndAllowedAngle_DirectionalAngle_ImplicitCast_1; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FilterTargetsWithinXYRange_XYRange_ImplicitCast; // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FilterTargetsWithinDistance_Distance_ImplicitCast; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTD_CountingTargetNumber_C_FilterRange) == 0x000008, "Wrong alignment on BTD_CountingTargetNumber_C_FilterRange");
static_assert(sizeof(BTD_CountingTargetNumber_C_FilterRange) == 0x000048, "Wrong size on BTD_CountingTargetNumber_C_FilterRange");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, Bool) == 0x000000, "Member 'BTD_CountingTargetNumber_C_FilterRange::Bool' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, CallFunc_Get_Max_Distance_From_Perception_Result) == 0x000001, "Member 'BTD_CountingTargetNumber_C_FilterRange::CallFunc_Get_Max_Distance_From_Perception_Result' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, CallFunc_Get_Max_Distance_From_Perception_Return_Value) == 0x000008, "Member 'BTD_CountingTargetNumber_C_FilterRange::CallFunc_Get_Max_Distance_From_Perception_Return_Value' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, CallFunc_Get_Max_Distance_From_Perception_Result_1) == 0x000010, "Member 'BTD_CountingTargetNumber_C_FilterRange::CallFunc_Get_Max_Distance_From_Perception_Result_1' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, CallFunc_Get_Max_Distance_From_Perception_Return_Value_1) == 0x000018, "Member 'BTD_CountingTargetNumber_C_FilterRange::CallFunc_Get_Max_Distance_From_Perception_Return_Value_1' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, CallFunc_FilterTargetsWithinDirectionAngleAndAllowedAngle_ReturnValue) == 0x000020, "Member 'BTD_CountingTargetNumber_C_FilterRange::CallFunc_FilterTargetsWithinDirectionAngleAndAllowedAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, CallFunc_GetVisionAngle_ReturnValue) == 0x000024, "Member 'BTD_CountingTargetNumber_C_FilterRange::CallFunc_GetVisionAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000028, "Member 'BTD_CountingTargetNumber_C_FilterRange::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, CallFunc_FilterTargetsWithinXYRange_ReturnValue) == 0x000029, "Member 'BTD_CountingTargetNumber_C_FilterRange::CallFunc_FilterTargetsWithinXYRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, CallFunc_FilterTargetsWithinDirectionAngleAndAllowedAngle_ReturnValue_1) == 0x00002A, "Member 'BTD_CountingTargetNumber_C_FilterRange::CallFunc_FilterTargetsWithinDirectionAngleAndAllowedAngle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, K2Node_SwitchEnum_CmpSuccess) == 0x00002B, "Member 'BTD_CountingTargetNumber_C_FilterRange::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, CallFunc_FilterTargetsWithinDistance_ReturnValue) == 0x00002C, "Member 'BTD_CountingTargetNumber_C_FilterRange::CallFunc_FilterTargetsWithinDistance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, CallFunc_FilterTargetsWithinDirectionAngleAndAllowedAngle_AllowedAngle_ImplicitCast) == 0x000030, "Member 'BTD_CountingTargetNumber_C_FilterRange::CallFunc_FilterTargetsWithinDirectionAngleAndAllowedAngle_AllowedAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, CallFunc_FilterTargetsWithinDirectionAngleAndAllowedAngle_DirectionalAngle_ImplicitCast) == 0x000034, "Member 'BTD_CountingTargetNumber_C_FilterRange::CallFunc_FilterTargetsWithinDirectionAngleAndAllowedAngle_DirectionalAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, CallFunc_FilterTargetsWithinDirectionAngleAndAllowedAngle_DirectionalAngle_ImplicitCast_1) == 0x000038, "Member 'BTD_CountingTargetNumber_C_FilterRange::CallFunc_FilterTargetsWithinDirectionAngleAndAllowedAngle_DirectionalAngle_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, CallFunc_FilterTargetsWithinXYRange_XYRange_ImplicitCast) == 0x00003C, "Member 'BTD_CountingTargetNumber_C_FilterRange::CallFunc_FilterTargetsWithinXYRange_XYRange_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterRange, CallFunc_FilterTargetsWithinDistance_Distance_ImplicitCast) == 0x000040, "Member 'BTD_CountingTargetNumber_C_FilterRange::CallFunc_FilterTargetsWithinDistance_Distance_ImplicitCast' has a wrong offset!");

// Function BTD_CountingTargetNumber.BTD_CountingTargetNumber_C.FilterTags
// 0x004C (0x004C - 0x0000)
struct BTD_CountingTargetNumber_C_FilterTags final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C26[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C27[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item;                           // 0x0024(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FilterUnTagedTargets_ReturnValue;         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C28[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_Array_Get_Item_1;                         // 0x0034(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FilterTagedTargets_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C29[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTD_CountingTargetNumber_C_FilterTags) == 0x000004, "Wrong alignment on BTD_CountingTargetNumber_C_FilterTags");
static_assert(sizeof(BTD_CountingTargetNumber_C_FilterTags) == 0x00004C, "Wrong size on BTD_CountingTargetNumber_C_FilterTags");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, Bool) == 0x000000, "Member 'BTD_CountingTargetNumber_C_FilterTags::Bool' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BTD_CountingTargetNumber_C_FilterTags::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BTD_CountingTargetNumber_C_FilterTags::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BTD_CountingTargetNumber_C_FilterTags::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, Temp_int_Loop_Counter_Variable_1) == 0x000010, "Member 'BTD_CountingTargetNumber_C_FilterTags::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BTD_CountingTargetNumber_C_FilterTags::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, CallFunc_Add_IntInt_ReturnValue_1) == 0x000018, "Member 'BTD_CountingTargetNumber_C_FilterTags::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BTD_CountingTargetNumber_C_FilterTags::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, Temp_int_Array_Index_Variable_1) == 0x000020, "Member 'BTD_CountingTargetNumber_C_FilterTags::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, CallFunc_Array_Get_Item) == 0x000024, "Member 'BTD_CountingTargetNumber_C_FilterTags::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, CallFunc_Array_Length_ReturnValue_1) == 0x00002C, "Member 'BTD_CountingTargetNumber_C_FilterTags::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, CallFunc_FilterUnTagedTargets_ReturnValue) == 0x000030, "Member 'BTD_CountingTargetNumber_C_FilterTags::CallFunc_FilterUnTagedTargets_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, CallFunc_Less_IntInt_ReturnValue_1) == 0x000031, "Member 'BTD_CountingTargetNumber_C_FilterTags::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, CallFunc_Array_Get_Item_1) == 0x000034, "Member 'BTD_CountingTargetNumber_C_FilterTags::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, CallFunc_Array_Length_ReturnValue_2) == 0x00003C, "Member 'BTD_CountingTargetNumber_C_FilterTags::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, CallFunc_FilterTagedTargets_ReturnValue) == 0x000040, "Member 'BTD_CountingTargetNumber_C_FilterTags::CallFunc_FilterTagedTargets_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, CallFunc_Less_IntInt_ReturnValue_2) == 0x000041, "Member 'BTD_CountingTargetNumber_C_FilterTags::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, CallFunc_Array_Length_ReturnValue_3) == 0x000044, "Member 'BTD_CountingTargetNumber_C_FilterTags::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_FilterTags, CallFunc_Less_IntInt_ReturnValue_3) == 0x000048, "Member 'BTD_CountingTargetNumber_C_FilterTags::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");

// Function BTD_CountingTargetNumber.BTD_CountingTargetNumber_C.GetTargetArray
// 0x0080 (0x0080 - 0x0000)
struct BTD_CountingTargetNumber_C_GetTargetArray final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C2A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ConstParm, ReferenceParm)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0020(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_SphereOverlapActors_OutActors;            // 0x0048(0x0010)(ReferenceParm)
	bool                                          CallFunc_SphereOverlapActors_ReturnValue;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C2B[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C2C[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADCCharacterBase*                       K2Node_DynamicCast_AsDCCharacter_Base;             // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C2D[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTD_CountingTargetNumber_C_GetTargetArray) == 0x000008, "Wrong alignment on BTD_CountingTargetNumber_C_GetTargetArray");
static_assert(sizeof(BTD_CountingTargetNumber_C_GetTargetArray) == 0x000080, "Wrong size on BTD_CountingTargetNumber_C_GetTargetArray");
static_assert(offsetof(BTD_CountingTargetNumber_C_GetTargetArray, Bool) == 0x000000, "Member 'BTD_CountingTargetNumber_C_GetTargetArray::Bool' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_GetTargetArray, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BTD_CountingTargetNumber_C_GetTargetArray::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_GetTargetArray, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BTD_CountingTargetNumber_C_GetTargetArray::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_GetTargetArray, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BTD_CountingTargetNumber_C_GetTargetArray::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_GetTargetArray, K2Node_MakeArray_Array) == 0x000010, "Member 'BTD_CountingTargetNumber_C_GetTargetArray::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_GetTargetArray, K2Node_MakeArray_Array_1) == 0x000020, "Member 'BTD_CountingTargetNumber_C_GetTargetArray::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_GetTargetArray, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BTD_CountingTargetNumber_C_GetTargetArray::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_GetTargetArray, CallFunc_SphereOverlapActors_OutActors) == 0x000048, "Member 'BTD_CountingTargetNumber_C_GetTargetArray::CallFunc_SphereOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_GetTargetArray, CallFunc_SphereOverlapActors_ReturnValue) == 0x000058, "Member 'BTD_CountingTargetNumber_C_GetTargetArray::CallFunc_SphereOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_GetTargetArray, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'BTD_CountingTargetNumber_C_GetTargetArray::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_GetTargetArray, CallFunc_Array_Get_Item) == 0x000060, "Member 'BTD_CountingTargetNumber_C_GetTargetArray::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_GetTargetArray, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BTD_CountingTargetNumber_C_GetTargetArray::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_GetTargetArray, K2Node_DynamicCast_AsDCCharacter_Base) == 0x000070, "Member 'BTD_CountingTargetNumber_C_GetTargetArray::K2Node_DynamicCast_AsDCCharacter_Base' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_GetTargetArray, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'BTD_CountingTargetNumber_C_GetTargetArray::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_GetTargetArray, CallFunc_Array_AddUnique_ReturnValue) == 0x00007C, "Member 'BTD_CountingTargetNumber_C_GetTargetArray::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function BTD_CountingTargetNumber.BTD_CountingTargetNumber_C.PerformConditionCheckAI
// 0x0090 (0x0090 - 0x0000)
struct BTD_CountingTargetNumber_C_PerformConditionCheckAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Param_ControlledPawn;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C2E[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_DCMonsterBaseWithOptions_C*         K2Node_DynamicCast_AsBP_DCMonster_Base_with_Options; // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C2F[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIPerceptionComponent*                 CallFunc_GetAIPerceptionComponent_ReturnValue;     // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        CallFunc_Array_Get_Item;                           // 0x0048(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FilterMonsterTargetsByID_ReturnValue;     // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C30[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C31[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetBlackboardValueAsFloat_ReturnValue;    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C32[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FilterRange_Bool;                         // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FilterTags_Bool;                          // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TargetingType_Bool;                       // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetTargetArray_Bool;                      // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C33[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_Player_Count_ImplicitCast;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTD_CountingTargetNumber_C_PerformConditionCheckAI) == 0x000008, "Wrong alignment on BTD_CountingTargetNumber_C_PerformConditionCheckAI");
static_assert(sizeof(BTD_CountingTargetNumber_C_PerformConditionCheckAI) == 0x000090, "Wrong size on BTD_CountingTargetNumber_C_PerformConditionCheckAI");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, OwnerController) == 0x000000, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, Param_ControlledPawn) == 0x000008, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::Param_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, ReturnValue) == 0x000010, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, K2Node_DynamicCast_AsBP_DCMonster_Base_with_Options) == 0x000018, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::K2Node_DynamicCast_AsBP_DCMonster_Base_with_Options' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_GetAIPerceptionComponent_ReturnValue) == 0x000028, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_GetAIPerceptionComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_Array_Length_ReturnValue_1) == 0x00003C, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_Array_Length_ReturnValue_2) == 0x000044, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_Array_Get_Item) == 0x000048, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000058, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_FilterMonsterTargetsByID_ReturnValue) == 0x000059, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_FilterMonsterTargetsByID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_Array_Length_ReturnValue_3) == 0x00005C, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_GetBlackboardValueAsFloat_ReturnValue) == 0x000064, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_GetBlackboardValueAsFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000068, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000070, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000078, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, K2Node_SwitchEnum_CmpSuccess) == 0x000079, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x00007A, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00007B, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x00007C, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x00007D, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x00007E, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_FilterRange_Bool) == 0x00007F, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_FilterRange_Bool' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_FilterTags_Bool) == 0x000080, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_FilterTags_Bool' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_TargetingType_Bool) == 0x000081, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_TargetingType_Bool' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_GetTargetArray_Bool) == 0x000082, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_GetTargetArray_Bool' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000083, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_CountingTargetNumber_C_PerformConditionCheckAI, K2Node_VariableSet_Player_Count_ImplicitCast) == 0x000088, "Member 'BTD_CountingTargetNumber_C_PerformConditionCheckAI::K2Node_VariableSet_Player_Count_ImplicitCast' has a wrong offset!");

// Function BTD_CountingTargetNumber.BTD_CountingTargetNumber_C.TargetingType
// 0x0001 (0x0001 - 0x0000)
struct BTD_CountingTargetNumber_C_TargetingType final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTD_CountingTargetNumber_C_TargetingType) == 0x000001, "Wrong alignment on BTD_CountingTargetNumber_C_TargetingType");
static_assert(sizeof(BTD_CountingTargetNumber_C_TargetingType) == 0x000001, "Wrong size on BTD_CountingTargetNumber_C_TargetingType");
static_assert(offsetof(BTD_CountingTargetNumber_C_TargetingType, Bool) == 0x000000, "Member 'BTD_CountingTargetNumber_C_TargetingType::Bool' has a wrong offset!");

}

