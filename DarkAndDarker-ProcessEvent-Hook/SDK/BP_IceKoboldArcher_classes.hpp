#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IceKoboldArcher

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Kobold_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_IceKoboldArcher.BP_IceKoboldArcher_C
// 0x0080 (0x1490 - 0x1410)
class ABP_IceKoboldArcher_C : public ABP_Kobold_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_IceKoboldArcher_C;               // 0x1410(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_DCHitBox_C*                         Hand_l;                                            // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hand_r;                                            // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         ball_r;                                            // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         ball_l;                                            // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Calf_l;                                            // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Calf_r;                                            // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         LowArm_R;                                          // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Thigh_l;                                           // 0x1450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         LowArm_L;                                          // 0x1458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Thigh_r;                                           // 0x1460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Upperarm_l;                                        // 0x1468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Upperarm_r;                                        // 0x1470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Head;                                              // 0x1478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Body;                                              // 0x1480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_IceKoboldArcher(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void OnSetAI();
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_IceKoboldArcher_C">();
	}
	static class ABP_IceKoboldArcher_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_IceKoboldArcher_C>();
	}
};
static_assert(alignof(ABP_IceKoboldArcher_C) == 0x000010, "Wrong alignment on ABP_IceKoboldArcher_C");
static_assert(sizeof(ABP_IceKoboldArcher_C) == 0x001490, "Wrong size on ABP_IceKoboldArcher_C");
static_assert(offsetof(ABP_IceKoboldArcher_C, UberGraphFrame_BP_IceKoboldArcher_C) == 0x001410, "Member 'ABP_IceKoboldArcher_C::UberGraphFrame_BP_IceKoboldArcher_C' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldArcher_C, Hand_l) == 0x001418, "Member 'ABP_IceKoboldArcher_C::Hand_l' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldArcher_C, Hand_r) == 0x001420, "Member 'ABP_IceKoboldArcher_C::Hand_r' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldArcher_C, ball_r) == 0x001428, "Member 'ABP_IceKoboldArcher_C::ball_r' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldArcher_C, ball_l) == 0x001430, "Member 'ABP_IceKoboldArcher_C::ball_l' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldArcher_C, Calf_l) == 0x001438, "Member 'ABP_IceKoboldArcher_C::Calf_l' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldArcher_C, Calf_r) == 0x001440, "Member 'ABP_IceKoboldArcher_C::Calf_r' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldArcher_C, LowArm_R) == 0x001448, "Member 'ABP_IceKoboldArcher_C::LowArm_R' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldArcher_C, Thigh_l) == 0x001450, "Member 'ABP_IceKoboldArcher_C::Thigh_l' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldArcher_C, LowArm_L) == 0x001458, "Member 'ABP_IceKoboldArcher_C::LowArm_L' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldArcher_C, Thigh_r) == 0x001460, "Member 'ABP_IceKoboldArcher_C::Thigh_r' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldArcher_C, Upperarm_l) == 0x001468, "Member 'ABP_IceKoboldArcher_C::Upperarm_l' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldArcher_C, Upperarm_r) == 0x001470, "Member 'ABP_IceKoboldArcher_C::Upperarm_r' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldArcher_C, Head) == 0x001478, "Member 'ABP_IceKoboldArcher_C::Head' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldArcher_C, Body) == 0x001480, "Member 'ABP_IceKoboldArcher_C::Body' has a wrong offset!");

}

