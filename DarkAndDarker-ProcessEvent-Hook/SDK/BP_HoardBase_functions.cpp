#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HoardBase

#include "Basic.hpp"

#include "BP_HoardBase_classes.hpp"
#include "BP_HoardBase_parameters.hpp"


namespace SDK
{

// Function BP_HoardBase.BP_HoardBase_C.CheckAndNotifyOffMeshGroupArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class USceneComponent*>          NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ABP_HoardBase_C::CheckAndNotifyOffMeshGroupArray(TArray<class USceneComponent*>& NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HoardBase_C", "CheckAndNotifyOffMeshGroupArray");

	Params::BP_HoardBase_C_CheckAndNotifyOffMeshGroupArray Parms{};

	Parms.NewParam = std::move(NewParam);

	UObject::ProcessEvent(Func, &Parms);

	NewParam = std::move(Parms.NewParam);
}


// Function BP_HoardBase.BP_HoardBase_C.ExecuteUbergraph_BP_HoardBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HoardBase_C::ExecuteUbergraph_BP_HoardBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HoardBase_C", "ExecuteUbergraph_BP_HoardBase");

	Params::BP_HoardBase_C_ExecuteUbergraph_BP_HoardBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HoardBase.BP_HoardBase_C.GameplayTagUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     InGameplayTag                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   InCount                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HoardBase_C::GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HoardBase_C", "GameplayTagUpdated");

	Params::BP_HoardBase_C_GameplayTagUpdated Parms{};

	Parms.InGameplayTag = std::move(InGameplayTag);
	Parms.InCount = InCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HoardBase.BP_HoardBase_C.InitCulculationVariables
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HoardBase_C::InitCulculationVariables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HoardBase_C", "InitCulculationVariables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HoardBase.BP_HoardBase_C.InteractFound
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           Interacter                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              InteractPart                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_HoardBase_C::InteractFound(class AActor* Interacter, class UPrimitiveComponent* InteractPart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HoardBase_C", "InteractFound");

	Params::BP_HoardBase_C_InteractFound Parms{};

	Parms.Interacter = Interacter;
	Parms.InteractPart = InteractPart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HoardBase.BP_HoardBase_C.InteractLost
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           Interacter                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_HoardBase_C::InteractLost(class AActor* Interacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HoardBase_C", "InteractLost");

	Params::BP_HoardBase_C_InteractLost Parms{};

	Parms.Interacter = Interacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HoardBase.BP_HoardBase_C.InteractSucceed
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           Interacter                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     StateTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     TriggerTag                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_HoardBase_C::InteractSucceed(class AActor* Interacter, const struct FGameplayTag& StateTag, const struct FGameplayTag& TriggerTag, const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HoardBase_C", "InteractSucceed");

	Params::BP_HoardBase_C_InteractSucceed Parms{};

	Parms.Interacter = Interacter;
	Parms.StateTag = std::move(StateTag);
	Parms.TriggerTag = std::move(TriggerTag);
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HoardBase.BP_HoardBase_C.OnRep_OffMeshGroupArray
// (BlueprintCallable, BlueprintEvent)

void ABP_HoardBase_C::OnRep_OffMeshGroupArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HoardBase_C", "OnRep_OffMeshGroupArray");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HoardBase.BP_HoardBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_HoardBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HoardBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HoardBase.BP_HoardBase_C.SetInvisibleMeshGroup
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  MeshGroup                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_HoardBase_C::SetInvisibleMeshGroup(class USceneComponent* MeshGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HoardBase_C", "SetInvisibleMeshGroup");

	Params::BP_HoardBase_C_SetInvisibleMeshGroup Parms{};

	Parms.MeshGroup = MeshGroup;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HoardBase.BP_HoardBase_C.TryInvisibleMeshGroup
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_HoardBase_C::TryInvisibleMeshGroup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HoardBase_C", "TryInvisibleMeshGroup");

	UObject::ProcessEvent(Func, nullptr);
}

}

