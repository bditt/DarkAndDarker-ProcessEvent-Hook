#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_GoblinAxeman

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ABP_GoblinAxeman_structs.hpp"
#include "DungeonCrawler_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_GoblinAxeman.ABP_GoblinAxeman_C
// 0x1190 (0x16C0 - 0x0530)
class UABP_GoblinAxeman_C final : public UDCMonsterAnimInstanceBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_GoblinAxeman::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0538(0x000C)(HasGetValueTypeHash)
	uint8                                         Pad_4F70[0x4];                                     // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0548(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0550(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0558(0x0020)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0578(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_15;                 // 0x05C0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_14;                 // 0x05E8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x0610(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x0638(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x0660(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x0688(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x06B0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x06F8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x0718(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0760(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0780(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x07C8(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x07E8(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0858(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x0878(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0940(0x0080)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x09C0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x09E8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0A10(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0A38(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0A60(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0A88(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0AB0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0AD8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0B00(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0B28(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0B50(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0B98(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_6;                     // 0x0BE0(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x0C08(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x0C30(0x0028)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_3;                     // 0x0C58(0x00C8)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_2;                     // 0x0D20(0x00C8)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x0DE8(0x0020)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1;             // 0x0E08(0x0020)()
	struct FAnimNode_LegIK                        AnimGraphNode_LegIK_1;                             // 0x0E28(0x00F8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x0F20(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x0F68(0x00F0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x1058(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x1078(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x10C0(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x1108(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x1130(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x1158(0x0028)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x1180(0x00C8)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x1248(0x00C8)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x1310(0x0020)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x1330(0x0020)()
	struct FAnimNode_LegIK                        AnimGraphNode_LegIK;                               // 0x1350(0x00F8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x1448(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x1490(0x00F0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x1580(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x15A0(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x15C8(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x15E8(0x00C8)()
	int32                                         Deadbody_Index;                                    // 0x16B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeadbodyIndex1;                                    // 0x16B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeadbodyIndex2;                                    // 0x16B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeadbodyIndex3;                                    // 0x16B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDeathCurveLarge;                                // 0x16B7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void ExecuteUbergraph_ABP_GoblinAxeman(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_GoblinAxeman_C">();
	}
	static class UABP_GoblinAxeman_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_GoblinAxeman_C>();
	}
};
static_assert(alignof(UABP_GoblinAxeman_C) == 0x000010, "Wrong alignment on UABP_GoblinAxeman_C");
static_assert(sizeof(UABP_GoblinAxeman_C) == 0x0016C0, "Wrong size on UABP_GoblinAxeman_C");
static_assert(offsetof(UABP_GoblinAxeman_C, UberGraphFrame) == 0x000530, "Member 'UABP_GoblinAxeman_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, __AnimBlueprintMutables) == 0x000538, "Member 'UABP_GoblinAxeman_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimBlueprintExtension_PropertyAccess) == 0x000548, "Member 'UABP_GoblinAxeman_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimBlueprintExtension_Base) == 0x000550, "Member 'UABP_GoblinAxeman_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_Root) == 0x000558, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_Slot) == 0x000578, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_TransitionResult_15) == 0x0005C0, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_TransitionResult_15' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_TransitionResult_14) == 0x0005E8, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_TransitionResult_14' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_TransitionResult_13) == 0x000610, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_TransitionResult_12) == 0x000638, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_TransitionResult_11) == 0x000660, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_TransitionResult_10) == 0x000688, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_SequencePlayer_6) == 0x0006B0, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_StateResult_6) == 0x0006F8, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_SequencePlayer_5) == 0x000718, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_StateResult_5) == 0x000760, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_SequencePlayer_4) == 0x000780, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_StateResult_4) == 0x0007C8, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_BlendSpacePlayer) == 0x0007E8, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_StateResult_3) == 0x000858, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_StateMachine_1) == 0x000878, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_SaveCachedPose) == 0x000940, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_TransitionResult_9) == 0x0009C0, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_TransitionResult_8) == 0x0009E8, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_TransitionResult_7) == 0x000A10, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_TransitionResult_6) == 0x000A38, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_TransitionResult_5) == 0x000A60, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_TransitionResult_4) == 0x000A88, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_TransitionResult_3) == 0x000AB0, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_TransitionResult_2) == 0x000AD8, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_TransitionResult_1) == 0x000B00, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_TransitionResult) == 0x000B28, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_SequencePlayer_3) == 0x000B50, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_SequencePlayer_2) == 0x000B98, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_UseCachedPose_6) == 0x000BE0, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_UseCachedPose_6' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_UseCachedPose_5) == 0x000C08, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_UseCachedPose_4) == 0x000C30, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_ApplyAdditive_3) == 0x000C58, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_ApplyAdditive_3' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_ApplyAdditive_2) == 0x000D20, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_ApplyAdditive_2' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x000DE8, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_LocalToComponentSpace_1) == 0x000E08, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_LocalToComponentSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_LegIK_1) == 0x000E28, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_LegIK_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_BlendListByBool_1) == 0x000F20, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_LayeredBoneBlend_1) == 0x000F68, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_StateResult_2) == 0x001058, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_SequencePlayer_1) == 0x001078, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_SequencePlayer) == 0x0010C0, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_UseCachedPose_3) == 0x001108, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_UseCachedPose_2) == 0x001130, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_UseCachedPose_1) == 0x001158, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_ApplyAdditive_1) == 0x001180, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_ApplyAdditive) == 0x001248, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_ComponentToLocalSpace) == 0x001310, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_LocalToComponentSpace) == 0x001330, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_LegIK) == 0x001350, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_LegIK' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_BlendListByBool) == 0x001448, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_LayeredBoneBlend) == 0x001490, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_StateResult_1) == 0x001580, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_UseCachedPose) == 0x0015A0, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_StateResult) == 0x0015C8, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, AnimGraphNode_StateMachine) == 0x0015E8, "Member 'UABP_GoblinAxeman_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, Deadbody_Index) == 0x0016B0, "Member 'UABP_GoblinAxeman_C::Deadbody_Index' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, DeadbodyIndex1) == 0x0016B4, "Member 'UABP_GoblinAxeman_C::DeadbodyIndex1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, DeadbodyIndex2) == 0x0016B5, "Member 'UABP_GoblinAxeman_C::DeadbodyIndex2' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, DeadbodyIndex3) == 0x0016B6, "Member 'UABP_GoblinAxeman_C::DeadbodyIndex3' has a wrong offset!");
static_assert(offsetof(UABP_GoblinAxeman_C, bIsDeathCurveLarge) == 0x0016B7, "Member 'UABP_GoblinAxeman_C::bIsDeathCurveLarge' has a wrong offset!");

}

