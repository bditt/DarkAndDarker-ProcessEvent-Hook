#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_GoblinMage

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ABP_GoblinMage_structs.hpp"
#include "DungeonCrawler_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_GoblinMage.ABP_GoblinMage_C
// 0x0A70 (0x0FA0 - 0x0530)
class UABP_GoblinMage_C final : public UDCMonsterAnimInstanceBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_GoblinMage::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0538(0x000C)(HasGetValueTypeHash)
	uint8                                         Pad_5014[0x4];                                     // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0548(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0550(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0558(0x0020)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0578(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_18;                 // 0x05C0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_17;                 // 0x05E8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_16;                 // 0x0610(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_15;                 // 0x0638(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_14;                 // 0x0660(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x0688(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x06B0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x06D8(0x0028)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x0700(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0770(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x0790(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x07B8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0800(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0820(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0890(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x08B0(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0978(0x0080)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x09F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x0A20(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0A48(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0A70(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0A98(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0AC0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0AE8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0B10(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0B38(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0B60(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0B88(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x0BD0(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x0BF8(0x00F0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0CE8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0D08(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0D50(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0D78(0x00F0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0E68(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0E88(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0EB0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0ED0(0x00C8)()
	bool                                          Combat;                                            // 0x0F98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToPeace;                                           // 0x0F99(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToCombat;                                          // 0x0F9A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDeathCurveLarge;                                // 0x0F9B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void ExecuteUbergraph_ABP_GoblinMage(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_GoblinMage_C">();
	}
	static class UABP_GoblinMage_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_GoblinMage_C>();
	}
};
static_assert(alignof(UABP_GoblinMage_C) == 0x000010, "Wrong alignment on UABP_GoblinMage_C");
static_assert(sizeof(UABP_GoblinMage_C) == 0x000FA0, "Wrong size on UABP_GoblinMage_C");
static_assert(offsetof(UABP_GoblinMage_C, UberGraphFrame) == 0x000530, "Member 'UABP_GoblinMage_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, __AnimBlueprintMutables) == 0x000538, "Member 'UABP_GoblinMage_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimBlueprintExtension_PropertyAccess) == 0x000548, "Member 'UABP_GoblinMage_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimBlueprintExtension_Base) == 0x000550, "Member 'UABP_GoblinMage_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_Root) == 0x000558, "Member 'UABP_GoblinMage_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_Slot) == 0x000578, "Member 'UABP_GoblinMage_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_18) == 0x0005C0, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_18' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_17) == 0x0005E8, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_17' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_16) == 0x000610, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_16' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_15) == 0x000638, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_15' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_14) == 0x000660, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_14' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_13) == 0x000688, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_12) == 0x0006B0, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_11) == 0x0006D8, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_BlendSpacePlayer_1) == 0x000700, "Member 'UABP_GoblinMage_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_StateResult_5) == 0x000770, "Member 'UABP_GoblinMage_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_10) == 0x000790, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_SequencePlayer_2) == 0x0007B8, "Member 'UABP_GoblinMage_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_StateResult_4) == 0x000800, "Member 'UABP_GoblinMage_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_BlendSpacePlayer) == 0x000820, "Member 'UABP_GoblinMage_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_StateResult_3) == 0x000890, "Member 'UABP_GoblinMage_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_StateMachine_1) == 0x0008B0, "Member 'UABP_GoblinMage_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_SaveCachedPose) == 0x000978, "Member 'UABP_GoblinMage_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_9) == 0x0009F8, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_8) == 0x000A20, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_7) == 0x000A48, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_6) == 0x000A70, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_5) == 0x000A98, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_4) == 0x000AC0, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_3) == 0x000AE8, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_2) == 0x000B10, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult_1) == 0x000B38, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_TransitionResult) == 0x000B60, "Member 'UABP_GoblinMage_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_SequencePlayer_1) == 0x000B88, "Member 'UABP_GoblinMage_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_UseCachedPose_2) == 0x000BD0, "Member 'UABP_GoblinMage_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_LayeredBoneBlend_1) == 0x000BF8, "Member 'UABP_GoblinMage_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_StateResult_2) == 0x000CE8, "Member 'UABP_GoblinMage_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_SequencePlayer) == 0x000D08, "Member 'UABP_GoblinMage_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_UseCachedPose_1) == 0x000D50, "Member 'UABP_GoblinMage_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_LayeredBoneBlend) == 0x000D78, "Member 'UABP_GoblinMage_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_StateResult_1) == 0x000E68, "Member 'UABP_GoblinMage_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_UseCachedPose) == 0x000E88, "Member 'UABP_GoblinMage_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_StateResult) == 0x000EB0, "Member 'UABP_GoblinMage_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, AnimGraphNode_StateMachine) == 0x000ED0, "Member 'UABP_GoblinMage_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, Combat) == 0x000F98, "Member 'UABP_GoblinMage_C::Combat' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, ToPeace) == 0x000F99, "Member 'UABP_GoblinMage_C::ToPeace' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, ToCombat) == 0x000F9A, "Member 'UABP_GoblinMage_C::ToCombat' has a wrong offset!");
static_assert(offsetof(UABP_GoblinMage_C, bIsDeathCurveLarge) == 0x000F9B, "Member 'UABP_GoblinMage_C::bIsDeathCurveLarge' has a wrong offset!");

}

