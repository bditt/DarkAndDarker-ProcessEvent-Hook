#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkeletonWarlord

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_Direction_structs.hpp"
#include "BP_DCMonsterBaseWithOptions_Boss_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SkeletonWarlord.BP_SkeletonWarlord_C
// 0x0200 (0x1600 - 0x1400)
class ABP_SkeletonWarlord_C : public ABP_DCMonsterBaseWithOptions_Boss_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_SkeletonWarlord_C;               // 0x13F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_DCHitBox_C*                         BP_DCHitBox9;                                      // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox8;                                      // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox7;                                      // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox6;                                      // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox5;                                      // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox4;                                      // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox3;                                      // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox2;                                      // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox1;                                      // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox;                                       // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Spawn_RoyalGuard;                                  // 0x1450(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, RepNotify, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Position_Change;                                   // 0x1460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Call_BackStep;                                     // 0x1470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Call_Bombing;                                      // 0x1480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class ADCMonsterBase*>                 Monster;                                           // 0x1490(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Max_Spawn_Count;                                   // 0x14A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RoyalGuard_Count;                                  // 0x14A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_Spawn_Count;                                  // 0x14A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4258[0x4];                                     // 0x14AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSpawner_C*                      Spawner;                                           // 0x14B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        SkeletonRoyalGuard;                                // 0x14B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RoyalGuard_Spawned;                                // 0x14C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4259[0x7];                                     // 0x14C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADCMonsterBase*>                 Position_Change_Temp_Targets;                      // 0x14D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ADCMonsterBase*                         Position_Change_Target;                            // 0x14E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Position_Change_Target_Location;                   // 0x14E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Call_ThrowingKnives;                               // 0x1500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Position_Change_To_Center;                         // 0x1510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class ADCMonsterBase*>                 Temp_Monster;                                      // 0x1520(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Position_Change_Enemy_Direction;                   // 0x1530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Position_Change_My__Direction;                     // 0x1534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Position_Change_Distance;                          // 0x1538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Direction                                   Position_Change_E_Direction;                       // 0x1540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_425A[0x7];                                     // 0x1541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   Gameplay_Tag_Lv_Apply;                             // 0x1548(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           Gameplay_Cue_Tag_Lv_Apply;                         // 0x1558(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_Soul_Count;                                    // 0x1560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lv_Effect_Count;                                   // 0x1564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Sword_Length_per_Lv_Effect_Count;                  // 0x1568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_425B[0x4];                                     // 0x156C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityAsync_WaitGameplayEffectApplied* Wait_Lv_Effect_Async_Action;                       // 0x1570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Dominated_Players;                                 // 0x1578(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ADCMonsterBase*>                 BonePrison;                                        // 0x1588(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        Combo_Reach_Coefficient;                           // 0x1598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Combo_Reach_Base;                                  // 0x15A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Five_Triggered;                                    // 0x15A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_425C[0x7];                                     // 0x15A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class ADCCharacterBase*, int32>          Enemies_On_Aoe;                                    // 0x15B0(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void Call_BackStep__DelegateSignature();
	void Call_BackStep_Event();
	void Call_Bombing__DelegateSignature();
	void Call_Bombing_Event();
	void Call_ThrowingKnives__DelegateSignature();
	void Call_ThrowingKnives_Event();
	void Combat_Activated();
	void Combo_Reach_Calculation(double* Return);
	void Comeback_Event_Start();
	void End_Combat();
	void ExecuteUbergraph_BP_SkeletonWarlord(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void OnAfterDeath();
	void OnApplied_B30537AB4260FD37F0444CBA03F1D53F(class AActor* Source, const struct FGameplayEffectSpecHandle& SpecHandle, const struct FActiveGameplayEffectHandle& ActiveHandle);
	void OnRep_Spawn_RoyalGuard();
	void OnSetAI();
	void Position_Change_To_Center__DelegateSignature();
	void Position_Change_To_Center_Event();
	void Position_Change__DelegateSignature();
	void Position_Change_Event();
	void ReceiveBeginPlay();
	void Set_Lv_Gameplay_Effect();
	void Spawn_RoyalGuard__DelegateSignature();
	void Spawn_RoyalGuard_Event();
	void Start_Combat();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SkeletonWarlord_C">();
	}
	static class ABP_SkeletonWarlord_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SkeletonWarlord_C>();
	}
};
static_assert(alignof(ABP_SkeletonWarlord_C) == 0x000010, "Wrong alignment on ABP_SkeletonWarlord_C");
static_assert(sizeof(ABP_SkeletonWarlord_C) == 0x001600, "Wrong size on ABP_SkeletonWarlord_C");
static_assert(offsetof(ABP_SkeletonWarlord_C, UberGraphFrame_BP_SkeletonWarlord_C) == 0x0013F8, "Member 'ABP_SkeletonWarlord_C::UberGraphFrame_BP_SkeletonWarlord_C' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, BP_DCHitBox9) == 0x001400, "Member 'ABP_SkeletonWarlord_C::BP_DCHitBox9' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, BP_DCHitBox8) == 0x001408, "Member 'ABP_SkeletonWarlord_C::BP_DCHitBox8' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, BP_DCHitBox7) == 0x001410, "Member 'ABP_SkeletonWarlord_C::BP_DCHitBox7' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, BP_DCHitBox6) == 0x001418, "Member 'ABP_SkeletonWarlord_C::BP_DCHitBox6' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, BP_DCHitBox5) == 0x001420, "Member 'ABP_SkeletonWarlord_C::BP_DCHitBox5' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, BP_DCHitBox4) == 0x001428, "Member 'ABP_SkeletonWarlord_C::BP_DCHitBox4' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, BP_DCHitBox3) == 0x001430, "Member 'ABP_SkeletonWarlord_C::BP_DCHitBox3' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, BP_DCHitBox2) == 0x001438, "Member 'ABP_SkeletonWarlord_C::BP_DCHitBox2' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, BP_DCHitBox1) == 0x001440, "Member 'ABP_SkeletonWarlord_C::BP_DCHitBox1' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, BP_DCHitBox) == 0x001448, "Member 'ABP_SkeletonWarlord_C::BP_DCHitBox' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Spawn_RoyalGuard) == 0x001450, "Member 'ABP_SkeletonWarlord_C::Spawn_RoyalGuard' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Position_Change) == 0x001460, "Member 'ABP_SkeletonWarlord_C::Position_Change' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Call_BackStep) == 0x001470, "Member 'ABP_SkeletonWarlord_C::Call_BackStep' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Call_Bombing) == 0x001480, "Member 'ABP_SkeletonWarlord_C::Call_Bombing' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Monster) == 0x001490, "Member 'ABP_SkeletonWarlord_C::Monster' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Max_Spawn_Count) == 0x0014A0, "Member 'ABP_SkeletonWarlord_C::Max_Spawn_Count' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, RoyalGuard_Count) == 0x0014A4, "Member 'ABP_SkeletonWarlord_C::RoyalGuard_Count' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Temp_Spawn_Count) == 0x0014A8, "Member 'ABP_SkeletonWarlord_C::Temp_Spawn_Count' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Spawner) == 0x0014B0, "Member 'ABP_SkeletonWarlord_C::Spawner' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, SkeletonRoyalGuard) == 0x0014B8, "Member 'ABP_SkeletonWarlord_C::SkeletonRoyalGuard' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, RoyalGuard_Spawned) == 0x0014C8, "Member 'ABP_SkeletonWarlord_C::RoyalGuard_Spawned' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Position_Change_Temp_Targets) == 0x0014D0, "Member 'ABP_SkeletonWarlord_C::Position_Change_Temp_Targets' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Position_Change_Target) == 0x0014E0, "Member 'ABP_SkeletonWarlord_C::Position_Change_Target' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Position_Change_Target_Location) == 0x0014E8, "Member 'ABP_SkeletonWarlord_C::Position_Change_Target_Location' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Call_ThrowingKnives) == 0x001500, "Member 'ABP_SkeletonWarlord_C::Call_ThrowingKnives' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Position_Change_To_Center) == 0x001510, "Member 'ABP_SkeletonWarlord_C::Position_Change_To_Center' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Temp_Monster) == 0x001520, "Member 'ABP_SkeletonWarlord_C::Temp_Monster' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Position_Change_Enemy_Direction) == 0x001530, "Member 'ABP_SkeletonWarlord_C::Position_Change_Enemy_Direction' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Position_Change_My__Direction) == 0x001534, "Member 'ABP_SkeletonWarlord_C::Position_Change_My__Direction' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Position_Change_Distance) == 0x001538, "Member 'ABP_SkeletonWarlord_C::Position_Change_Distance' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Position_Change_E_Direction) == 0x001540, "Member 'ABP_SkeletonWarlord_C::Position_Change_E_Direction' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Gameplay_Tag_Lv_Apply) == 0x001548, "Member 'ABP_SkeletonWarlord_C::Gameplay_Tag_Lv_Apply' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Gameplay_Cue_Tag_Lv_Apply) == 0x001558, "Member 'ABP_SkeletonWarlord_C::Gameplay_Cue_Tag_Lv_Apply' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Max_Soul_Count) == 0x001560, "Member 'ABP_SkeletonWarlord_C::Max_Soul_Count' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Lv_Effect_Count) == 0x001564, "Member 'ABP_SkeletonWarlord_C::Lv_Effect_Count' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Sword_Length_per_Lv_Effect_Count) == 0x001568, "Member 'ABP_SkeletonWarlord_C::Sword_Length_per_Lv_Effect_Count' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Wait_Lv_Effect_Async_Action) == 0x001570, "Member 'ABP_SkeletonWarlord_C::Wait_Lv_Effect_Async_Action' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Dominated_Players) == 0x001578, "Member 'ABP_SkeletonWarlord_C::Dominated_Players' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, BonePrison) == 0x001588, "Member 'ABP_SkeletonWarlord_C::BonePrison' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Combo_Reach_Coefficient) == 0x001598, "Member 'ABP_SkeletonWarlord_C::Combo_Reach_Coefficient' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Combo_Reach_Base) == 0x0015A0, "Member 'ABP_SkeletonWarlord_C::Combo_Reach_Base' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Five_Triggered) == 0x0015A8, "Member 'ABP_SkeletonWarlord_C::Five_Triggered' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonWarlord_C, Enemies_On_Aoe) == 0x0015B0, "Member 'ABP_SkeletonWarlord_C::Enemies_On_Aoe' has a wrong offset!");

}

