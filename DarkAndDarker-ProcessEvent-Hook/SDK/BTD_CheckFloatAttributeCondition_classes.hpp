#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_CheckFloatAttributeCondition

#include "Basic.hpp"

#include "E_FloatAttributeType_structs.hpp"
#include "E_CompareNumber_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTD_CheckFloatAttributeCondition.BTD_CheckFloatAttributeCondition_C
// 0x0040 (0x00E0 - 0x00A0)
class UBTD_CheckFloatAttributeCondition_C final : public UBTDecorator_BlueprintBase
{
public:
	bool                                          Get_Param_Type_From_Monster_BP;                    // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_FloatAttributeType                          Param_Type;                                        // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CompareNumber                               CompareWith;                                       // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C3D[0x5];                                     // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FloatValue;                                        // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 BlackboardKey;                                     // 0x00B0(0x0028)(Edit, BlueprintVisible)
	class ABP_DCMonsterBaseWithOptions_C*         As_BP_DCMonster_Base_With_Options;                 // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Compare_Float_Value(double CompareFloatValue, bool* Bool);
	void Compare_Move_Speed(double Move_Speed, bool* Bool);
	void Compare_Primary_Attack_Power(double Primary_Attack_Power, bool* Bool);
	void Compare_Secondary_Attack_Power(double Secondary_Attack_Power, bool* Bool);
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTD_CheckFloatAttributeCondition_C">();
	}
	static class UBTD_CheckFloatAttributeCondition_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTD_CheckFloatAttributeCondition_C>();
	}
};
static_assert(alignof(UBTD_CheckFloatAttributeCondition_C) == 0x000008, "Wrong alignment on UBTD_CheckFloatAttributeCondition_C");
static_assert(sizeof(UBTD_CheckFloatAttributeCondition_C) == 0x0000E0, "Wrong size on UBTD_CheckFloatAttributeCondition_C");
static_assert(offsetof(UBTD_CheckFloatAttributeCondition_C, Get_Param_Type_From_Monster_BP) == 0x0000A0, "Member 'UBTD_CheckFloatAttributeCondition_C::Get_Param_Type_From_Monster_BP' has a wrong offset!");
static_assert(offsetof(UBTD_CheckFloatAttributeCondition_C, Param_Type) == 0x0000A1, "Member 'UBTD_CheckFloatAttributeCondition_C::Param_Type' has a wrong offset!");
static_assert(offsetof(UBTD_CheckFloatAttributeCondition_C, CompareWith) == 0x0000A2, "Member 'UBTD_CheckFloatAttributeCondition_C::CompareWith' has a wrong offset!");
static_assert(offsetof(UBTD_CheckFloatAttributeCondition_C, FloatValue) == 0x0000A8, "Member 'UBTD_CheckFloatAttributeCondition_C::FloatValue' has a wrong offset!");
static_assert(offsetof(UBTD_CheckFloatAttributeCondition_C, BlackboardKey) == 0x0000B0, "Member 'UBTD_CheckFloatAttributeCondition_C::BlackboardKey' has a wrong offset!");
static_assert(offsetof(UBTD_CheckFloatAttributeCondition_C, As_BP_DCMonster_Base_With_Options) == 0x0000D8, "Member 'UBTD_CheckFloatAttributeCondition_C::As_BP_DCMonster_Base_With_Options' has a wrong offset!");

}

