#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LivingArmor

#include "Basic.hpp"

#include "BP_DCMonsterBaseWithOptions_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LivingArmor.BP_LivingArmor_C
// 0x00B0 (0x1490 - 0x13E0)
class ABP_LivingArmor_C : public ABP_DCMonsterBaseWithOptions_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_LivingArmor_C;                   // 0x13D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_DCHitBox_C*                         HitBox_Foot_R;                                     // 0x13E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Foot_L;                                     // 0x13E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_Calf_R;                                     // 0x13F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_Calf_L;                                     // 0x13F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Thigh_R;                                    // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Thigh_L;                                    // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Pelvis;                                     // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Hand_R;                                     // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Hand_L;                                     // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_LowerArm_R;                                 // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_LowerArm_L;                                 // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_UpperArm_R;                                 // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_UpperArm_L;                                 // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Body;                                       // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Head;                                       // 0x1450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Combo_Count;                                       // 0x1458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_485C[0x4];                                     // 0x145C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Skill_Probability;                                 // 0x1460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Wake_Up_Timer_Handle;                              // 0x1468(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Condition_Complete_Count;                          // 0x1470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         In_Area_Count;                                     // 0x1474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_Combo_Count;                                   // 0x1478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_485D[0x4];                                     // 0x147C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_DCHitBox_C*>                 Hit_Box_Array;                                     // 0x1480(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void Add_Combo_Count();
	void ExecuteUbergraph_BP_LivingArmor(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void Get_Next_Combo_Possibility(class AActor* InActor, class AActor* LivingArmor, bool* Return);
	void OnAsyncInitialized();
	void ReceiveTick(float DeltaSeconds);
	void Reset_Combo_Count();
	void TargeNotLookingLivingArmor();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LivingArmor_C">();
	}
	static class ABP_LivingArmor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LivingArmor_C>();
	}
};
static_assert(alignof(ABP_LivingArmor_C) == 0x000010, "Wrong alignment on ABP_LivingArmor_C");
static_assert(sizeof(ABP_LivingArmor_C) == 0x001490, "Wrong size on ABP_LivingArmor_C");
static_assert(offsetof(ABP_LivingArmor_C, UberGraphFrame_BP_LivingArmor_C) == 0x0013D8, "Member 'ABP_LivingArmor_C::UberGraphFrame_BP_LivingArmor_C' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, HitBox_Foot_R) == 0x0013E0, "Member 'ABP_LivingArmor_C::HitBox_Foot_R' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, HitBox_Foot_L) == 0x0013E8, "Member 'ABP_LivingArmor_C::HitBox_Foot_L' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, Hitbox_Calf_R) == 0x0013F0, "Member 'ABP_LivingArmor_C::Hitbox_Calf_R' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, Hitbox_Calf_L) == 0x0013F8, "Member 'ABP_LivingArmor_C::Hitbox_Calf_L' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, HitBox_Thigh_R) == 0x001400, "Member 'ABP_LivingArmor_C::HitBox_Thigh_R' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, HitBox_Thigh_L) == 0x001408, "Member 'ABP_LivingArmor_C::HitBox_Thigh_L' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, HitBox_Pelvis) == 0x001410, "Member 'ABP_LivingArmor_C::HitBox_Pelvis' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, HitBox_Hand_R) == 0x001418, "Member 'ABP_LivingArmor_C::HitBox_Hand_R' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, HitBox_Hand_L) == 0x001420, "Member 'ABP_LivingArmor_C::HitBox_Hand_L' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, Hitbox_LowerArm_R) == 0x001428, "Member 'ABP_LivingArmor_C::Hitbox_LowerArm_R' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, Hitbox_LowerArm_L) == 0x001430, "Member 'ABP_LivingArmor_C::Hitbox_LowerArm_L' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, Hitbox_UpperArm_R) == 0x001438, "Member 'ABP_LivingArmor_C::Hitbox_UpperArm_R' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, Hitbox_UpperArm_L) == 0x001440, "Member 'ABP_LivingArmor_C::Hitbox_UpperArm_L' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, HitBox_Body) == 0x001448, "Member 'ABP_LivingArmor_C::HitBox_Body' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, HitBox_Head) == 0x001450, "Member 'ABP_LivingArmor_C::HitBox_Head' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, Combo_Count) == 0x001458, "Member 'ABP_LivingArmor_C::Combo_Count' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, Skill_Probability) == 0x001460, "Member 'ABP_LivingArmor_C::Skill_Probability' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, Wake_Up_Timer_Handle) == 0x001468, "Member 'ABP_LivingArmor_C::Wake_Up_Timer_Handle' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, Condition_Complete_Count) == 0x001470, "Member 'ABP_LivingArmor_C::Condition_Complete_Count' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, In_Area_Count) == 0x001474, "Member 'ABP_LivingArmor_C::In_Area_Count' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, Max_Combo_Count) == 0x001478, "Member 'ABP_LivingArmor_C::Max_Combo_Count' has a wrong offset!");
static_assert(offsetof(ABP_LivingArmor_C, Hit_Box_Array) == 0x001480, "Member 'ABP_LivingArmor_C::Hit_Box_Array' has a wrong offset!");

}

