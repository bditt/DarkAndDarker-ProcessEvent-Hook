#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_FrostImp_IceMine_DealtDamage

#include "Basic.hpp"

#include "GA_FrostImp_IceMine_DealtDamage_classes.hpp"
#include "GA_FrostImp_IceMine_DealtDamage_parameters.hpp"


namespace SDK
{

// Function GA_FrostImp_IceMine_DealtDamage.GA_FrostImp_IceMine_DealtDamage_C.Add GameplayCue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayCueTag                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UGA_FrostImp_IceMine_DealtDamage_C::Add_GameplayCue(const struct FGameplayTag& GameplayCueTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_FrostImp_IceMine_DealtDamage_C", "Add GameplayCue");

	Params::GA_FrostImp_IceMine_DealtDamage_C_Add_GameplayCue Parms{};

	Parms.GameplayCueTag = std::move(GameplayCueTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_FrostImp_IceMine_DealtDamage.GA_FrostImp_IceMine_DealtDamage_C.Apply GameplayEffect
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FGameplayTag>             Apply_Effect_Tags                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class ADCCharacterBase*                 Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_FrostImp_IceMine_DealtDamage_C::Apply_GameplayEffect(TArray<struct FGameplayTag>& Apply_Effect_Tags, class ADCCharacterBase* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_FrostImp_IceMine_DealtDamage_C", "Apply GameplayEffect");

	Params::GA_FrostImp_IceMine_DealtDamage_C_Apply_GameplayEffect Parms{};

	Parms.Apply_Effect_Tags = std::move(Apply_Effect_Tags);
	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	Apply_Effect_Tags = std::move(Parms.Apply_Effect_Tags);
}

}

