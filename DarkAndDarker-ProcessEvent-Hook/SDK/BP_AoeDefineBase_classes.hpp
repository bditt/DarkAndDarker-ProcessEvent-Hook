#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AoeDefineBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "BP_DCAoeBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AoeDefineBase.BP_AoeDefineBase_C
// 0x01E0 (0x0900 - 0x0720)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_AoeDefineBase_C : public ABP_DCAoeBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0718(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FGameplayTag>                   Gameplay_Ability_Event_Tag;                        // 0x0720(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           Add_GameplayCue_Tag_Location;                      // 0x0730(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Execute_GameplayCue_Tag_Location;                  // 0x0738(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Preceding_Time;                                    // 0x0740(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        Firing_Time;                                       // 0x0748(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        Destroying_Time;                                   // 0x0750(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        Interval;                                          // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADCCharacterBase*                       Overlap_In_Target;                                 // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ADCCharacterBase*                       Overlap_Out_Target;                                // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ADCCharacterBase*>               Overlapped_Targets;                                // 0x0770(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Overlapped_Targets_Count;                          // 0x0780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_387D[0x4];                                     // 0x0784(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActiveGameplayEffectHandle>    Activated_Gameplay_Effect_Handle;                  // 0x0788(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class ADCCharacterBase*, struct FGameplayTag> Activated_Gameplay_Tag_Handle;                     // 0x0798(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<class ADCCharacterBase*, struct FGameplayTag> Activated_GameplayCue_Handle;                      // 0x07E8(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Remove_Target_Out;                                 // 0x0838(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Draw_Debug_Launch_Area;                            // 0x0839(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_387E[0x6];                                     // 0x083A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Preceding_Time_Over_Event_Dispatcher;              // 0x0840(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Firing_Time_Over_Event_Dispatcher;                 // 0x0850(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Aoe_Activated_Event_Dispatcher;                    // 0x0860(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Ignore_Self;                                       // 0x0870(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Remove_When_Owner_Die;                             // 0x0871(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_387F[0x6];                                     // 0x0872(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class ADCCharacterBase*, struct FTimerHandle> Interval_TimerHandleMap;                           // 0x0878(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Trigger_On_Tick;                                   // 0x08C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3880[0x7];                                     // 0x08C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Overlapped_Targets_Valid_Event_Dispatcher;         // 0x08D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Overlapped_Targets_Invalid_Event_Dispatcher;       // 0x08E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         AddGameplayCueRawMagnitude;                        // 0x08F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Add_GameplayCue_Location();
	void AddBeginOverlapActor(class ADCCharacterBase* CharacterBase);
	void Added_716E053542D1466606443E991A05DE88();
	void Aoe_Activated();
	void Aoe_Activated_Event_Dispatcher__DelegateSignature();
	void Destroy_Event();
	void ExecuteUbergraph_BP_AoeDefineBase(int32 EntryPoint);
	void Firing_Time_Over();
	void Firing_Time_Over_Event_Dispatcher__DelegateSignature();
	void OnRep_Destroying_Time();
	void OnRep_Firing_Time();
	void OnRep_Instigator_Location();
	void OnRep_Preceding_Time();
	void Overlapped_Targets_Invalid();
	void Overlapped_Targets_Invalid_Event_Dispatcher__DelegateSignature();
	void Overlapped_Targets_Valid();
	void Overlapped_Targets_Valid_Event_Dispatcher__DelegateSignature();
	void Preceding_Time_over();
	void Preceding_Time_Over_Event_Dispatcher__DelegateSignature();
	void ReceiveBeginPlay();
	void Remove(class ADCCharacterBase* InputPin);
	void Remove_GameplayCue_Location();
	void RemoveEndOverlapActor(class ADCCharacterBase* CharacterBase);
	void Set_Collision_Profile_Activate(class UPrimitiveComponent* Target);
	void Set_Collision_Profile_Deactivate(class UPrimitiveComponent* Target);
	void Trigger(class ADCCharacterBase* Input_Pin);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AoeDefineBase_C">();
	}
	static class ABP_AoeDefineBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AoeDefineBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_AoeDefineBase_C) == 0x000010, "Wrong alignment on ABP_AoeDefineBase_C");
static_assert(sizeof(ABP_AoeDefineBase_C) == 0x000900, "Wrong size on ABP_AoeDefineBase_C");
static_assert(offsetof(ABP_AoeDefineBase_C, UberGraphFrame) == 0x000718, "Member 'ABP_AoeDefineBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Gameplay_Ability_Event_Tag) == 0x000720, "Member 'ABP_AoeDefineBase_C::Gameplay_Ability_Event_Tag' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Add_GameplayCue_Tag_Location) == 0x000730, "Member 'ABP_AoeDefineBase_C::Add_GameplayCue_Tag_Location' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Execute_GameplayCue_Tag_Location) == 0x000738, "Member 'ABP_AoeDefineBase_C::Execute_GameplayCue_Tag_Location' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Preceding_Time) == 0x000740, "Member 'ABP_AoeDefineBase_C::Preceding_Time' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Firing_Time) == 0x000748, "Member 'ABP_AoeDefineBase_C::Firing_Time' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Destroying_Time) == 0x000750, "Member 'ABP_AoeDefineBase_C::Destroying_Time' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Interval) == 0x000758, "Member 'ABP_AoeDefineBase_C::Interval' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Overlap_In_Target) == 0x000760, "Member 'ABP_AoeDefineBase_C::Overlap_In_Target' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Overlap_Out_Target) == 0x000768, "Member 'ABP_AoeDefineBase_C::Overlap_Out_Target' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Overlapped_Targets) == 0x000770, "Member 'ABP_AoeDefineBase_C::Overlapped_Targets' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Overlapped_Targets_Count) == 0x000780, "Member 'ABP_AoeDefineBase_C::Overlapped_Targets_Count' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Activated_Gameplay_Effect_Handle) == 0x000788, "Member 'ABP_AoeDefineBase_C::Activated_Gameplay_Effect_Handle' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Activated_Gameplay_Tag_Handle) == 0x000798, "Member 'ABP_AoeDefineBase_C::Activated_Gameplay_Tag_Handle' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Activated_GameplayCue_Handle) == 0x0007E8, "Member 'ABP_AoeDefineBase_C::Activated_GameplayCue_Handle' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Remove_Target_Out) == 0x000838, "Member 'ABP_AoeDefineBase_C::Remove_Target_Out' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Draw_Debug_Launch_Area) == 0x000839, "Member 'ABP_AoeDefineBase_C::Draw_Debug_Launch_Area' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Preceding_Time_Over_Event_Dispatcher) == 0x000840, "Member 'ABP_AoeDefineBase_C::Preceding_Time_Over_Event_Dispatcher' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Firing_Time_Over_Event_Dispatcher) == 0x000850, "Member 'ABP_AoeDefineBase_C::Firing_Time_Over_Event_Dispatcher' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Aoe_Activated_Event_Dispatcher) == 0x000860, "Member 'ABP_AoeDefineBase_C::Aoe_Activated_Event_Dispatcher' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Ignore_Self) == 0x000870, "Member 'ABP_AoeDefineBase_C::Ignore_Self' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Remove_When_Owner_Die) == 0x000871, "Member 'ABP_AoeDefineBase_C::Remove_When_Owner_Die' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Interval_TimerHandleMap) == 0x000878, "Member 'ABP_AoeDefineBase_C::Interval_TimerHandleMap' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Trigger_On_Tick) == 0x0008C8, "Member 'ABP_AoeDefineBase_C::Trigger_On_Tick' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Overlapped_Targets_Valid_Event_Dispatcher) == 0x0008D0, "Member 'ABP_AoeDefineBase_C::Overlapped_Targets_Valid_Event_Dispatcher' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, Overlapped_Targets_Invalid_Event_Dispatcher) == 0x0008E0, "Member 'ABP_AoeDefineBase_C::Overlapped_Targets_Invalid_Event_Dispatcher' has a wrong offset!");
static_assert(offsetof(ABP_AoeDefineBase_C, AddGameplayCueRawMagnitude) == 0x0008F0, "Member 'ABP_AoeDefineBase_C::AddGameplayCueRawMagnitude' has a wrong offset!");

}

