#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FlameSpout

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_TrapBase_StaticMesh_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FlameSpout.BP_FlameSpout_C
// 0x0088 (0x0600 - 0x0578)
class ABP_FlameSpout_C final : public ABP_TrapBase_StaticMesh_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_FlameSpout_C;                    // 0x0578(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          HitBox;                                            // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        ActivateTime;                                      // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeactivateTime;                                    // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CollisionPosition;                                 // 0x0598(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CollisionSize;                                     // 0x05B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRandomActiveTime;                                // 0x05C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRandomDectiveTime;                               // 0x05C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5ABC[0x6];                                     // 0x05CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinRandomDeactiveTime;                             // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinRandomActiveTime;                               // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxRandomActiveTime;                               // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxRandomDeactiveTime;                             // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DelayTime;                                         // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnInfinityActive;                                  // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Activate();
	void EventMsgSound(const struct FMsgSoundEvent& InMsg);
	void ExecuteUbergraph_BP_FlameSpout(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void GetActivateTime(double* Result);
	void GetDeactivateTime(double* Result);
	void InteractSucceed(class AActor* Interacter, const struct FGameplayTag& StateTag, const struct FGameplayTag& TriggerTag, const struct FHitResult& HitResult);
	void OnTrapActivate(bool* Result);
	void OnTrapDeactivate(bool* Result);
	void ReceiveBeginPlay();
	void ReceivePreInitializeComponents();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FlameSpout_C">();
	}
	static class ABP_FlameSpout_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FlameSpout_C>();
	}
};
static_assert(alignof(ABP_FlameSpout_C) == 0x000008, "Wrong alignment on ABP_FlameSpout_C");
static_assert(sizeof(ABP_FlameSpout_C) == 0x000600, "Wrong size on ABP_FlameSpout_C");
static_assert(offsetof(ABP_FlameSpout_C, UberGraphFrame_BP_FlameSpout_C) == 0x000578, "Member 'ABP_FlameSpout_C::UberGraphFrame_BP_FlameSpout_C' has a wrong offset!");
static_assert(offsetof(ABP_FlameSpout_C, HitBox) == 0x000580, "Member 'ABP_FlameSpout_C::HitBox' has a wrong offset!");
static_assert(offsetof(ABP_FlameSpout_C, ActivateTime) == 0x000588, "Member 'ABP_FlameSpout_C::ActivateTime' has a wrong offset!");
static_assert(offsetof(ABP_FlameSpout_C, DeactivateTime) == 0x000590, "Member 'ABP_FlameSpout_C::DeactivateTime' has a wrong offset!");
static_assert(offsetof(ABP_FlameSpout_C, CollisionPosition) == 0x000598, "Member 'ABP_FlameSpout_C::CollisionPosition' has a wrong offset!");
static_assert(offsetof(ABP_FlameSpout_C, CollisionSize) == 0x0005B0, "Member 'ABP_FlameSpout_C::CollisionSize' has a wrong offset!");
static_assert(offsetof(ABP_FlameSpout_C, IsRandomActiveTime) == 0x0005C8, "Member 'ABP_FlameSpout_C::IsRandomActiveTime' has a wrong offset!");
static_assert(offsetof(ABP_FlameSpout_C, IsRandomDectiveTime) == 0x0005C9, "Member 'ABP_FlameSpout_C::IsRandomDectiveTime' has a wrong offset!");
static_assert(offsetof(ABP_FlameSpout_C, MinRandomDeactiveTime) == 0x0005D0, "Member 'ABP_FlameSpout_C::MinRandomDeactiveTime' has a wrong offset!");
static_assert(offsetof(ABP_FlameSpout_C, MinRandomActiveTime) == 0x0005D8, "Member 'ABP_FlameSpout_C::MinRandomActiveTime' has a wrong offset!");
static_assert(offsetof(ABP_FlameSpout_C, MaxRandomActiveTime) == 0x0005E0, "Member 'ABP_FlameSpout_C::MaxRandomActiveTime' has a wrong offset!");
static_assert(offsetof(ABP_FlameSpout_C, MaxRandomDeactiveTime) == 0x0005E8, "Member 'ABP_FlameSpout_C::MaxRandomDeactiveTime' has a wrong offset!");
static_assert(offsetof(ABP_FlameSpout_C, DelayTime) == 0x0005F0, "Member 'ABP_FlameSpout_C::DelayTime' has a wrong offset!");
static_assert(offsetof(ABP_FlameSpout_C, OnInfinityActive) == 0x0005F8, "Member 'ABP_FlameSpout_C::OnInfinityActive' has a wrong offset!");

}

