#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_SmallGhost

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ABP_SmallGhost_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "DungeonCrawler_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_SmallGhost.ABP_SmallGhost_C
// 0x09C0 (0x0EF0 - 0x0530)
class UABP_SmallGhost_C final : public UDCMonsterAnimInstanceBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_SmallGhost::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0538(0x000C)(HasGetValueTypeHash)
	uint8                                         Pad_3E80[0x4];                                     // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0548(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0550(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0558(0x0020)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0578(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x05C0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x05E8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0610(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0658(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0678(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x06E8(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x0708(0x00C8)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x07D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x07F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0820(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0848(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0870(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0898(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x08C0(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x08E8(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0910(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0930(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0978(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x09C0(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x09E8(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x0A30(0x00F0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0B20(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0B40(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0B88(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0BD0(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0BF8(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0C40(0x00F0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0D30(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0D50(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0D78(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0D98(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0E60(0x0080)()
	bool                                          ShouldPlayHitReactionNotSpawn;                     // 0x0EE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldPlayStaggeredNotSpawn;                       // 0x0EE1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void ExecuteUbergraph_ABP_SmallGhost(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_SmallGhost_C">();
	}
	static class UABP_SmallGhost_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_SmallGhost_C>();
	}
};
static_assert(alignof(UABP_SmallGhost_C) == 0x000010, "Wrong alignment on UABP_SmallGhost_C");
static_assert(sizeof(UABP_SmallGhost_C) == 0x000EF0, "Wrong size on UABP_SmallGhost_C");
static_assert(offsetof(UABP_SmallGhost_C, UberGraphFrame) == 0x000530, "Member 'UABP_SmallGhost_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, __AnimBlueprintMutables) == 0x000538, "Member 'UABP_SmallGhost_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimBlueprintExtension_PropertyAccess) == 0x000548, "Member 'UABP_SmallGhost_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimBlueprintExtension_Base) == 0x000550, "Member 'UABP_SmallGhost_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_Root) == 0x000558, "Member 'UABP_SmallGhost_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_Slot) == 0x000578, "Member 'UABP_SmallGhost_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_TransitionResult_8) == 0x0005C0, "Member 'UABP_SmallGhost_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_TransitionResult_7) == 0x0005E8, "Member 'UABP_SmallGhost_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_SequencePlayer_4) == 0x000610, "Member 'UABP_SmallGhost_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_StateResult_5) == 0x000658, "Member 'UABP_SmallGhost_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_BlendSpacePlayer) == 0x000678, "Member 'UABP_SmallGhost_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_StateResult_4) == 0x0006E8, "Member 'UABP_SmallGhost_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_StateMachine_1) == 0x000708, "Member 'UABP_SmallGhost_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_TransitionResult_6) == 0x0007D0, "Member 'UABP_SmallGhost_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_TransitionResult_5) == 0x0007F8, "Member 'UABP_SmallGhost_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_TransitionResult_4) == 0x000820, "Member 'UABP_SmallGhost_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_TransitionResult_3) == 0x000848, "Member 'UABP_SmallGhost_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_TransitionResult_2) == 0x000870, "Member 'UABP_SmallGhost_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_TransitionResult_1) == 0x000898, "Member 'UABP_SmallGhost_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_TransitionResult) == 0x0008C0, "Member 'UABP_SmallGhost_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_UseCachedPose_3) == 0x0008E8, "Member 'UABP_SmallGhost_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_StateResult_3) == 0x000910, "Member 'UABP_SmallGhost_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_SequencePlayer_3) == 0x000930, "Member 'UABP_SmallGhost_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_SequencePlayer_2) == 0x000978, "Member 'UABP_SmallGhost_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_UseCachedPose_2) == 0x0009C0, "Member 'UABP_SmallGhost_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_BlendListByBool_1) == 0x0009E8, "Member 'UABP_SmallGhost_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_LayeredBoneBlend_1) == 0x000A30, "Member 'UABP_SmallGhost_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_StateResult_2) == 0x000B20, "Member 'UABP_SmallGhost_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_SequencePlayer_1) == 0x000B40, "Member 'UABP_SmallGhost_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_SequencePlayer) == 0x000B88, "Member 'UABP_SmallGhost_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_UseCachedPose_1) == 0x000BD0, "Member 'UABP_SmallGhost_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_BlendListByBool) == 0x000BF8, "Member 'UABP_SmallGhost_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_LayeredBoneBlend) == 0x000C40, "Member 'UABP_SmallGhost_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_StateResult_1) == 0x000D30, "Member 'UABP_SmallGhost_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_UseCachedPose) == 0x000D50, "Member 'UABP_SmallGhost_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_StateResult) == 0x000D78, "Member 'UABP_SmallGhost_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_StateMachine) == 0x000D98, "Member 'UABP_SmallGhost_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, AnimGraphNode_SaveCachedPose) == 0x000E60, "Member 'UABP_SmallGhost_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, ShouldPlayHitReactionNotSpawn) == 0x000EE0, "Member 'UABP_SmallGhost_C::ShouldPlayHitReactionNotSpawn' has a wrong offset!");
static_assert(offsetof(UABP_SmallGhost_C, ShouldPlayStaggeredNotSpawn) == 0x000EE1, "Member 'UABP_SmallGhost_C::ShouldPlayStaggeredNotSpawn' has a wrong offset!");

}

