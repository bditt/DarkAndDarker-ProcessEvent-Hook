#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WallSpike

#include "Basic.hpp"

#include "DungeonCrawler_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_WallSpike.BP_WallSpike_C.BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C10[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_WallSpike_C_BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_WallSpike.BP_WallSpike_C.EventFMsgSoundEvent
// 0x0028 (0x0028 - 0x0000)
struct BP_WallSpike_C_EventFMsgSoundEvent final
{
public:
	struct FMsgSoundEvent                         Msg;                                               // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_WallSpike_C_EventFMsgSoundEvent) == 0x000008, "Wrong alignment on BP_WallSpike_C_EventFMsgSoundEvent");
static_assert(sizeof(BP_WallSpike_C_EventFMsgSoundEvent) == 0x000028, "Wrong size on BP_WallSpike_C_EventFMsgSoundEvent");
static_assert(offsetof(BP_WallSpike_C_EventFMsgSoundEvent, Msg) == 0x000000, "Member 'BP_WallSpike_C_EventFMsgSoundEvent::Msg' has a wrong offset!");

// Function BP_WallSpike.BP_WallSpike_C.ExecuteUbergraph_BP_WallSpike
// 0x0310 (0x0310 - 0x0000)
struct BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C11[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMsgBaseNode*                           K2Node_CustomEvent_ProxyObject;                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UMsgBaseNode* ProxyObject)> K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FMsgSoundEvent                         Temp_struct_Variable;                              // 0x0020(0x0028)()
	class UMsgBaseNode*                           Temp_object_Variable;                              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Interacter;                           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_StateTag;                             // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_TriggerTag;                           // 0x0060(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_HitResult;                            // 0x0068(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C12[0x3];                                     // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_InGameplayTag;                        // 0x0154(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InCount;                              // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1; // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C13[0x6];                                     // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0168(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C14[0x3];                                     // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0180(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0190(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C15[0x3];                                     // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x01A0(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_NotEqual_GameplayTag_ReturnValue;         // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C16[0x7];                                     // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMsgSoundEvent                         Temp_struct_Variable_1;                            // 0x0290(0x0028)()
	bool                                          CallFunc_GetPayload_ReturnValue;                   // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetAbilityTriggerTag_Result;              // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetAbilityTriggerTag_Result_1;            // 0x02BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x02BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C17[0x4];                                     // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMsgSoundEvent                         K2Node_CustomEvent_Msg;                            // 0x02C0(0x0028)()
	TScriptInterface<class IBaseInterface>        CallFunc_BindMsgNode_BaseInterface_CastInput;      // 0x02E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UBindMsgNode*                           CallFunc_BindMsgNode_ReturnValue;                  // 0x02F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlaySoundWithTag_ReturnValue;             // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C18[0x2];                                     // 0x0302(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_1;            // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_2;            // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike) == 0x000008, "Wrong alignment on BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike");
static_assert(sizeof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike) == 0x000310, "Wrong size on BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, EntryPoint) == 0x000000, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, K2Node_CustomEvent_ProxyObject) == 0x000008, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::K2Node_CustomEvent_ProxyObject' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, Temp_struct_Variable) == 0x000020, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, Temp_object_Variable) == 0x000048, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, K2Node_Event_Interacter) == 0x000050, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::K2Node_Event_Interacter' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, K2Node_Event_StateTag) == 0x000058, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::K2Node_Event_StateTag' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, K2Node_Event_TriggerTag) == 0x000060, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::K2Node_Event_TriggerTag' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, K2Node_Event_HitResult) == 0x000068, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::K2Node_Event_HitResult' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000150, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, K2Node_Event_InGameplayTag) == 0x000154, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::K2Node_Event_InGameplayTag' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, K2Node_Event_InCount) == 0x00015C, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::K2Node_Event_InCount' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, CallFunc_Greater_IntInt_ReturnValue) == 0x000160, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1) == 0x000161, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000168, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, CallFunc_Array_Length_ReturnValue) == 0x000178, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00017C, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000180, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, K2Node_ComponentBoundEvent_OtherActor) == 0x000188, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, K2Node_ComponentBoundEvent_OtherComp) == 0x000190, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000198, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, K2Node_ComponentBoundEvent_bFromSweep) == 0x00019C, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, K2Node_ComponentBoundEvent_SweepResult) == 0x0001A0, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, CallFunc_NotEqual_GameplayTag_ReturnValue) == 0x000288, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::CallFunc_NotEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, Temp_struct_Variable_1) == 0x000290, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, CallFunc_GetPayload_ReturnValue) == 0x0002B8, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::CallFunc_GetPayload_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, CallFunc_SetAbilityTriggerTag_Result) == 0x0002B9, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::CallFunc_SetAbilityTriggerTag_Result' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, CallFunc_SetAbilityTriggerTag_Result_1) == 0x0002BA, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::CallFunc_SetAbilityTriggerTag_Result_1' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x0002BB, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, K2Node_CustomEvent_Msg) == 0x0002C0, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::K2Node_CustomEvent_Msg' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, CallFunc_BindMsgNode_BaseInterface_CastInput) == 0x0002E8, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::CallFunc_BindMsgNode_BaseInterface_CastInput' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, CallFunc_BindMsgNode_ReturnValue) == 0x0002F8, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::CallFunc_BindMsgNode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, CallFunc_PlaySoundWithTag_ReturnValue) == 0x000300, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::CallFunc_PlaySoundWithTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, CallFunc_IsValid_ReturnValue) == 0x000301, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, CallFunc_Delay_Duration_ImplicitCast) == 0x000304, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, CallFunc_Delay_Duration_ImplicitCast_1) == 0x000308, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::CallFunc_Delay_Duration_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike, CallFunc_Delay_Duration_ImplicitCast_2) == 0x00030C, "Member 'BP_WallSpike_C_ExecuteUbergraph_BP_WallSpike::CallFunc_Delay_Duration_ImplicitCast_2' has a wrong offset!");

// Function BP_WallSpike.BP_WallSpike_C.GameplayTagUpdated
// 0x000C (0x000C - 0x0000)
struct BP_WallSpike_C_GameplayTagUpdated final
{
public:
	struct FGameplayTag                           InGameplayTag;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         InCount;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WallSpike_C_GameplayTagUpdated) == 0x000004, "Wrong alignment on BP_WallSpike_C_GameplayTagUpdated");
static_assert(sizeof(BP_WallSpike_C_GameplayTagUpdated) == 0x00000C, "Wrong size on BP_WallSpike_C_GameplayTagUpdated");
static_assert(offsetof(BP_WallSpike_C_GameplayTagUpdated, InGameplayTag) == 0x000000, "Member 'BP_WallSpike_C_GameplayTagUpdated::InGameplayTag' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_GameplayTagUpdated, InCount) == 0x000008, "Member 'BP_WallSpike_C_GameplayTagUpdated::InCount' has a wrong offset!");

// Function BP_WallSpike.BP_WallSpike_C.InteractSucceed
// 0x0100 (0x0100 - 0x0000)
struct BP_WallSpike_C_InteractSucceed final
{
public:
	class AActor*                                 Interacter;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           StateTag;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TriggerTag;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0018(0x00E8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_WallSpike_C_InteractSucceed) == 0x000008, "Wrong alignment on BP_WallSpike_C_InteractSucceed");
static_assert(sizeof(BP_WallSpike_C_InteractSucceed) == 0x000100, "Wrong size on BP_WallSpike_C_InteractSucceed");
static_assert(offsetof(BP_WallSpike_C_InteractSucceed, Interacter) == 0x000000, "Member 'BP_WallSpike_C_InteractSucceed::Interacter' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_InteractSucceed, StateTag) == 0x000008, "Member 'BP_WallSpike_C_InteractSucceed::StateTag' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_InteractSucceed, TriggerTag) == 0x000010, "Member 'BP_WallSpike_C_InteractSucceed::TriggerTag' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_InteractSucceed, HitResult) == 0x000018, "Member 'BP_WallSpike_C_InteractSucceed::HitResult' has a wrong offset!");

// Function BP_WallSpike.BP_WallSpike_C.OnMessageReceived_55C0747248939B02403D89BE669E525B
// 0x0008 (0x0008 - 0x0000)
struct BP_WallSpike_C_OnMessageReceived_55C0747248939B02403D89BE669E525B final
{
public:
	class UMsgBaseNode*                           ProxyObject;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WallSpike_C_OnMessageReceived_55C0747248939B02403D89BE669E525B) == 0x000008, "Wrong alignment on BP_WallSpike_C_OnMessageReceived_55C0747248939B02403D89BE669E525B");
static_assert(sizeof(BP_WallSpike_C_OnMessageReceived_55C0747248939B02403D89BE669E525B) == 0x000008, "Wrong size on BP_WallSpike_C_OnMessageReceived_55C0747248939B02403D89BE669E525B");
static_assert(offsetof(BP_WallSpike_C_OnMessageReceived_55C0747248939B02403D89BE669E525B, ProxyObject) == 0x000000, "Member 'BP_WallSpike_C_OnMessageReceived_55C0747248939B02403D89BE669E525B::ProxyObject' has a wrong offset!");

// Function BP_WallSpike.BP_WallSpike_C.SetAbilityTriggerTag
// 0x000C (0x000C - 0x0000)
struct BP_WallSpike_C_SetAbilityTriggerTag final
{
public:
	struct FGameplayTag                           New_Tag;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_GameplayTag_ReturnValue;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WallSpike_C_SetAbilityTriggerTag) == 0x000004, "Wrong alignment on BP_WallSpike_C_SetAbilityTriggerTag");
static_assert(sizeof(BP_WallSpike_C_SetAbilityTriggerTag) == 0x00000C, "Wrong size on BP_WallSpike_C_SetAbilityTriggerTag");
static_assert(offsetof(BP_WallSpike_C_SetAbilityTriggerTag, New_Tag) == 0x000000, "Member 'BP_WallSpike_C_SetAbilityTriggerTag::New_Tag' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_SetAbilityTriggerTag, Result) == 0x000008, "Member 'BP_WallSpike_C_SetAbilityTriggerTag::Result' has a wrong offset!");
static_assert(offsetof(BP_WallSpike_C_SetAbilityTriggerTag, CallFunc_NotEqual_GameplayTag_ReturnValue) == 0x000009, "Member 'BP_WallSpike_C_SetAbilityTriggerTag::CallFunc_NotEqual_GameplayTag_ReturnValue' has a wrong offset!");

}

