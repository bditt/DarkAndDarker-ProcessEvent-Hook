#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MonsterBPLibrary

#include "Basic.hpp"

#include "MonsterBPLibrary_classes.hpp"
#include "MonsterBPLibrary_parameters.hpp"


namespace SDK
{

// Function MonsterBPLibrary.MonsterBPLibrary_C.Actor Has AI Timer
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Timer_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Actor_Has_AI_Timer(class AActor* Actor, int32 Timer_Index, class UObject* __WorldContext, bool* Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Actor Has AI Timer");

	Params::MonsterBPLibrary_C_Actor_Has_AI_Timer Parms{};

	Parms.Actor = Actor;
	Parms.Timer_Index = Timer_Index;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Add AI Timer
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Timer_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Second                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Add_AI_Timer(class AActor* Actor, int32 Timer_Index, double Second, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Add AI Timer");

	Params::MonsterBPLibrary_C_Add_AI_Timer Parms{};

	Parms.Actor = Actor;
	Parms.Timer_Index = Timer_Index;
	Parms.Second = Second;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Change GE Attribute And Apply
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SourceActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target_Actor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FPrimaryAssetId                  Gameplay_Effect                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     Set_By_Caller_Tag                                      (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FActiveGameplayEffectHandle>Return_Value                                           (Parm, OutParm)

void UMonsterBPLibrary_C::Change_GE_Attribute_And_Apply(class AActor* SourceActor, class AActor* Target_Actor, const struct FPrimaryAssetId& Gameplay_Effect, const struct FGameplayTag& Set_By_Caller_Tag, double Value, class UObject* __WorldContext, TArray<struct FActiveGameplayEffectHandle>* Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Change GE Attribute And Apply");

	Params::MonsterBPLibrary_C_Change_GE_Attribute_And_Apply Parms{};

	Parms.SourceActor = SourceActor;
	Parms.Target_Actor = Target_Actor;
	Parms.Gameplay_Effect = std::move(Gameplay_Effect);
	Parms.Set_By_Caller_Tag = std::move(Set_By_Caller_Tag);
	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = std::move(Parms.Return_Value);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Check Target Has State Tags To Lose From Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Check_Target_Has_State_Tags_To_Lose_From_Array(class UObject* Target, class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Check Target Has State Tags To Lose From Array");

	Params::MonsterBPLibrary_C_Check_Target_Has_State_Tags_To_Lose_From_Array Parms{};

	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Filter Target From CombatArea
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          SpawnLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  FilterDistanceFromSpawnLocation                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ADCCharacterBase*>         TargetArray                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ADCCharacterBase*>         Result                                                 (Parm, OutParm)

void UMonsterBPLibrary_C::Filter_Target_From_CombatArea(const struct FVector& SpawnLocation, double FilterDistanceFromSpawnLocation, TArray<class ADCCharacterBase*>& TargetArray, class UObject* __WorldContext, bool* Return_Value, TArray<class ADCCharacterBase*>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Filter Target From CombatArea");

	Params::MonsterBPLibrary_C_Filter_Target_From_CombatArea Parms{};

	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.FilterDistanceFromSpawnLocation = FilterDistanceFromSpawnLocation;
	Parms.TargetArray = std::move(TargetArray);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	TargetArray = std::move(Parms.TargetArray);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Filter Target From Spawn Location
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          SpawnLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  FilterDistanceFromSpawnLocation                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ADCCharacterBase*>         TargetArray                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ADCCharacterBase*>         Result                                                 (Parm, OutParm)

void UMonsterBPLibrary_C::Filter_Target_From_Spawn_Location(const struct FVector& SpawnLocation, double FilterDistanceFromSpawnLocation, TArray<class ADCCharacterBase*>& TargetArray, class UObject* __WorldContext, bool* Return_Value, TArray<class ADCCharacterBase*>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Filter Target From Spawn Location");

	Params::MonsterBPLibrary_C_Filter_Target_From_Spawn_Location Parms{};

	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.FilterDistanceFromSpawnLocation = FilterDistanceFromSpawnLocation;
	Parms.TargetArray = std::move(TargetArray);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	TargetArray = std::move(Parms.TargetArray);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Filter Target Has Aggro
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_DCMonsterBase_C*              MonsterBase                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class ADCCharacterBase*>         Input_TargetArray                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ADCCharacterBase*>         Output_TargetArray                                     (Parm, OutParm)

void UMonsterBPLibrary_C::Filter_Target_Has_Aggro(class ABP_DCMonsterBase_C* MonsterBase, TArray<class ADCCharacterBase*>& Input_TargetArray, class UObject* __WorldContext, bool* Return_Value, TArray<class ADCCharacterBase*>* Output_TargetArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Filter Target Has Aggro");

	Params::MonsterBPLibrary_C_Filter_Target_Has_Aggro Parms{};

	Parms.MonsterBase = MonsterBase;
	Parms.Input_TargetArray = std::move(Input_TargetArray);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_TargetArray = std::move(Parms.Input_TargetArray);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;

	if (Output_TargetArray != nullptr)
		*Output_TargetArray = std::move(Parms.Output_TargetArray);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Actors In Range And Angle From Location
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   ActorsToIgnore                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ADCCharacterBase*>         DCCharacterBase                                        (Parm, OutParm)

void UMonsterBPLibrary_C::Get_Actors_In_Range_And_Angle_From_Location(const struct FVector& Location, double Range, double Direction, double Angle, const TArray<class AActor*>& ActorsToIgnore, class UObject* __WorldContext, bool* Result, TArray<class ADCCharacterBase*>* DCCharacterBase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Actors In Range And Angle From Location");

	Params::MonsterBPLibrary_C_Get_Actors_In_Range_And_Angle_From_Location Parms{};

	Parms.Location = std::move(Location);
	Parms.Range = Range;
	Parms.Direction = Direction;
	Parms.Angle = Angle;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (DCCharacterBase != nullptr)
		*DCCharacterBase = std::move(Parms.DCCharacterBase);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get And Compare To BlackBoard Mode
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_DCMonsterBaseWithOptions_C*   DCMonsterBase                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_ModeType                              Mode_Type                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_And_Compare_To_BlackBoard_Mode(class ABP_DCMonsterBaseWithOptions_C* DCMonsterBase, E_ModeType Mode_Type, class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get And Compare To BlackBoard Mode");

	Params::MonsterBPLibrary_C_Get_And_Compare_To_BlackBoard_Mode Parms{};

	Parms.DCMonsterBase = DCMonsterBase;
	Parms.Mode_Type = Mode_Type;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Angle Vector From Actor
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return_Valut                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_Angle_Vector_From_Actor(class AActor* Actor, double Angle, double Distance, class UObject* __WorldContext, struct FVector* Return_Valut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Angle Vector From Actor");

	Params::MonsterBPLibrary_C_Get_Angle_Vector_From_Actor Parms{};

	Parms.Actor = Actor;
	Parms.Angle = Angle;
	Parms.Distance = Distance;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Valut != nullptr)
		*Return_Valut = std::move(Parms.Return_Valut);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Angle Vector From Location
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return_Valut                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_Angle_Vector_From_Location(const struct FVector& Location, const struct FRotator& Rotation, double Angle, double Distance, class UObject* __WorldContext, struct FVector* Return_Valut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Angle Vector From Location");

	Params::MonsterBPLibrary_C_Get_Angle_Vector_From_Location Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Angle = Angle;
	Parms.Distance = Distance;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Valut != nullptr)
		*Return_Valut = std::move(Parms.Return_Valut);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Aoe Variables
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Instigator                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_AoeDefineBase_C*              AsBP_Aoe_Define_Base                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Preceding_Time                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Firing_Time                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Destroying_Time                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_Aoe_Variables(class AActor* Instigator, class UObject* __WorldContext, class ABP_AoeDefineBase_C** AsBP_Aoe_Define_Base, double* Preceding_Time, double* Firing_Time, double* Destroying_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Aoe Variables");

	Params::MonsterBPLibrary_C_Get_Aoe_Variables Parms{};

	Parms.Instigator = Instigator;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (AsBP_Aoe_Define_Base != nullptr)
		*AsBP_Aoe_Define_Base = Parms.AsBP_Aoe_Define_Base;

	if (Preceding_Time != nullptr)
		*Preceding_Time = Parms.Preceding_Time;

	if (Firing_Time != nullptr)
		*Firing_Time = Parms.Firing_Time;

	if (Destroying_Time != nullptr)
		*Destroying_Time = Parms.Destroying_Time;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get BB HPRatio
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_DCMonsterBaseWithOptions_C*   MonsterBase                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  HPRatio                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_BB_HPRatio(class ABP_DCMonsterBaseWithOptions_C* MonsterBase, class UObject* __WorldContext, double* HPRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get BB HPRatio");

	Params::MonsterBPLibrary_C_Get_BB_HPRatio Parms{};

	Parms.MonsterBase = MonsterBase;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (HPRatio != nullptr)
		*HPRatio = Parms.HPRatio;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get BB Phase
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_DCMonsterBaseWithOptions_C*   MonsterBase                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Phase                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_BB_Phase(class ABP_DCMonsterBaseWithOptions_C* MonsterBase, class UObject* __WorldContext, int32* Phase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get BB Phase");

	Params::MonsterBPLibrary_C_Get_BB_Phase Parms{};

	Parms.MonsterBase = MonsterBase;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Phase != nullptr)
		*Phase = Parms.Phase;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get BB Probability
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_DCMonsterBaseWithOptions_C*   MonsterBase                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Probability                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_BB_Probability(class ABP_DCMonsterBaseWithOptions_C* MonsterBase, class UObject* __WorldContext, double* Probability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get BB Probability");

	Params::MonsterBPLibrary_C_Get_BB_Probability Parms{};

	Parms.MonsterBase = MonsterBase;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Probability != nullptr)
		*Probability = Parms.Probability;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get BB Target Actor
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_DCMonsterBaseWithOptions_C*   MonsterBaseWithOptions                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ADCCharacterBase*                 DCCharacterBase                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_BB_Target_Actor(class ABP_DCMonsterBaseWithOptions_C* MonsterBaseWithOptions, class UObject* __WorldContext, bool* Result, class ADCCharacterBase** DCCharacterBase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get BB Target Actor");

	Params::MonsterBPLibrary_C_Get_BB_Target_Actor Parms{};

	Parms.MonsterBaseWithOptions = MonsterBaseWithOptions;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (DCCharacterBase != nullptr)
		*DCCharacterBase = Parms.DCCharacterBase;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Debuff Immune Tags
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FGameplayTag>             Debuff_Immune_Tags                                     (Parm, OutParm)

void UMonsterBPLibrary_C::Get_Debuff_Immune_Tags(class UObject* __WorldContext, TArray<struct FGameplayTag>* Debuff_Immune_Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Debuff Immune Tags");

	Params::MonsterBPLibrary_C_Get_Debuff_Immune_Tags Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Debuff_Immune_Tags != nullptr)
		*Debuff_Immune_Tags = std::move(Parms.Debuff_Immune_Tags);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Direction From Angle
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_Direction                             Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_Direction_From_Angle(double Angle, class UObject* __WorldContext, E_Direction* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Direction From Angle");

	Params::MonsterBPLibrary_C_Get_Direction_From_Angle Parms{};

	Parms.Angle = Angle;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = Parms.Direction;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Direction Vector
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_Direction                             Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Result_Vector                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_Direction_Vector(class AActor* Actor, E_Direction Direction, double Distance, class UObject* __WorldContext, struct FVector* Result_Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Direction Vector");

	Params::MonsterBPLibrary_C_Get_Direction_Vector Parms{};

	Parms.Actor = Actor;
	Parms.Direction = Direction;
	Parms.Distance = Distance;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result_Vector != nullptr)
		*Result_Vector = std::move(Parms.Result_Vector);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Enemies In Range And Angle From Actor
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result_By_TargetActor                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Get_from_Combat_Area                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Min_Range                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Max_Range                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DrawDebugArea                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ADCCharacterBase*>         DCCharacterBase                                        (Parm, OutParm)

void UMonsterBPLibrary_C::Get_Enemies_In_Range_And_Angle_From_Actor(class AActor* Actor, bool Result_By_TargetActor, bool Get_from_Combat_Area, double Min_Range, double Max_Range, double Direction, double Angle, bool DrawDebugArea, class UObject* __WorldContext, bool* Result, TArray<class ADCCharacterBase*>* DCCharacterBase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Enemies In Range And Angle From Actor");

	Params::MonsterBPLibrary_C_Get_Enemies_In_Range_And_Angle_From_Actor Parms{};

	Parms.Actor = Actor;
	Parms.Result_By_TargetActor = Result_By_TargetActor;
	Parms.Get_from_Combat_Area = Get_from_Combat_Area;
	Parms.Min_Range = Min_Range;
	Parms.Max_Range = Max_Range;
	Parms.Direction = Direction;
	Parms.Angle = Angle;
	Parms.DrawDebugArea = DrawDebugArea;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (DCCharacterBase != nullptr)
		*DCCharacterBase = std::move(Parms.DCCharacterBase);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Enemy Angle From Actor
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Caster                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_Enemy_Angle_From_Actor(class AActor* Caster, class AActor* Target, class UObject* __WorldContext, double* Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Enemy Angle From Actor");

	Params::MonsterBPLibrary_C_Get_Enemy_Angle_From_Actor Parms{};

	Parms.Caster = Caster;
	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Enemy Relative Angle From Actor
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Caster                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_Enemy_Relative_Angle_From_Actor(class AActor* Caster, class AActor* Target, class UObject* __WorldContext, float* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Enemy Relative Angle From Actor");

	Params::MonsterBPLibrary_C_Get_Enemy_Relative_Angle_From_Actor Parms{};

	Parms.Caster = Caster;
	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Instigator From Added Tag
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Gameplay_Tag                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayEffectSpecHandle        Spec_Handle                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Instigator                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_Instigator_From_Added_Tag(const struct FGameplayTag& Gameplay_Tag, const struct FGameplayEffectSpecHandle& Spec_Handle, class UObject* __WorldContext, bool* Result, class AActor** Instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Instigator From Added Tag");

	Params::MonsterBPLibrary_C_Get_Instigator_From_Added_Tag Parms{};

	Parms.Gameplay_Tag = std::move(Gameplay_Tag);
	Parms.Spec_Handle = std::move(Spec_Handle);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (Instigator != nullptr)
		*Instigator = Parms.Instigator;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Interrupt Montage Immune Tags
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FGameplayTag>             Interrupt_Action_Immune_Tags                           (Parm, OutParm)

void UMonsterBPLibrary_C::Get_Interrupt_Montage_Immune_Tags(class UObject* __WorldContext, TArray<struct FGameplayTag>* Interrupt_Action_Immune_Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Interrupt Montage Immune Tags");

	Params::MonsterBPLibrary_C_Get_Interrupt_Montage_Immune_Tags Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Interrupt_Action_Immune_Tags != nullptr)
		*Interrupt_Action_Immune_Tags = std::move(Parms.Interrupt_Action_Immune_Tags);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Max Distance From Perception
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_DCMonsterBaseWithOptions_C*   Monster_BP                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_DistanceFromVariables                 Get_Distance_From                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Default_Distance                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_Max_Distance_From_Perception(class ABP_DCMonsterBaseWithOptions_C* Monster_BP, E_DistanceFromVariables Get_Distance_From, double Default_Distance, class UObject* __WorldContext, bool* Result, double* Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Max Distance From Perception");

	Params::MonsterBPLibrary_C_Get_Max_Distance_From_Perception Parms{};

	Parms.Monster_BP = Monster_BP;
	Parms.Get_Distance_From = Get_Distance_From;
	Parms.Default_Distance = Default_Distance;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Native Angle
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_Native_Angle(double Angle, class UObject* __WorldContext, double* Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Native Angle");

	Params::MonsterBPLibrary_C_Get_Native_Angle Parms{};

	Parms.Angle = Angle;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Number Of Active Players In Combat Area
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ADCCharacterBase*>         Enemies_In_Combat_Area                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class ADCCharacterBase*>         Lost_Enemies_In_Combat_Area                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Number_Of_Players                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_Number_Of_Active_Players_In_Combat_Area(TArray<class ADCCharacterBase*>& Enemies_In_Combat_Area, TArray<class ADCCharacterBase*>& Lost_Enemies_In_Combat_Area, class UObject* __WorldContext, int32* Number_Of_Players)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Number Of Active Players In Combat Area");

	Params::MonsterBPLibrary_C_Get_Number_Of_Active_Players_In_Combat_Area Parms{};

	Parms.Enemies_In_Combat_Area = std::move(Enemies_In_Combat_Area);
	Parms.Lost_Enemies_In_Combat_Area = std::move(Lost_Enemies_In_Combat_Area);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Enemies_In_Combat_Area = std::move(Parms.Enemies_In_Combat_Area);
	Lost_Enemies_In_Combat_Area = std::move(Parms.Lost_Enemies_In_Combat_Area);

	if (Number_Of_Players != nullptr)
		*Number_Of_Players = Parms.Number_Of_Players;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Number Of Active Players In Recognition Area
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Enemies_In_Recog_Area                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class AActor*>                   Lost_Enemies_In_Recog_Area                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Number_Of_Players                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Get_Number_Of_Active_Players_In_Recognition_Area(TArray<class AActor*>& Enemies_In_Recog_Area, TArray<class AActor*>& Lost_Enemies_In_Recog_Area, class UObject* __WorldContext, int32* Number_Of_Players)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Number Of Active Players In Recognition Area");

	Params::MonsterBPLibrary_C_Get_Number_Of_Active_Players_In_Recognition_Area Parms{};

	Parms.Enemies_In_Recog_Area = std::move(Enemies_In_Recog_Area);
	Parms.Lost_Enemies_In_Recog_Area = std::move(Lost_Enemies_In_Recog_Area);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Enemies_In_Recog_Area = std::move(Parms.Enemies_In_Recog_Area);
	Lost_Enemies_In_Recog_Area = std::move(Parms.Lost_Enemies_In_Recog_Area);

	if (Number_Of_Players != nullptr)
		*Number_Of_Players = Parms.Number_Of_Players;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Projectile Relative Spawn Transform
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADCCharacterBase*                 Start_Actor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Start_Location                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EHitBoxType                             Hit_Box_Type                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Spawn_Location                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FRotator>                 Shooting_Direction                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Spawn_Transform_Location                               (Parm, OutParm)
// TArray<struct FRotator>                 Spawn_Transform_Rotation                               (Parm, OutParm)

void UMonsterBPLibrary_C::Get_Projectile_Relative_Spawn_Transform(class ADCCharacterBase* Start_Actor, const struct FVector& Start_Location, EHitBoxType Hit_Box_Type, TArray<struct FVector>& Spawn_Location, TArray<struct FRotator>& Shooting_Direction, class UObject* __WorldContext, bool* Result, TArray<struct FVector>* Spawn_Transform_Location, TArray<struct FRotator>* Spawn_Transform_Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Get Projectile Relative Spawn Transform");

	Params::MonsterBPLibrary_C_Get_Projectile_Relative_Spawn_Transform Parms{};

	Parms.Start_Actor = Start_Actor;
	Parms.Start_Location = std::move(Start_Location);
	Parms.Hit_Box_Type = Hit_Box_Type;
	Parms.Spawn_Location = std::move(Spawn_Location);
	Parms.Shooting_Direction = std::move(Shooting_Direction);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Spawn_Location = std::move(Parms.Spawn_Location);
	Shooting_Direction = std::move(Parms.Shooting_Direction);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (Spawn_Transform_Location != nullptr)
		*Spawn_Transform_Location = std::move(Parms.Spawn_Transform_Location);

	if (Spawn_Transform_Rotation != nullptr)
		*Spawn_Transform_Rotation = std::move(Parms.Spawn_Transform_Rotation);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Kill Actor
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Kill_Actor(class AActor* Actor, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Kill Actor");

	Params::MonsterBPLibrary_C_Kill_Actor Parms{};

	Parms.Actor = Actor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Launch Enemy
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayEventData               Event_Data                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Launch_Weapon_Direction                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XY_Value                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Z_Value                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Launch_Enemy(const struct FGameplayEventData& Event_Data, bool Launch_Weapon_Direction, double XY_Value, double Z_Value, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Launch Enemy");

	Params::MonsterBPLibrary_C_Launch_Enemy Parms{};

	Parms.Event_Data = std::move(Event_Data);
	Parms.Launch_Weapon_Direction = Launch_Weapon_Direction;
	Parms.XY_Value = XY_Value;
	Parms.Z_Value = Z_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Remove AI Timer
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADCMonsterBase*                   DCMonsterBase                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Timer_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Remove_AI_Timer(class ADCMonsterBase* DCMonsterBase, int32 Timer_Index, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Remove AI Timer");

	Params::MonsterBPLibrary_C_Remove_AI_Timer Parms{};

	Parms.DCMonsterBase = DCMonsterBase;
	Parms.Timer_Index = Timer_Index;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Remove Debuff Immune
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Fear                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Impact                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    KnockBack                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Trap                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UnableMove                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Unhealable                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Remove_Debuff_Immune(class AActor* Actor, bool Fear, bool Impact, bool KnockBack, bool Trap, bool UnableMove, bool Unhealable, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Remove Debuff Immune");

	Params::MonsterBPLibrary_C_Remove_Debuff_Immune Parms{};

	Parms.Actor = Actor;
	Parms.Fear = Fear;
	Parms.Impact = Impact;
	Parms.KnockBack = KnockBack;
	Parms.Trap = Trap;
	Parms.UnableMove = UnableMove;
	Parms.Unhealable = Unhealable;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Remove Immune To Comeback
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_DCMonsterBaseWithOptions_C*   DCMonsterBase                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Remove_Immune_To_Comeback(class ABP_DCMonsterBaseWithOptions_C* DCMonsterBase, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Remove Immune To Comeback");

	Params::MonsterBPLibrary_C_Remove_Immune_To_Comeback Parms{};

	Parms.DCMonsterBase = DCMonsterBase;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Remove Interrtupt Montage Immune
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Remove_Interrtupt_Montage_Immune(class AActor* Actor, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Remove Interrtupt Montage Immune");

	Params::MonsterBPLibrary_C_Remove_Interrtupt_Montage_Immune Parms{};

	Parms.Actor = Actor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Set BB HPRatio
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_DCMonsterBaseWithOptions_C*   MonsterBase                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  HPRatio                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Set_BB_HPRatio(class ABP_DCMonsterBaseWithOptions_C* MonsterBase, double HPRatio, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Set BB HPRatio");

	Params::MonsterBPLibrary_C_Set_BB_HPRatio Parms{};

	Parms.MonsterBase = MonsterBase;
	Parms.HPRatio = HPRatio;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Set BB Phase
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_DCMonsterBaseWithOptions_C*   MonsterBase                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Phase                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Set_BB_Phase(class ABP_DCMonsterBaseWithOptions_C* MonsterBase, int32 Phase, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Set BB Phase");

	Params::MonsterBPLibrary_C_Set_BB_Phase Parms{};

	Parms.MonsterBase = MonsterBase;
	Parms.Phase = Phase;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Set BB Probability
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_DCMonsterBaseWithOptions_C*   MonsterBase                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Probability                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Set_BB_Probability(class ABP_DCMonsterBaseWithOptions_C* MonsterBase, double Probability, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Set BB Probability");

	Params::MonsterBPLibrary_C_Set_BB_Probability Parms{};

	Parms.MonsterBase = MonsterBase;
	Parms.Probability = Probability;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Set BlackBoard Mode
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_DCMonsterBaseWithOptions_C*   DCMonsterBase                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_ModeType                              Mode_Type                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Set_BlackBoard_Mode(class ABP_DCMonsterBaseWithOptions_C* DCMonsterBase, E_ModeType Mode_Type, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Set BlackBoard Mode");

	Params::MonsterBPLibrary_C_Set_BlackBoard_Mode Parms{};

	Parms.DCMonsterBase = DCMonsterBase;
	Parms.Mode_Type = Mode_Type;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Set BlackBoard Mode For Linked Monsters
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_DCMonsterBaseWithOptions_C*>Linked_Monster_Array                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// E_ModeType                              Mode_Type                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Set_BlackBoard_Mode_For_Linked_Monsters(TArray<class ABP_DCMonsterBaseWithOptions_C*>& Linked_Monster_Array, E_ModeType Mode_Type, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Set BlackBoard Mode For Linked Monsters");

	Params::MonsterBPLibrary_C_Set_BlackBoard_Mode_For_Linked_Monsters Parms{};

	Parms.Linked_Monster_Array = std::move(Linked_Monster_Array);
	Parms.Mode_Type = Mode_Type;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Linked_Monster_Array = std::move(Parms.Linked_Monster_Array);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Set BlackBoard TargetActor To MonsterBase
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_DCMonsterBaseWithOptions_C*   MonsterBaseWithOptions                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Set_BlackBoard_TargetActor_To_MonsterBase(class ABP_DCMonsterBaseWithOptions_C* MonsterBaseWithOptions, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Set BlackBoard TargetActor To MonsterBase");

	Params::MonsterBPLibrary_C_Set_BlackBoard_TargetActor_To_MonsterBase Parms{};

	Parms.MonsterBaseWithOptions = MonsterBaseWithOptions;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Set Combo Attack
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDCGameplayAbilityBase*           Gameplay_Ability                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Caster                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Sphere_Overlap_Forward_Pos                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Sphere_Overlap_Radius                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     Event_Tag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// double                                  Trigger_Ratio                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ADCCharacterBase*                 Target_Enemy                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class ADCCharacterBase*>         TargetArray                                            (Parm, OutParm)
// bool                                    Combo_Triggered                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Set_Combo_Attack(class UDCGameplayAbilityBase* Gameplay_Ability, class UObject* Caster, double Sphere_Overlap_Forward_Pos, double Sphere_Overlap_Radius, const struct FGameplayTag& Event_Tag, double Trigger_Ratio, class UObject* __WorldContext, class ADCCharacterBase** Target_Enemy, TArray<class ADCCharacterBase*>* TargetArray, bool* Combo_Triggered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Set Combo Attack");

	Params::MonsterBPLibrary_C_Set_Combo_Attack Parms{};

	Parms.Gameplay_Ability = Gameplay_Ability;
	Parms.Caster = Caster;
	Parms.Sphere_Overlap_Forward_Pos = Sphere_Overlap_Forward_Pos;
	Parms.Sphere_Overlap_Radius = Sphere_Overlap_Radius;
	Parms.Event_Tag = std::move(Event_Tag);
	Parms.Trigger_Ratio = Trigger_Ratio;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Target_Enemy != nullptr)
		*Target_Enemy = Parms.Target_Enemy;

	if (TargetArray != nullptr)
		*TargetArray = std::move(Parms.TargetArray);

	if (Combo_Triggered != nullptr)
		*Combo_Triggered = Parms.Combo_Triggered;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Set Debuff Immune
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Fear                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Impact                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    KnockBack                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Trap                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UnableMove                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Unhealable                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Set_Debuff_Immune(class AActor* Actor, bool Fear, bool Impact, bool KnockBack, bool Trap, bool UnableMove, bool Unhealable, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Set Debuff Immune");

	Params::MonsterBPLibrary_C_Set_Debuff_Immune Parms{};

	Parms.Actor = Actor;
	Parms.Fear = Fear;
	Parms.Impact = Impact;
	Parms.KnockBack = KnockBack;
	Parms.Trap = Trap;
	Parms.UnableMove = UnableMove;
	Parms.Unhealable = Unhealable;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Set Immune To Comeback
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_DCMonsterBaseWithOptions_C*   DCMonsterBase                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Set_Immune_To_Comeback(class ABP_DCMonsterBaseWithOptions_C* DCMonsterBase, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Set Immune To Comeback");

	Params::MonsterBPLibrary_C_Set_Immune_To_Comeback Parms{};

	Parms.DCMonsterBase = DCMonsterBase;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Set Immune To Comeback For Linked Monsters
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_DCMonsterBaseWithOptions_C*>Linked_Monster_Array                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Set_Immune_To_Comeback_For_Linked_Monsters(TArray<class ABP_DCMonsterBaseWithOptions_C*>& Linked_Monster_Array, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Set Immune To Comeback For Linked Monsters");

	Params::MonsterBPLibrary_C_Set_Immune_To_Comeback_For_Linked_Monsters Parms{};

	Parms.Linked_Monster_Array = std::move(Linked_Monster_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Linked_Monster_Array = std::move(Parms.Linked_Monster_Array);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Set Interrupt Montage Immune
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Set_Interrupt_Montage_Immune(class AActor* Actor, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Set Interrupt Montage Immune");

	Params::MonsterBPLibrary_C_Set_Interrupt_Montage_Immune Parms{};

	Parms.Actor = Actor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Set Projectile Spec and Options
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDCGameplayAbilityBase*           DCGameplay_Ability_Base                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Spawned_Projectile                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     Gameplay_Tag_For_Spec                                  (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// double                                  Pierce_Count                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Pierce_Obstacle                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Decrease_Pierce_Obstacle_Count                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Homing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ADCCharacterBase*                 Homing_Target                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EHitBoxType                             Homing_Hit_Box_Type                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Homing_Magnitude                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AProjectileActor*                 Projectile_Actor                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Set_Projectile_Spec_and_Options(class UDCGameplayAbilityBase* DCGameplay_Ability_Base, class AActor* Spawned_Projectile, const struct FGameplayTag& Gameplay_Tag_For_Spec, double Pierce_Count, bool Pierce_Obstacle, double Decrease_Pierce_Obstacle_Count, bool Homing, class ADCCharacterBase* Homing_Target, EHitBoxType Homing_Hit_Box_Type, double Homing_Magnitude, class UObject* __WorldContext, bool* Result, class AProjectileActor** Projectile_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Set Projectile Spec and Options");

	Params::MonsterBPLibrary_C_Set_Projectile_Spec_and_Options Parms{};

	Parms.DCGameplay_Ability_Base = DCGameplay_Ability_Base;
	Parms.Spawned_Projectile = Spawned_Projectile;
	Parms.Gameplay_Tag_For_Spec = std::move(Gameplay_Tag_For_Spec);
	Parms.Pierce_Count = Pierce_Count;
	Parms.Pierce_Obstacle = Pierce_Obstacle;
	Parms.Decrease_Pierce_Obstacle_Count = Decrease_Pierce_Obstacle_Count;
	Parms.Homing = Homing;
	Parms.Homing_Target = Homing_Target;
	Parms.Homing_Hit_Box_Type = Homing_Hit_Box_Type;
	Parms.Homing_Magnitude = Homing_Magnitude;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (Projectile_Actor != nullptr)
		*Projectile_Actor = Parms.Projectile_Actor;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Set Stance
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Stance_Number                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UMonsterBPLibrary_C::Set_Stance(class AActor* Actor, int32 Stance_Number, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Set Stance");

	Params::MonsterBPLibrary_C_Set_Stance Parms{};

	Parms.Actor = Actor;
	Parms.Stance_Number = Stance_Number;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Set Target Provider
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_DCMonsterBaseWithOptions_C*   Source_Target                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UDCGameObjectLinkComponent*       DCGame_Object_Link                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagQuery                Provider_Object_Tag                                    (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterBPLibrary_C::Set_Target_Provider(class ABP_DCMonsterBaseWithOptions_C* Source_Target, class UDCGameObjectLinkComponent* DCGame_Object_Link, const struct FGameplayTagQuery& Provider_Object_Tag, class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonsterBPLibrary_C", "Set Target Provider");

	Params::MonsterBPLibrary_C_Set_Target_Provider Parms{};

	Parms.Source_Target = Source_Target;
	Parms.DCGame_Object_Link = DCGame_Object_Link;
	Parms.Provider_Object_Tag = std::move(Provider_Object_Tag);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function MonsterBPLibrary.MonsterBPLibrary_C.Get Target Array
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADCMonsterBase*                   DCMonsterBase                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_SensorType                            Get_List_From                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Get_From_CombatArea                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Get_Target_Has_Aggro_Only                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ADCCharacterBase*>         TargetArray                                            (Parm, OutParm)

void UMonsterBPLibrary_C::Get_Target_Array(class ADCMonsterBase* DCMonsterBase, E_SensorType Get_List_From, bool Get_From_CombatArea, bool Get_Target_Has_Aggro_Only, class UObject* __WorldContext, bool* Return_Value, TArray<class ADCCharacterBase*>* TargetArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MonsterBPLibrary_C", "Get Target Array");

	Params::MonsterBPLibrary_C_Get_Target_Array Parms{};

	Parms.DCMonsterBase = DCMonsterBase;
	Parms.Get_List_From = Get_List_From;
	Parms.Get_From_CombatArea = Get_From_CombatArea;
	Parms.Get_Target_Has_Aggro_Only = Get_Target_Has_Aggro_Only;
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;

	if (TargetArray != nullptr)
		*TargetArray = std::move(Parms.TargetArray);
}

}

