#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpectralKnight_Common

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "E_SpectralKnight_AbilityToUseCombo_structs.hpp"
#include "AkAudio_structs.hpp"
#include "E_SpectralKnight_Ability_structs.hpp"
#include "BP_DCMonsterBaseWithOptions_Boss_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SpectralKnight_Common.BP_SpectralKnight_Common_C
// 0x0510 (0x1910 - 0x1400)
class ABP_SpectralKnight_Common_C : public ABP_DCMonsterBaseWithOptions_Boss_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_SpectralKnight_Common_C;         // 0x13F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFieldSystemComponent*                  FieldSystem;                                       // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          AttackBox_ChargeAttack;                            // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FXS_SpectralKnight_SwordAura_001A;                 // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FXS_SpectralKnight_Head_Light_001A;                // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FXS_SpectralKnight_Head_001A;                      // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FXS_SpectralKnight_Body_Light_001A;                // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FXS_SpectralKnight_Body_001A;                      // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Pelvis;                                // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Hand_L;                                // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Hand_R;                                // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Arm_L;                                 // 0x1450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_UpperArm_L;                            // 0x1458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Arm_R;                                 // 0x1460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_UpperArm_R;                            // 0x1468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Shoulder_L;                            // 0x1470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Shoulder_R;                            // 0x1478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Body;                                  // 0x1480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Head;                                  // 0x1488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Activate_Material______0_545DE8A04E88370A1B3B4E94083E7B17; // 0x1490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Activate_Material__Direction_545DE8A04E88370A1B3B4E94083E7B17; // 0x1494(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5435[0x3];                                     // 0x1495(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Activate_Material;                                 // 0x1498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UBoxComponent*>                  SoulSlash_Attack_Box;                              // 0x14A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UBoxComponent*>                  Charge_Attack_Box;                                 // 0x14B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	E_SpectralKnight_AbilityToUseCombo            Playing_Skill;                                     // 0x14C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SpectralKnight_AbilityToUseCombo            Ability_Skill;                                     // 0x14C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SpectralKnight_Ability                      Current_Combo;                                     // 0x14C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5436[0x1];                                     // 0x14C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Next_Combo_Trigger_Tag;                            // 0x14C4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5437[0x4];                                     // 0x14CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADCCharacterBase*>               Target_Enemies;                                    // 0x14D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<E_SpectralKnight_AbilityToUseCombo, bool> Possible_Next_Combo;                               // 0x14E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_Slash1_1;                            // 0x1530(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_Slash1_2;                            // 0x1550(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_ShoulderCharge;                      // 0x1570(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_FrontSlash;                          // 0x1590(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_FrontThrust;                         // 0x15B0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_TurnSlash_Up;                        // 0x15D0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_TurnSlash_Down;                      // 0x15F0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_LeapAttack;                          // 0x1610(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_RushThrust;                          // 0x1630(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_LongRange_Transverse;                // 0x1650(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_LongRange_Verticallay;               // 0x1670(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_SoulShockWave;                       // 0x1690(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_SoulSlash;                           // 0x16B0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_BackSteb;                            // 0x16D0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_FastMove;                            // 0x16F0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ADCCharacterBase*>               Temp_Target_Enemies_0;                             // 0x1710(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ADCCharacterBase*>               Temp_Target_Enemies_1;                             // 0x1720(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ADCCharacterBase*>               Temp_Target_Enemies_2;                             // 0x1730(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ADCCharacterBase*>               Temp_Target_Enemies_3;                             // 0x1740(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Used_Slash1_1;                                     // 0x1750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Used_Slash1_2;                                     // 0x1751(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Used_ShoulderCharge;                               // 0x1752(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Used_FrontSlash;                                   // 0x1753(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Used_LongRange_Transverse;                         // 0x1754(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Used_LongRange_Vertically;                         // 0x1755(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Used_FrontThrust;                                  // 0x1756(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5438[0x1];                                     // 0x1757(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_SpectralKnight_AbilityToUseCombo, struct FGameplayTag> SpectralKnight_Abilities;                          // 0x1758(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        SoulShockwave_Radius;                              // 0x17A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SoulShockwave_Radius_GC;                           // 0x17B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LeapAttackShockwave_Radius;                        // 0x17B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rush_Distance_Value;                               // 0x17C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SoulShockwave_Location;                            // 0x17C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Slash_Min;                                         // 0x17E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Slash_Max;                                         // 0x17E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShoulderCharge_Min;                                // 0x17E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShoulderCharge_Max;                                // 0x17EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FrontAttack_Min;                                   // 0x17F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FrontAttack_Max;                                   // 0x17F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TurnSlash_Min;                                     // 0x17F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TurnSlash_Max;                                     // 0x17FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LongRangeAttack_Min;                               // 0x1800(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LongRangeAttack_Max;                               // 0x1804(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LeapAttack_Min;                                    // 0x1808(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LeapAttack_Max;                                    // 0x180C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RushThrust_Min;                                    // 0x1810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RushThrust_Max;                                    // 0x1814(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShockWave_Omen_Time;                               // 0x1818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FastMove_Distance_Value;                           // 0x1820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WakeUp_Shock_Wave;                                 // 0x1828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Upper_Arm_Out_Socket_Location;                     // 0x1830(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HP_Phase_Ratio;                                    // 0x1848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blackboard_HPRatio_Initial_Value;                  // 0x1850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blackboard_HPRatio_Subtract_Value;                 // 0x1858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityAsync_WaitGameplayEvent*        SoulSlash_Async_Action;                            // 0x1860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Combo_Count;                                       // 0x1868(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TestChaosForceMagnitude;                           // 0x186C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TestChaosOffsetInBoneSpace;                        // 0x1870(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DrawDebugChaosCloth;                               // 0x1888(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5439[0x7];                                     // 0x1889(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               FXMaterial;                                        // 0x1890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        FXMaterialStr;                                     // 0x1898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RushThrust_for_SoulSlash;                          // 0x18A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_543A[0x7];                                     // 0x18A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADCCharacterBase*>               Players_On_Center;                                 // 0x18A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ADCCharacterBase*>               Players_On_Edge;                                   // 0x18B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ADCCharacterBase*>               Players_On_Combat_Area;                            // 0x18C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<double>                                Distance_To_Determine_Center;                      // 0x18D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                Spawn_Location;                                    // 0x18E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SpectralKnight_Common_C*            As_BP_SpectralKnight;                              // 0x1900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Activate_Material__FinishedFunc();
	void Activate_Material__UpdateFunc();
	void Activate_Mode();
	void Add_Phase(int32 Min, int32 Max);
	void Buff_Movespeed_Off_FastMove();
	void Buff_Movespeed_On_FastMove();
	void Buff_Movespeed_Special_On_FastMove();
	void Combat_Activated();
	void Comeback_Activated();
	void Deactivate_Mode(bool IsStanceOne);
	void Death_Deactivate_Mode();
	void DeBuff_Movespeed_Off();
	void DeBuff_Movespeed_On();
	void EventReceived_B758205543C6D19694C2D7B254391CB6(const struct FGameplayEventData& Payload);
	void EventReceived_CB8D307649B85F0BEA1A97886359A65F(const struct FGameplayEventData& Payload);
	void EventReceived_FCB2D1EC4EC93BA51FA0559CB81ACC48(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_BP_SpectralKnight_Common(int32 EntryPoint);
	void FastMove_OFF();
	void FastMove_ON();
	void Filter_Enemies_On_Center_Of_Combat_Area(TArray<class ADCCharacterBase*>& DCCharacterBase);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void Get_Melee_Attack_Overlapped_Targets(TArray<class ADCCharacterBase*>* Overlapped_Targets);
	double Get_Overlap_Weight_From_Target(class AActor* OtherActor, double* ReturnValue2);
	bool Get_Possible_to_Use_Next_Combo(struct FGameplayTag* Param_Next_Combo_Trigger_Tag, TArray<class ADCCharacterBase*>* DCCharacter_Base);
	void OnFMsgGASAttributeNotifyBlueprint(const struct FMsgGASAttributeNotify& InMsg);
	void OnSetAI();
	void ReceiveBeginPlay();
	void Remove_Phase_Count();
	void RushThrust_Power_Distance_Value(double A, double* Return_Value);
	void TriggerChaos(class FName Socket, double Radius, double Magnitude, const struct FVector& OffsetInBoneSpace);
	void TriggerChaosTest();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SpectralKnight_Common_C">();
	}
	static class ABP_SpectralKnight_Common_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SpectralKnight_Common_C>();
	}
};
static_assert(alignof(ABP_SpectralKnight_Common_C) == 0x000010, "Wrong alignment on ABP_SpectralKnight_Common_C");
static_assert(sizeof(ABP_SpectralKnight_Common_C) == 0x001910, "Wrong size on ABP_SpectralKnight_Common_C");
static_assert(offsetof(ABP_SpectralKnight_Common_C, UberGraphFrame_BP_SpectralKnight_Common_C) == 0x0013F8, "Member 'ABP_SpectralKnight_Common_C::UberGraphFrame_BP_SpectralKnight_Common_C' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, FieldSystem) == 0x001400, "Member 'ABP_SpectralKnight_Common_C::FieldSystem' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, AttackBox_ChargeAttack) == 0x001408, "Member 'ABP_SpectralKnight_Common_C::AttackBox_ChargeAttack' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, FXS_SpectralKnight_SwordAura_001A) == 0x001410, "Member 'ABP_SpectralKnight_Common_C::FXS_SpectralKnight_SwordAura_001A' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, FXS_SpectralKnight_Head_Light_001A) == 0x001418, "Member 'ABP_SpectralKnight_Common_C::FXS_SpectralKnight_Head_Light_001A' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, FXS_SpectralKnight_Head_001A) == 0x001420, "Member 'ABP_SpectralKnight_Common_C::FXS_SpectralKnight_Head_001A' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, FXS_SpectralKnight_Body_Light_001A) == 0x001428, "Member 'ABP_SpectralKnight_Common_C::FXS_SpectralKnight_Body_Light_001A' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, FXS_SpectralKnight_Body_001A) == 0x001430, "Member 'ABP_SpectralKnight_Common_C::FXS_SpectralKnight_Body_001A' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, BP_DCHitBox_Pelvis) == 0x001438, "Member 'ABP_SpectralKnight_Common_C::BP_DCHitBox_Pelvis' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, BP_DCHitBox_Hand_L) == 0x001440, "Member 'ABP_SpectralKnight_Common_C::BP_DCHitBox_Hand_L' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, BP_DCHitBox_Hand_R) == 0x001448, "Member 'ABP_SpectralKnight_Common_C::BP_DCHitBox_Hand_R' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, BP_DCHitBox_Arm_L) == 0x001450, "Member 'ABP_SpectralKnight_Common_C::BP_DCHitBox_Arm_L' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, BP_DCHitBox_UpperArm_L) == 0x001458, "Member 'ABP_SpectralKnight_Common_C::BP_DCHitBox_UpperArm_L' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, BP_DCHitBox_Arm_R) == 0x001460, "Member 'ABP_SpectralKnight_Common_C::BP_DCHitBox_Arm_R' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, BP_DCHitBox_UpperArm_R) == 0x001468, "Member 'ABP_SpectralKnight_Common_C::BP_DCHitBox_UpperArm_R' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, BP_DCHitBox_Shoulder_L) == 0x001470, "Member 'ABP_SpectralKnight_Common_C::BP_DCHitBox_Shoulder_L' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, BP_DCHitBox_Shoulder_R) == 0x001478, "Member 'ABP_SpectralKnight_Common_C::BP_DCHitBox_Shoulder_R' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, BP_DCHitBox_Body) == 0x001480, "Member 'ABP_SpectralKnight_Common_C::BP_DCHitBox_Body' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, BP_DCHitBox_Head) == 0x001488, "Member 'ABP_SpectralKnight_Common_C::BP_DCHitBox_Head' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Activate_Material______0_545DE8A04E88370A1B3B4E94083E7B17) == 0x001490, "Member 'ABP_SpectralKnight_Common_C::Activate_Material______0_545DE8A04E88370A1B3B4E94083E7B17' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Activate_Material__Direction_545DE8A04E88370A1B3B4E94083E7B17) == 0x001494, "Member 'ABP_SpectralKnight_Common_C::Activate_Material__Direction_545DE8A04E88370A1B3B4E94083E7B17' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Activate_Material) == 0x001498, "Member 'ABP_SpectralKnight_Common_C::Activate_Material' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, SoulSlash_Attack_Box) == 0x0014A0, "Member 'ABP_SpectralKnight_Common_C::SoulSlash_Attack_Box' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Charge_Attack_Box) == 0x0014B0, "Member 'ABP_SpectralKnight_Common_C::Charge_Attack_Box' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Playing_Skill) == 0x0014C0, "Member 'ABP_SpectralKnight_Common_C::Playing_Skill' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Ability_Skill) == 0x0014C1, "Member 'ABP_SpectralKnight_Common_C::Ability_Skill' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Current_Combo) == 0x0014C2, "Member 'ABP_SpectralKnight_Common_C::Current_Combo' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Next_Combo_Trigger_Tag) == 0x0014C4, "Member 'ABP_SpectralKnight_Common_C::Next_Combo_Trigger_Tag' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Target_Enemies) == 0x0014D0, "Member 'ABP_SpectralKnight_Common_C::Target_Enemies' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Possible_Next_Combo) == 0x0014E0, "Member 'ABP_SpectralKnight_Common_C::Possible_Next_Combo' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Tag_Container_Slash1_1) == 0x001530, "Member 'ABP_SpectralKnight_Common_C::Tag_Container_Slash1_1' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Tag_Container_Slash1_2) == 0x001550, "Member 'ABP_SpectralKnight_Common_C::Tag_Container_Slash1_2' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Tag_Container_ShoulderCharge) == 0x001570, "Member 'ABP_SpectralKnight_Common_C::Tag_Container_ShoulderCharge' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Tag_Container_FrontSlash) == 0x001590, "Member 'ABP_SpectralKnight_Common_C::Tag_Container_FrontSlash' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Tag_Container_FrontThrust) == 0x0015B0, "Member 'ABP_SpectralKnight_Common_C::Tag_Container_FrontThrust' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Tag_Container_TurnSlash_Up) == 0x0015D0, "Member 'ABP_SpectralKnight_Common_C::Tag_Container_TurnSlash_Up' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Tag_Container_TurnSlash_Down) == 0x0015F0, "Member 'ABP_SpectralKnight_Common_C::Tag_Container_TurnSlash_Down' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Tag_Container_LeapAttack) == 0x001610, "Member 'ABP_SpectralKnight_Common_C::Tag_Container_LeapAttack' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Tag_Container_RushThrust) == 0x001630, "Member 'ABP_SpectralKnight_Common_C::Tag_Container_RushThrust' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Tag_Container_LongRange_Transverse) == 0x001650, "Member 'ABP_SpectralKnight_Common_C::Tag_Container_LongRange_Transverse' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Tag_Container_LongRange_Verticallay) == 0x001670, "Member 'ABP_SpectralKnight_Common_C::Tag_Container_LongRange_Verticallay' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Tag_Container_SoulShockWave) == 0x001690, "Member 'ABP_SpectralKnight_Common_C::Tag_Container_SoulShockWave' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Tag_Container_SoulSlash) == 0x0016B0, "Member 'ABP_SpectralKnight_Common_C::Tag_Container_SoulSlash' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Tag_Container_BackSteb) == 0x0016D0, "Member 'ABP_SpectralKnight_Common_C::Tag_Container_BackSteb' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Tag_Container_FastMove) == 0x0016F0, "Member 'ABP_SpectralKnight_Common_C::Tag_Container_FastMove' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Temp_Target_Enemies_0) == 0x001710, "Member 'ABP_SpectralKnight_Common_C::Temp_Target_Enemies_0' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Temp_Target_Enemies_1) == 0x001720, "Member 'ABP_SpectralKnight_Common_C::Temp_Target_Enemies_1' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Temp_Target_Enemies_2) == 0x001730, "Member 'ABP_SpectralKnight_Common_C::Temp_Target_Enemies_2' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Temp_Target_Enemies_3) == 0x001740, "Member 'ABP_SpectralKnight_Common_C::Temp_Target_Enemies_3' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Used_Slash1_1) == 0x001750, "Member 'ABP_SpectralKnight_Common_C::Used_Slash1_1' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Used_Slash1_2) == 0x001751, "Member 'ABP_SpectralKnight_Common_C::Used_Slash1_2' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Used_ShoulderCharge) == 0x001752, "Member 'ABP_SpectralKnight_Common_C::Used_ShoulderCharge' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Used_FrontSlash) == 0x001753, "Member 'ABP_SpectralKnight_Common_C::Used_FrontSlash' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Used_LongRange_Transverse) == 0x001754, "Member 'ABP_SpectralKnight_Common_C::Used_LongRange_Transverse' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Used_LongRange_Vertically) == 0x001755, "Member 'ABP_SpectralKnight_Common_C::Used_LongRange_Vertically' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Used_FrontThrust) == 0x001756, "Member 'ABP_SpectralKnight_Common_C::Used_FrontThrust' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, SpectralKnight_Abilities) == 0x001758, "Member 'ABP_SpectralKnight_Common_C::SpectralKnight_Abilities' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, SoulShockwave_Radius) == 0x0017A8, "Member 'ABP_SpectralKnight_Common_C::SoulShockwave_Radius' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, SoulShockwave_Radius_GC) == 0x0017B0, "Member 'ABP_SpectralKnight_Common_C::SoulShockwave_Radius_GC' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, LeapAttackShockwave_Radius) == 0x0017B8, "Member 'ABP_SpectralKnight_Common_C::LeapAttackShockwave_Radius' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Rush_Distance_Value) == 0x0017C0, "Member 'ABP_SpectralKnight_Common_C::Rush_Distance_Value' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, SoulShockwave_Location) == 0x0017C8, "Member 'ABP_SpectralKnight_Common_C::SoulShockwave_Location' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Slash_Min) == 0x0017E0, "Member 'ABP_SpectralKnight_Common_C::Slash_Min' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Slash_Max) == 0x0017E4, "Member 'ABP_SpectralKnight_Common_C::Slash_Max' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, ShoulderCharge_Min) == 0x0017E8, "Member 'ABP_SpectralKnight_Common_C::ShoulderCharge_Min' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, ShoulderCharge_Max) == 0x0017EC, "Member 'ABP_SpectralKnight_Common_C::ShoulderCharge_Max' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, FrontAttack_Min) == 0x0017F0, "Member 'ABP_SpectralKnight_Common_C::FrontAttack_Min' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, FrontAttack_Max) == 0x0017F4, "Member 'ABP_SpectralKnight_Common_C::FrontAttack_Max' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, TurnSlash_Min) == 0x0017F8, "Member 'ABP_SpectralKnight_Common_C::TurnSlash_Min' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, TurnSlash_Max) == 0x0017FC, "Member 'ABP_SpectralKnight_Common_C::TurnSlash_Max' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, LongRangeAttack_Min) == 0x001800, "Member 'ABP_SpectralKnight_Common_C::LongRangeAttack_Min' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, LongRangeAttack_Max) == 0x001804, "Member 'ABP_SpectralKnight_Common_C::LongRangeAttack_Max' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, LeapAttack_Min) == 0x001808, "Member 'ABP_SpectralKnight_Common_C::LeapAttack_Min' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, LeapAttack_Max) == 0x00180C, "Member 'ABP_SpectralKnight_Common_C::LeapAttack_Max' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, RushThrust_Min) == 0x001810, "Member 'ABP_SpectralKnight_Common_C::RushThrust_Min' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, RushThrust_Max) == 0x001814, "Member 'ABP_SpectralKnight_Common_C::RushThrust_Max' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, ShockWave_Omen_Time) == 0x001818, "Member 'ABP_SpectralKnight_Common_C::ShockWave_Omen_Time' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, FastMove_Distance_Value) == 0x001820, "Member 'ABP_SpectralKnight_Common_C::FastMove_Distance_Value' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, WakeUp_Shock_Wave) == 0x001828, "Member 'ABP_SpectralKnight_Common_C::WakeUp_Shock_Wave' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Upper_Arm_Out_Socket_Location) == 0x001830, "Member 'ABP_SpectralKnight_Common_C::Upper_Arm_Out_Socket_Location' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, HP_Phase_Ratio) == 0x001848, "Member 'ABP_SpectralKnight_Common_C::HP_Phase_Ratio' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Blackboard_HPRatio_Initial_Value) == 0x001850, "Member 'ABP_SpectralKnight_Common_C::Blackboard_HPRatio_Initial_Value' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Blackboard_HPRatio_Subtract_Value) == 0x001858, "Member 'ABP_SpectralKnight_Common_C::Blackboard_HPRatio_Subtract_Value' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, SoulSlash_Async_Action) == 0x001860, "Member 'ABP_SpectralKnight_Common_C::SoulSlash_Async_Action' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Combo_Count) == 0x001868, "Member 'ABP_SpectralKnight_Common_C::Combo_Count' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, TestChaosForceMagnitude) == 0x00186C, "Member 'ABP_SpectralKnight_Common_C::TestChaosForceMagnitude' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, TestChaosOffsetInBoneSpace) == 0x001870, "Member 'ABP_SpectralKnight_Common_C::TestChaosOffsetInBoneSpace' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, DrawDebugChaosCloth) == 0x001888, "Member 'ABP_SpectralKnight_Common_C::DrawDebugChaosCloth' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, FXMaterial) == 0x001890, "Member 'ABP_SpectralKnight_Common_C::FXMaterial' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, FXMaterialStr) == 0x001898, "Member 'ABP_SpectralKnight_Common_C::FXMaterialStr' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, RushThrust_for_SoulSlash) == 0x0018A0, "Member 'ABP_SpectralKnight_Common_C::RushThrust_for_SoulSlash' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Players_On_Center) == 0x0018A8, "Member 'ABP_SpectralKnight_Common_C::Players_On_Center' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Players_On_Edge) == 0x0018B8, "Member 'ABP_SpectralKnight_Common_C::Players_On_Edge' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Players_On_Combat_Area) == 0x0018C8, "Member 'ABP_SpectralKnight_Common_C::Players_On_Combat_Area' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Distance_To_Determine_Center) == 0x0018D8, "Member 'ABP_SpectralKnight_Common_C::Distance_To_Determine_Center' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, Spawn_Location) == 0x0018E8, "Member 'ABP_SpectralKnight_Common_C::Spawn_Location' has a wrong offset!");
static_assert(offsetof(ABP_SpectralKnight_Common_C, As_BP_SpectralKnight) == 0x001900, "Member 'ABP_SpectralKnight_Common_C::As_BP_SpectralKnight' has a wrong offset!");

}

