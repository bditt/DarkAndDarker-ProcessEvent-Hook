#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpiderWeb

#include "Basic.hpp"

#include "BP_SpiderWeb_classes.hpp"
#include "BP_SpiderWeb_parameters.hpp"


namespace SDK
{

// Function BP_SpiderWeb.BP_SpiderWeb_C.ExchangeYZ
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SpiderWeb_C::ExchangeYZ(const struct FVector& In, struct FVector* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiderWeb_C", "ExchangeYZ");

	Params::BP_SpiderWeb_C_ExchangeYZ Parms{};

	Parms.In = std::move(In);

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function BP_SpiderWeb.BP_SpiderWeb_C.ExecuteUbergraph_BP_SpiderWeb
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SpiderWeb_C::ExecuteUbergraph_BP_SpiderWeb(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiderWeb_C", "ExecuteUbergraph_BP_SpiderWeb");

	Params::BP_SpiderWeb_C_ExecuteUbergraph_BP_SpiderWeb Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SpiderWeb.BP_SpiderWeb_C.GameplayTagUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     InGameplayTag                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   InCount                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SpiderWeb_C::GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiderWeb_C", "GameplayTagUpdated");

	Params::BP_SpiderWeb_C_GameplayTagUpdated Parms{};

	Parms.InGameplayTag = std::move(InGameplayTag);
	Parms.InCount = InCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SpiderWeb.BP_SpiderWeb_C.GetDestroyCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SpiderWeb_C::GetDestroyCount(int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiderWeb_C", "GetDestroyCount");

	Params::BP_SpiderWeb_C_GetDestroyCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_SpiderWeb.BP_SpiderWeb_C.GetRecoveryTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SpiderWeb_C::GetRecoveryTime(double* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiderWeb_C", "GetRecoveryTime");

	Params::BP_SpiderWeb_C_GetRecoveryTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_SpiderWeb.BP_SpiderWeb_C.IsContactCountDestroy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SpiderWeb_C::IsContactCountDestroy(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiderWeb_C", "IsContactCountDestroy");

	Params::BP_SpiderWeb_C_IsContactCountDestroy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_SpiderWeb.BP_SpiderWeb_C.IsDisableDestroyContact
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SpiderWeb_C::IsDisableDestroyContact(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiderWeb_C", "IsDisableDestroyContact");

	Params::BP_SpiderWeb_C_IsDisableDestroyContact Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_SpiderWeb.BP_SpiderWeb_C.IsRecovery
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SpiderWeb_C::IsRecovery(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiderWeb_C", "IsRecovery");

	Params::BP_SpiderWeb_C_IsRecovery Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_SpiderWeb.BP_SpiderWeb_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SpiderWeb_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiderWeb_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SpiderWeb.BP_SpiderWeb_C.SetPointPosition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         Material_Instance                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Param_TopLeft                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Param_TopRight                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Param_BotLeft                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Param_BotRight                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Influence                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SpiderWeb_C::SetPointPosition(class UMaterialInstanceDynamic*& Material_Instance, const struct FVector& Param_TopLeft, const struct FVector& Param_TopRight, const struct FVector& Param_BotLeft, const struct FVector& Param_BotRight, double Influence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiderWeb_C", "SetPointPosition");

	Params::BP_SpiderWeb_C_SetPointPosition Parms{};

	Parms.Material_Instance = Material_Instance;
	Parms.Param_TopLeft = std::move(Param_TopLeft);
	Parms.Param_TopRight = std::move(Param_TopRight);
	Parms.Param_BotLeft = std::move(Param_BotLeft);
	Parms.Param_BotRight = std::move(Param_BotRight);
	Parms.Influence = Influence;

	UObject::ProcessEvent(Func, &Parms);

	Material_Instance = Parms.Material_Instance;
}


// Function BP_SpiderWeb.BP_SpiderWeb_C.UpdateSpiderWebMaterial
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         InDynamicMaterialInstance                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SpiderWeb_C::UpdateSpiderWebMaterial(class UMaterialInstanceDynamic* InDynamicMaterialInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiderWeb_C", "UpdateSpiderWebMaterial");

	Params::BP_SpiderWeb_C_UpdateSpiderWebMaterial Parms{};

	Parms.InDynamicMaterialInstance = InDynamicMaterialInstance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SpiderWeb.BP_SpiderWeb_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_SpiderWeb_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiderWeb_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

