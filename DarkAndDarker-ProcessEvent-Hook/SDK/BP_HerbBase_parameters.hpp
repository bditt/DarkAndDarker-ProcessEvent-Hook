#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HerbBase

#include "Basic.hpp"

#include "DungeonCrawler_structs.hpp"


namespace SDK::Params
{

// Function BP_HerbBase.BP_HerbBase_C.BndEvt__BP_HuntingTrapProp_DCTagCollisionDetector_K2Node_ComponentBoundEvent_3_GameplayTagCollisionDetectedSignature__DelegateSignature
// 0x0098 (0x0098 - 0x0000)
struct BP_HerbBase_C_BndEvt__BP_HuntingTrapProp_DCTagCollisionDetector_K2Node_ComponentBoundEvent_3_GameplayTagCollisionDetectedSignature__DelegateSignature final
{
public:
	bool                                          bDetected;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E11[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccountDataReplication                AccountDataReplication;                            // 0x0008(0x0090)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_HerbBase_C_BndEvt__BP_HuntingTrapProp_DCTagCollisionDetector_K2Node_ComponentBoundEvent_3_GameplayTagCollisionDetectedSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_HerbBase_C_BndEvt__BP_HuntingTrapProp_DCTagCollisionDetector_K2Node_ComponentBoundEvent_3_GameplayTagCollisionDetectedSignature__DelegateSignature");
static_assert(sizeof(BP_HerbBase_C_BndEvt__BP_HuntingTrapProp_DCTagCollisionDetector_K2Node_ComponentBoundEvent_3_GameplayTagCollisionDetectedSignature__DelegateSignature) == 0x000098, "Wrong size on BP_HerbBase_C_BndEvt__BP_HuntingTrapProp_DCTagCollisionDetector_K2Node_ComponentBoundEvent_3_GameplayTagCollisionDetectedSignature__DelegateSignature");
static_assert(offsetof(BP_HerbBase_C_BndEvt__BP_HuntingTrapProp_DCTagCollisionDetector_K2Node_ComponentBoundEvent_3_GameplayTagCollisionDetectedSignature__DelegateSignature, bDetected) == 0x000000, "Member 'BP_HerbBase_C_BndEvt__BP_HuntingTrapProp_DCTagCollisionDetector_K2Node_ComponentBoundEvent_3_GameplayTagCollisionDetectedSignature__DelegateSignature::bDetected' has a wrong offset!");
static_assert(offsetof(BP_HerbBase_C_BndEvt__BP_HuntingTrapProp_DCTagCollisionDetector_K2Node_ComponentBoundEvent_3_GameplayTagCollisionDetectedSignature__DelegateSignature, AccountDataReplication) == 0x000008, "Member 'BP_HerbBase_C_BndEvt__BP_HuntingTrapProp_DCTagCollisionDetector_K2Node_ComponentBoundEvent_3_GameplayTagCollisionDetectedSignature__DelegateSignature::AccountDataReplication' has a wrong offset!");

// Function BP_HerbBase.BP_HerbBase_C.ExecuteUbergraph_BP_HerbBase
// 0x00A0 (0x00A0 - 0x0000)
struct BP_HerbBase_C_ExecuteUbergraph_BP_HerbBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bDetected;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E12[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccountDataReplication                K2Node_ComponentBoundEvent_AccountDataReplication; // 0x0008(0x0090)()
	int32                                         K2Node_Event_DepthValue;                           // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HerbBase_C_ExecuteUbergraph_BP_HerbBase) == 0x000008, "Wrong alignment on BP_HerbBase_C_ExecuteUbergraph_BP_HerbBase");
static_assert(sizeof(BP_HerbBase_C_ExecuteUbergraph_BP_HerbBase) == 0x0000A0, "Wrong size on BP_HerbBase_C_ExecuteUbergraph_BP_HerbBase");
static_assert(offsetof(BP_HerbBase_C_ExecuteUbergraph_BP_HerbBase, EntryPoint) == 0x000000, "Member 'BP_HerbBase_C_ExecuteUbergraph_BP_HerbBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_HerbBase_C_ExecuteUbergraph_BP_HerbBase, K2Node_ComponentBoundEvent_bDetected) == 0x000004, "Member 'BP_HerbBase_C_ExecuteUbergraph_BP_HerbBase::K2Node_ComponentBoundEvent_bDetected' has a wrong offset!");
static_assert(offsetof(BP_HerbBase_C_ExecuteUbergraph_BP_HerbBase, K2Node_ComponentBoundEvent_AccountDataReplication) == 0x000008, "Member 'BP_HerbBase_C_ExecuteUbergraph_BP_HerbBase::K2Node_ComponentBoundEvent_AccountDataReplication' has a wrong offset!");
static_assert(offsetof(BP_HerbBase_C_ExecuteUbergraph_BP_HerbBase, K2Node_Event_DepthValue) == 0x000098, "Member 'BP_HerbBase_C_ExecuteUbergraph_BP_HerbBase::K2Node_Event_DepthValue' has a wrong offset!");
static_assert(offsetof(BP_HerbBase_C_ExecuteUbergraph_BP_HerbBase, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00009C, "Member 'BP_HerbBase_C_ExecuteUbergraph_BP_HerbBase::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_HerbBase.BP_HerbBase_C.OnDetected
// 0x0098 (0x0098 - 0x0000)
struct BP_HerbBase_C_OnDetected final
{
public:
	bool                                          IsDetecting;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E13[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccountDataReplication                AccountDataReplication;                            // 0x0008(0x0090)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_HerbBase_C_OnDetected) == 0x000008, "Wrong alignment on BP_HerbBase_C_OnDetected");
static_assert(sizeof(BP_HerbBase_C_OnDetected) == 0x000098, "Wrong size on BP_HerbBase_C_OnDetected");
static_assert(offsetof(BP_HerbBase_C_OnDetected, IsDetecting) == 0x000000, "Member 'BP_HerbBase_C_OnDetected::IsDetecting' has a wrong offset!");
static_assert(offsetof(BP_HerbBase_C_OnDetected, AccountDataReplication) == 0x000008, "Member 'BP_HerbBase_C_OnDetected::AccountDataReplication' has a wrong offset!");

// Function BP_HerbBase.BP_HerbBase_C.OnDetectedByInteract
// 0x0001 (0x0001 - 0x0000)
struct BP_HerbBase_C_OnDetectedByInteract final
{
public:
	bool                                          IsDetecting;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HerbBase_C_OnDetectedByInteract) == 0x000001, "Wrong alignment on BP_HerbBase_C_OnDetectedByInteract");
static_assert(sizeof(BP_HerbBase_C_OnDetectedByInteract) == 0x000001, "Wrong size on BP_HerbBase_C_OnDetectedByInteract");
static_assert(offsetof(BP_HerbBase_C_OnDetectedByInteract, IsDetecting) == 0x000000, "Member 'BP_HerbBase_C_OnDetectedByInteract::IsDetecting' has a wrong offset!");

// Function BP_HerbBase.BP_HerbBase_C.UpdateInteractDepthValue
// 0x0004 (0x0004 - 0x0000)
struct BP_HerbBase_C_UpdateInteractDepthValue final
{
public:
	int32                                         DepthValue;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HerbBase_C_UpdateInteractDepthValue) == 0x000004, "Wrong alignment on BP_HerbBase_C_UpdateInteractDepthValue");
static_assert(sizeof(BP_HerbBase_C_UpdateInteractDepthValue) == 0x000004, "Wrong size on BP_HerbBase_C_UpdateInteractDepthValue");
static_assert(offsetof(BP_HerbBase_C_UpdateInteractDepthValue, DepthValue) == 0x000000, "Member 'BP_HerbBase_C_UpdateInteractDepthValue::DepthValue' has a wrong offset!");

}

