#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_CofferSmall

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "DungeonCrawler_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_CofferSmall.ABP_CofferSmall_C
// 0x06D0 (0x0B00 - 0x0430)
class UABP_CofferSmall_C final : public UDCAnimInstanceBase
{
public:
	uint8                                         Pad_5A73[0x8];                                     // 0x0428(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0430(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0438(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0440(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0448(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0468(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0490(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x04B8(0x0048)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_1;                       // 0x0500(0x00C8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x05C8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0610(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0630(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0678(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0698(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0760(0x0080)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x07E0(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0828(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0870(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0898(0x0028)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x08C0(0x00C8)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0988(0x0128)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0AB0(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0AD0(0x0020)()
	struct FGameplayTag                           GameplayTag_0;                                     // 0x0AF0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        LidBlockDistanceRate;                              // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void BlueprintBeginPlay();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_CofferSmall_AnimGraphNode_TransitionResult_07FCEC9F4DCC35FF060F3FB5028E163E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_CofferSmall_AnimGraphNode_TransitionResult_729DC9B74399E9F85D61D6B2E364D4D0();
	void ExecuteUbergraph_ABP_CofferSmall(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_CofferSmall_C">();
	}
	static class UABP_CofferSmall_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_CofferSmall_C>();
	}
};
static_assert(alignof(UABP_CofferSmall_C) == 0x000010, "Wrong alignment on UABP_CofferSmall_C");
static_assert(sizeof(UABP_CofferSmall_C) == 0x000B00, "Wrong size on UABP_CofferSmall_C");
static_assert(offsetof(UABP_CofferSmall_C, UberGraphFrame) == 0x000430, "Member 'UABP_CofferSmall_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimBlueprintExtension_PropertyAccess) == 0x000438, "Member 'UABP_CofferSmall_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimBlueprintExtension_Base) == 0x000440, "Member 'UABP_CofferSmall_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_Root) == 0x000448, "Member 'UABP_CofferSmall_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_TransitionResult_1) == 0x000468, "Member 'UABP_CofferSmall_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_TransitionResult) == 0x000490, "Member 'UABP_CofferSmall_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_SequencePlayer_2) == 0x0004B8, "Member 'UABP_CofferSmall_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_TwoWayBlend_1) == 0x000500, "Member 'UABP_CofferSmall_C::AnimGraphNode_TwoWayBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_SequencePlayer_1) == 0x0005C8, "Member 'UABP_CofferSmall_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_StateResult_1) == 0x000610, "Member 'UABP_CofferSmall_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_SequencePlayer) == 0x000630, "Member 'UABP_CofferSmall_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_StateResult) == 0x000678, "Member 'UABP_CofferSmall_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_StateMachine) == 0x000698, "Member 'UABP_CofferSmall_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_SaveCachedPose) == 0x000760, "Member 'UABP_CofferSmall_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_Slot_1) == 0x0007E0, "Member 'UABP_CofferSmall_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_Slot) == 0x000828, "Member 'UABP_CofferSmall_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_UseCachedPose_1) == 0x000870, "Member 'UABP_CofferSmall_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_UseCachedPose) == 0x000898, "Member 'UABP_CofferSmall_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_TwoWayBlend) == 0x0008C0, "Member 'UABP_CofferSmall_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_ModifyBone) == 0x000988, "Member 'UABP_CofferSmall_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_LocalToComponentSpace) == 0x000AB0, "Member 'UABP_CofferSmall_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, AnimGraphNode_ComponentToLocalSpace) == 0x000AD0, "Member 'UABP_CofferSmall_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, GameplayTag_0) == 0x000AF0, "Member 'UABP_CofferSmall_C::GameplayTag_0' has a wrong offset!");
static_assert(offsetof(UABP_CofferSmall_C, LidBlockDistanceRate) == 0x000AF8, "Member 'UABP_CofferSmall_C::LidBlockDistanceRate' has a wrong offset!");

}

