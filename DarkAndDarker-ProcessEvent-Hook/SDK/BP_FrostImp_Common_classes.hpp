#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FrostImp_Common

#include "Basic.hpp"

#include "BP_DCMonsterBaseWithOptions_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FrostImp_Common.BP_FrostImp_Common_C
// 0x00A0 (0x1480 - 0x13E0)
class ABP_FrostImp_Common_C : public ABP_DCMonsterBaseWithOptions_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_FrostImp_Common_C;               // 0x13D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_DCHitBox_C*                         HitBox_Foot_R;                                     // 0x13E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Foot_L;                                     // 0x13E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_R;                                      // 0x13F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_L;                                      // 0x13F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Hand_R;                                     // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Hand_L;                                     // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Thigh_L;                                    // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Thigh_R;                                    // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Low_Arm_L;                                  // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Low_Arm_R;                                  // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Upper_Arm_L;                                // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Upper_Arm_R;                                // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Head;                                       // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Body;                                       // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Max;                                               // 0x1450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Teleport_Is_Cooltime;                              // 0x1458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CB7[0x7];                                     // 0x1459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FrostWave_Radius;                                  // 0x1460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FrostWave_Time;                                    // 0x1468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FrostWave_Omen;                                    // 0x1470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FrostImp_Common(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void OnFMsgGASAttributeNotifyBlueprint(const struct FMsgGASAttributeNotify& InMsg);
	void OnSetAI();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FrostImp_Common_C">();
	}
	static class ABP_FrostImp_Common_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FrostImp_Common_C>();
	}
};
static_assert(alignof(ABP_FrostImp_Common_C) == 0x000010, "Wrong alignment on ABP_FrostImp_Common_C");
static_assert(sizeof(ABP_FrostImp_Common_C) == 0x001480, "Wrong size on ABP_FrostImp_Common_C");
static_assert(offsetof(ABP_FrostImp_Common_C, UberGraphFrame_BP_FrostImp_Common_C) == 0x0013D8, "Member 'ABP_FrostImp_Common_C::UberGraphFrame_BP_FrostImp_Common_C' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, HitBox_Foot_R) == 0x0013E0, "Member 'ABP_FrostImp_Common_C::HitBox_Foot_R' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, HitBox_Foot_L) == 0x0013E8, "Member 'ABP_FrostImp_Common_C::HitBox_Foot_L' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, HitBox_Leg_R) == 0x0013F0, "Member 'ABP_FrostImp_Common_C::HitBox_Leg_R' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, HitBox_Leg_L) == 0x0013F8, "Member 'ABP_FrostImp_Common_C::HitBox_Leg_L' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, HitBox_Hand_R) == 0x001400, "Member 'ABP_FrostImp_Common_C::HitBox_Hand_R' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, HitBox_Hand_L) == 0x001408, "Member 'ABP_FrostImp_Common_C::HitBox_Hand_L' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, HitBox_Thigh_L) == 0x001410, "Member 'ABP_FrostImp_Common_C::HitBox_Thigh_L' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, HitBox_Thigh_R) == 0x001418, "Member 'ABP_FrostImp_Common_C::HitBox_Thigh_R' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, HitBox_Low_Arm_L) == 0x001420, "Member 'ABP_FrostImp_Common_C::HitBox_Low_Arm_L' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, HitBox_Low_Arm_R) == 0x001428, "Member 'ABP_FrostImp_Common_C::HitBox_Low_Arm_R' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, HitBox_Upper_Arm_L) == 0x001430, "Member 'ABP_FrostImp_Common_C::HitBox_Upper_Arm_L' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, HitBox_Upper_Arm_R) == 0x001438, "Member 'ABP_FrostImp_Common_C::HitBox_Upper_Arm_R' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, HitBox_Head) == 0x001440, "Member 'ABP_FrostImp_Common_C::HitBox_Head' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, HitBox_Body) == 0x001448, "Member 'ABP_FrostImp_Common_C::HitBox_Body' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, Max) == 0x001450, "Member 'ABP_FrostImp_Common_C::Max' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, Teleport_Is_Cooltime) == 0x001458, "Member 'ABP_FrostImp_Common_C::Teleport_Is_Cooltime' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, FrostWave_Radius) == 0x001460, "Member 'ABP_FrostImp_Common_C::FrostWave_Radius' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, FrostWave_Time) == 0x001468, "Member 'ABP_FrostImp_Common_C::FrostWave_Time' has a wrong offset!");
static_assert(offsetof(ABP_FrostImp_Common_C, FrostWave_Omen) == 0x001470, "Member 'ABP_FrostImp_Common_C::FrostWave_Omen' has a wrong offset!");

}

