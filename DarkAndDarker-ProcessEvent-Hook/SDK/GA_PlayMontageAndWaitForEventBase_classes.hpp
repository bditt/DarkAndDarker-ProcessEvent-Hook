#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_PlayMontageAndWaitForEventBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DungeonCrawler_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_PlayMontageAndWaitForEventBase.GA_PlayMontageAndWaitForEventBase_C
// 0x00D0 (0x0678 - 0x05A8)
class UGA_PlayMontageAndWaitForEventBase_C : public UGA_PlayMontageAndWaitForEvent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         Rotation_Speed;                                    // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4978[0x4];                                     // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDCAT_RotateToActor*                    Rotation_Async_Task;                               // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Rotation_Event_Tag;                                // 0x05C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     Trigger_Event_Data_Parent;                         // 0x05C8(0x00B0)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AbilityActivated(const struct FGameplayEventData& TriggerEventData);
	void EventReceived_A16E4ED54C0EDC5B9FCAD085674C725B(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_GA_PlayMontageAndWaitForEventBase(int32 EntryPoint);
	void GetBBTargetActor(bool* Result, class UObject** Return_Value);
	void GetBBTargetActorToCharacterBase(bool* Result, class ADCCharacterBase** As_DCCharacter_Base);
	void GetBBTargetActorToMonsterBase(bool* Result, class ABP_DCMonsterBaseWithOptions_C** DCMonsterBaseWithOptions);
	void Rotate_To_Actor();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_PlayMontageAndWaitForEventBase_C">();
	}
	static class UGA_PlayMontageAndWaitForEventBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_PlayMontageAndWaitForEventBase_C>();
	}
};
static_assert(alignof(UGA_PlayMontageAndWaitForEventBase_C) == 0x000008, "Wrong alignment on UGA_PlayMontageAndWaitForEventBase_C");
static_assert(sizeof(UGA_PlayMontageAndWaitForEventBase_C) == 0x000678, "Wrong size on UGA_PlayMontageAndWaitForEventBase_C");
static_assert(offsetof(UGA_PlayMontageAndWaitForEventBase_C, UberGraphFrame) == 0x0005A8, "Member 'UGA_PlayMontageAndWaitForEventBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_PlayMontageAndWaitForEventBase_C, Rotation_Speed) == 0x0005B0, "Member 'UGA_PlayMontageAndWaitForEventBase_C::Rotation_Speed' has a wrong offset!");
static_assert(offsetof(UGA_PlayMontageAndWaitForEventBase_C, Rotation_Async_Task) == 0x0005B8, "Member 'UGA_PlayMontageAndWaitForEventBase_C::Rotation_Async_Task' has a wrong offset!");
static_assert(offsetof(UGA_PlayMontageAndWaitForEventBase_C, Rotation_Event_Tag) == 0x0005C0, "Member 'UGA_PlayMontageAndWaitForEventBase_C::Rotation_Event_Tag' has a wrong offset!");
static_assert(offsetof(UGA_PlayMontageAndWaitForEventBase_C, Trigger_Event_Data_Parent) == 0x0005C8, "Member 'UGA_PlayMontageAndWaitForEventBase_C::Trigger_Event_Data_Parent' has a wrong offset!");

}

