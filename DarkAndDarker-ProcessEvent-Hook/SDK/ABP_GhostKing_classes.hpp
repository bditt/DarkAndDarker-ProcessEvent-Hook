#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_GhostKing

#include "Basic.hpp"

#include "ABP_GhostKing_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "DungeonCrawler_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_GhostKing.ABP_GhostKing_C
// 0x0DF0 (0x1320 - 0x0530)
class UABP_GhostKing_C final : public UDCMonsterAnimInstanceBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_GhostKing::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0538(0x0010)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0548(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0550(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0558(0x0020)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0578(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x05C0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x05E8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0610(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0638(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0660(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0688(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x06D0(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x06F0(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0760(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0780(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x07F0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x0810(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x08D8(0x0080)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0958(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0980(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x09A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x09D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x09F8(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_6;                     // 0x0A20(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x0A48(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x0A70(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0A98(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0AE0(0x0048)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_3;                     // 0x0B28(0x00C8)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_2;                     // 0x0BF0(0x00C8)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x0CB8(0x00F0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x0DA8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0DF0(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x0E10(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x0E38(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0E60(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0E88(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0ED0(0x0048)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x0F18(0x00C8)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x0FE0(0x00C8)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x10A8(0x00F0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x1198(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x11E0(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x1200(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x1228(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x1248(0x00C8)()
	bool                                          EatingPhase;                                       // 0x1310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void BlueprintBeginPlay();
	void ExecuteUbergraph_ABP_GhostKing(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_GhostKing_C">();
	}
	static class UABP_GhostKing_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_GhostKing_C>();
	}
};
static_assert(alignof(UABP_GhostKing_C) == 0x000010, "Wrong alignment on UABP_GhostKing_C");
static_assert(sizeof(UABP_GhostKing_C) == 0x001320, "Wrong size on UABP_GhostKing_C");
static_assert(offsetof(UABP_GhostKing_C, UberGraphFrame) == 0x000530, "Member 'UABP_GhostKing_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, __AnimBlueprintMutables) == 0x000538, "Member 'UABP_GhostKing_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimBlueprintExtension_PropertyAccess) == 0x000548, "Member 'UABP_GhostKing_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimBlueprintExtension_Base) == 0x000550, "Member 'UABP_GhostKing_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_Root) == 0x000558, "Member 'UABP_GhostKing_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_Slot) == 0x000578, "Member 'UABP_GhostKing_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_TransitionResult_9) == 0x0005C0, "Member 'UABP_GhostKing_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_TransitionResult_8) == 0x0005E8, "Member 'UABP_GhostKing_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_TransitionResult_7) == 0x000610, "Member 'UABP_GhostKing_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_TransitionResult_6) == 0x000638, "Member 'UABP_GhostKing_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_TransitionResult_5) == 0x000660, "Member 'UABP_GhostKing_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_SequencePlayer_4) == 0x000688, "Member 'UABP_GhostKing_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_StateResult_5) == 0x0006D0, "Member 'UABP_GhostKing_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_BlendSpacePlayer_1) == 0x0006F0, "Member 'UABP_GhostKing_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_StateResult_4) == 0x000760, "Member 'UABP_GhostKing_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_BlendSpacePlayer) == 0x000780, "Member 'UABP_GhostKing_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_StateResult_3) == 0x0007F0, "Member 'UABP_GhostKing_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_StateMachine_1) == 0x000810, "Member 'UABP_GhostKing_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_SaveCachedPose) == 0x0008D8, "Member 'UABP_GhostKing_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_TransitionResult_4) == 0x000958, "Member 'UABP_GhostKing_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_TransitionResult_3) == 0x000980, "Member 'UABP_GhostKing_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_TransitionResult_2) == 0x0009A8, "Member 'UABP_GhostKing_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_TransitionResult_1) == 0x0009D0, "Member 'UABP_GhostKing_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_TransitionResult) == 0x0009F8, "Member 'UABP_GhostKing_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_UseCachedPose_6) == 0x000A20, "Member 'UABP_GhostKing_C::AnimGraphNode_UseCachedPose_6' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_UseCachedPose_5) == 0x000A48, "Member 'UABP_GhostKing_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_UseCachedPose_4) == 0x000A70, "Member 'UABP_GhostKing_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_SequencePlayer_3) == 0x000A98, "Member 'UABP_GhostKing_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_SequencePlayer_2) == 0x000AE0, "Member 'UABP_GhostKing_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_ApplyAdditive_3) == 0x000B28, "Member 'UABP_GhostKing_C::AnimGraphNode_ApplyAdditive_3' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_ApplyAdditive_2) == 0x000BF0, "Member 'UABP_GhostKing_C::AnimGraphNode_ApplyAdditive_2' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_LayeredBoneBlend_1) == 0x000CB8, "Member 'UABP_GhostKing_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_BlendListByBool_1) == 0x000DA8, "Member 'UABP_GhostKing_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_StateResult_2) == 0x000DF0, "Member 'UABP_GhostKing_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_UseCachedPose_3) == 0x000E10, "Member 'UABP_GhostKing_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_UseCachedPose_2) == 0x000E38, "Member 'UABP_GhostKing_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_UseCachedPose_1) == 0x000E60, "Member 'UABP_GhostKing_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_SequencePlayer_1) == 0x000E88, "Member 'UABP_GhostKing_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_SequencePlayer) == 0x000ED0, "Member 'UABP_GhostKing_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_ApplyAdditive_1) == 0x000F18, "Member 'UABP_GhostKing_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_ApplyAdditive) == 0x000FE0, "Member 'UABP_GhostKing_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_LayeredBoneBlend) == 0x0010A8, "Member 'UABP_GhostKing_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_BlendListByBool) == 0x001198, "Member 'UABP_GhostKing_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_StateResult_1) == 0x0011E0, "Member 'UABP_GhostKing_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_UseCachedPose) == 0x001200, "Member 'UABP_GhostKing_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_StateResult) == 0x001228, "Member 'UABP_GhostKing_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, AnimGraphNode_StateMachine) == 0x001248, "Member 'UABP_GhostKing_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_GhostKing_C, EatingPhase) == 0x001310, "Member 'UABP_GhostKing_C::EatingPhase' has a wrong offset!");

}

