#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_GoblinWarrior_FleePhase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GA_MonsterGameplayAbilityBase_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_GoblinWarrior_FleePhase.GA_GoblinWarrior_FleePhase_C
// 0x00F0 (0x06B8 - 0x05C8)
class UGA_GoblinWarrior_FleePhase_C final : public UGA_MonsterGameplayAbilityBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         GoalDistanceFromEnemy;                             // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5069[0x4];                                     // 0x05D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LimitFleeTime;                                     // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MoveFleeTimerHandle;                               // 0x05E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MoveFailTimerHandle;                               // 0x05E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MoveFailUnableTimerHandle;                         // 0x05F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Reached;                                           // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_506A[0x7];                                     // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_DCMonsterBaseWithOptions_C*         As_BP_DCMonster_Base_With_Options;                 // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     Gameplay_Event_Data;                               // 0x0608(0x00B0)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AbilityActivated(const struct FGameplayEventData& TriggerEventData);
	void EventReceived_81379A3849C747B5C64706BF518AB608(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void EventReceived_BF3F566141F89016543AD490488A3AD7(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_GA_GoblinWarrior_FleePhase(int32 EntryPoint);
	void K2_OnEndAbility(bool bWasCancelled);
	void MoveFailTimeout();
	void MoveFailUnable();
	void MoveFlee();
	void OnBlendOut_81379A3849C747B5C64706BF518AB608(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnCancelled_81379A3849C747B5C64706BF518AB608(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnCompleted_81379A3849C747B5C64706BF518AB608(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnFail_1A840F70482377B71FCEADBD5ACE2499(EPathFollowingResult MovementResult);
	void OnInterrupted_81379A3849C747B5C64706BF518AB608(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnSuccess_1A840F70482377B71FCEADBD5ACE2499(EPathFollowingResult MovementResult);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_GoblinWarrior_FleePhase_C">();
	}
	static class UGA_GoblinWarrior_FleePhase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_GoblinWarrior_FleePhase_C>();
	}
};
static_assert(alignof(UGA_GoblinWarrior_FleePhase_C) == 0x000008, "Wrong alignment on UGA_GoblinWarrior_FleePhase_C");
static_assert(sizeof(UGA_GoblinWarrior_FleePhase_C) == 0x0006B8, "Wrong size on UGA_GoblinWarrior_FleePhase_C");
static_assert(offsetof(UGA_GoblinWarrior_FleePhase_C, UberGraphFrame) == 0x0005C8, "Member 'UGA_GoblinWarrior_FleePhase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_GoblinWarrior_FleePhase_C, GoalDistanceFromEnemy) == 0x0005D0, "Member 'UGA_GoblinWarrior_FleePhase_C::GoalDistanceFromEnemy' has a wrong offset!");
static_assert(offsetof(UGA_GoblinWarrior_FleePhase_C, LimitFleeTime) == 0x0005D8, "Member 'UGA_GoblinWarrior_FleePhase_C::LimitFleeTime' has a wrong offset!");
static_assert(offsetof(UGA_GoblinWarrior_FleePhase_C, MoveFleeTimerHandle) == 0x0005E0, "Member 'UGA_GoblinWarrior_FleePhase_C::MoveFleeTimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_GoblinWarrior_FleePhase_C, MoveFailTimerHandle) == 0x0005E8, "Member 'UGA_GoblinWarrior_FleePhase_C::MoveFailTimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_GoblinWarrior_FleePhase_C, MoveFailUnableTimerHandle) == 0x0005F0, "Member 'UGA_GoblinWarrior_FleePhase_C::MoveFailUnableTimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_GoblinWarrior_FleePhase_C, Reached) == 0x0005F8, "Member 'UGA_GoblinWarrior_FleePhase_C::Reached' has a wrong offset!");
static_assert(offsetof(UGA_GoblinWarrior_FleePhase_C, As_BP_DCMonster_Base_With_Options) == 0x000600, "Member 'UGA_GoblinWarrior_FleePhase_C::As_BP_DCMonster_Base_With_Options' has a wrong offset!");
static_assert(offsetof(UGA_GoblinWarrior_FleePhase_C, Gameplay_Event_Data) == 0x000608, "Member 'UGA_GoblinWarrior_FleePhase_C::Gameplay_Event_Data' has a wrong offset!");

}

