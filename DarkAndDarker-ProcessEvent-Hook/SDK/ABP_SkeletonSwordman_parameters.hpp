#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_SkeletonSwordman

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ABP_SkeletonSwordman.ABP_SkeletonSwordman_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_SkeletonSwordman_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SkeletonSwordman_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_SkeletonSwordman_C_AnimGraph");
static_assert(sizeof(ABP_SkeletonSwordman_C_AnimGraph) == 0x000010, "Wrong size on ABP_SkeletonSwordman_C_AnimGraph");
static_assert(offsetof(ABP_SkeletonSwordman_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'ABP_SkeletonSwordman_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function ABP_SkeletonSwordman.ABP_SkeletonSwordman_C.BlueprintThreadSafeUpdateAnimation
// 0x0040 (0x0040 - 0x0000)
struct ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59D4[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_2;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59D5[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_IKHandRWeight_ImplicitCast;     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation) == 0x000008, "Wrong alignment on ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation) == 0x000040, "Wrong size on ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation, CallFunc_GetCurveValue_ReturnValue) == 0x000004, "Member 'ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation, CallFunc_GetCurveValue_ReturnValue_1) == 0x000008, "Member 'ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000018, "Member 'ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation, CallFunc_GetCurveValue_ReturnValue_2) == 0x000020, "Member 'ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation::CallFunc_GetCurveValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000024, "Member 'ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation, CallFunc_BooleanAND_ReturnValue) == 0x000025, "Member 'ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000028, "Member 'ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation, K2Node_VariableSet_IKHandRWeight_ImplicitCast) == 0x000030, "Member 'ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation::K2Node_VariableSet_IKHandRWeight_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x000038, "Member 'ABP_SkeletonSwordman_C_BlueprintThreadSafeUpdateAnimation::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function ABP_SkeletonSwordman.ABP_SkeletonSwordman_C.ExecuteUbergraph_ABP_SkeletonSwordman
// 0x0004 (0x0004 - 0x0000)
struct ABP_SkeletonSwordman_C_ExecuteUbergraph_ABP_SkeletonSwordman final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_SkeletonSwordman_C_ExecuteUbergraph_ABP_SkeletonSwordman) == 0x000004, "Wrong alignment on ABP_SkeletonSwordman_C_ExecuteUbergraph_ABP_SkeletonSwordman");
static_assert(sizeof(ABP_SkeletonSwordman_C_ExecuteUbergraph_ABP_SkeletonSwordman) == 0x000004, "Wrong size on ABP_SkeletonSwordman_C_ExecuteUbergraph_ABP_SkeletonSwordman");
static_assert(offsetof(ABP_SkeletonSwordman_C_ExecuteUbergraph_ABP_SkeletonSwordman, EntryPoint) == 0x000000, "Member 'ABP_SkeletonSwordman_C_ExecuteUbergraph_ABP_SkeletonSwordman::EntryPoint' has a wrong offset!");

// Function ABP_SkeletonSwordman.ABP_SkeletonSwordman_C.È `ÈTtX t´
// 0x0010 (0x0010 - 0x0000)
struct ABP_SkeletonSwordman_C_____TtX__t_ final
{
public:
	struct FPoseLink                              Param_____TtX__t_;                                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SkeletonSwordman_C_____TtX__t_) == 0x000008, "Wrong alignment on ABP_SkeletonSwordman_C_____TtX__t_");
static_assert(sizeof(ABP_SkeletonSwordman_C_____TtX__t_) == 0x000010, "Wrong size on ABP_SkeletonSwordman_C_____TtX__t_");
static_assert(offsetof(ABP_SkeletonSwordman_C_____TtX__t_, Param_____TtX__t_) == 0x000000, "Member 'ABP_SkeletonSwordman_C_____TtX__t_::Param_____TtX__t_' has a wrong offset!");

}

