#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpikeLogEjector

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DungeonCrawler_structs.hpp"
#include "BP_TrapBase_StaticMesh_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SpikeLogEjector.BP_SpikeLogEjector_C
// 0x0048 (0x05C0 - 0x0578)
class ABP_SpikeLogEjector_C final : public ABP_TrapBase_StaticMesh_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_SpikeLogEjector_C;               // 0x0578(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow;                                             // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SpawnPosition;                                     // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDCGameObjectLinkComponent*             DCGameObjectLink;                                  // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDCSpawnPoolComponent*                  DCSpawnPool;                                       // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        SpawnIntervalSec;                                  // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDCSpikeLogAnimationData               SpikeLogAnimationData;                             // 0x05A8(0x0014)(Edit, BlueprintVisible, NoDestructor)
	bool                                          bWaitForSpawn;                                     // 0x05BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Activate();
	void BndEvt__BP_SpikeLogEjector_DCGameObjectLink_K2Node_ComponentBoundEvent_0_DCGameObjectLinkComponentGameObjectLinkEvent__DelegateSignature(const struct FObjectLinkRequestEvent& RecvEvent, class UObjectLinkMetaDataBlueprint* SendEventParam);
	void CreateSpikeLog(class ABP_SpikeLog_C** SpikeLog);
	void EventMsgSound(const struct FMsgSoundEvent& InMsg);
	void ExecuteUbergraph_BP_SpikeLogEjector(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void InteractSucceed(class AActor* Interacter, const struct FGameplayTag& StateTag, const struct FGameplayTag& TriggerTag, const struct FHitResult& HitResult);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SpikeLogEjector_C">();
	}
	static class ABP_SpikeLogEjector_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SpikeLogEjector_C>();
	}
};
static_assert(alignof(ABP_SpikeLogEjector_C) == 0x000008, "Wrong alignment on ABP_SpikeLogEjector_C");
static_assert(sizeof(ABP_SpikeLogEjector_C) == 0x0005C0, "Wrong size on ABP_SpikeLogEjector_C");
static_assert(offsetof(ABP_SpikeLogEjector_C, UberGraphFrame_BP_SpikeLogEjector_C) == 0x000578, "Member 'ABP_SpikeLogEjector_C::UberGraphFrame_BP_SpikeLogEjector_C' has a wrong offset!");
static_assert(offsetof(ABP_SpikeLogEjector_C, Arrow) == 0x000580, "Member 'ABP_SpikeLogEjector_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_SpikeLogEjector_C, SpawnPosition) == 0x000588, "Member 'ABP_SpikeLogEjector_C::SpawnPosition' has a wrong offset!");
static_assert(offsetof(ABP_SpikeLogEjector_C, DCGameObjectLink) == 0x000590, "Member 'ABP_SpikeLogEjector_C::DCGameObjectLink' has a wrong offset!");
static_assert(offsetof(ABP_SpikeLogEjector_C, DCSpawnPool) == 0x000598, "Member 'ABP_SpikeLogEjector_C::DCSpawnPool' has a wrong offset!");
static_assert(offsetof(ABP_SpikeLogEjector_C, SpawnIntervalSec) == 0x0005A0, "Member 'ABP_SpikeLogEjector_C::SpawnIntervalSec' has a wrong offset!");
static_assert(offsetof(ABP_SpikeLogEjector_C, SpikeLogAnimationData) == 0x0005A8, "Member 'ABP_SpikeLogEjector_C::SpikeLogAnimationData' has a wrong offset!");
static_assert(offsetof(ABP_SpikeLogEjector_C, bWaitForSpawn) == 0x0005BC, "Member 'ABP_SpikeLogEjector_C::bWaitForSpawn' has a wrong offset!");

}

