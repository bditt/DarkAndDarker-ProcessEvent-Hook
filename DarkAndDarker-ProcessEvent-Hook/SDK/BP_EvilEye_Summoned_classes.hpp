#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EvilEye_Summoned

#include "Basic.hpp"

#include "BP_DCMonsterBaseWithOptions_classes.hpp"
#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EvilEye_Summoned.BP_EvilEye_Summoned_C
// 0x00A0 (0x1480 - 0x13E0)
class ABP_EvilEye_Summoned_C final : public ABP_DCMonsterBaseWithOptions_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_EvilEye_Summoned_C;              // 0x13D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_DCHitBox_C*                         BP_DCHitBox4;                                      // 0x13E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox3;                                      // 0x13E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox2;                                      // 0x13F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox1;                                      // 0x13F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            GlowingEye_R_Attack;                               // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            GlowingEye_L_Attack;                               // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            GlowingEye_R_Normal;                               // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            GlowingEye_L_Normal;                               // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox;                                       // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        GlowingTick;                                       // 0x1428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MSESizeX;                                          // 0x1430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MSESizeY;                                          // 0x1438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SWITCH;                                            // 0x1440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56DD[0x7];                                     // 0x1441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MaterialSprite;                                    // 0x1448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        GlowingScale;                                      // 0x1450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnRedEyes;                                         // 0x1458(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56DE[0x7];                                     // 0x1459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BigGlowingTime;                                    // 0x1460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SmallGlowingTime;                                  // 0x1468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnGlowing;                                         // 0x1470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnDead;                                            // 0x1471(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttack;                                          // 0x1472(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTargetHit;                                       // 0x1473(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CheckRemainDistanceByVelocity2D(const struct FVector& MoveDirection, double DeltaTime, double RemainDist, double* ResultDistance);
	void CheckRemainDistanceByVelocity3D(const struct FVector& MoveDirection, double DeltaTime, double RemainDist, double* ResultDistance);
	void ExecuteUbergraph_BP_EvilEye_Summoned(int32 EntryPoint);
	void OnBeforeDeath();
	void OnGlowingEyes(bool OnAttack);
	void OnRep_OnDead();
	void OnRep_OnRedEyes();
	void ReceiveTick(float DeltaSeconds);
	void SetAttackByCollisionOption(bool OnAttack);
	void UpdateGlowing(double DeltaTime, double MaxGlowingTime, double MinGlowingTime, double Param_GlowingScale);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EvilEye_Summoned_C">();
	}
	static class ABP_EvilEye_Summoned_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EvilEye_Summoned_C>();
	}
};
static_assert(alignof(ABP_EvilEye_Summoned_C) == 0x000010, "Wrong alignment on ABP_EvilEye_Summoned_C");
static_assert(sizeof(ABP_EvilEye_Summoned_C) == 0x001480, "Wrong size on ABP_EvilEye_Summoned_C");
static_assert(offsetof(ABP_EvilEye_Summoned_C, UberGraphFrame_BP_EvilEye_Summoned_C) == 0x0013D8, "Member 'ABP_EvilEye_Summoned_C::UberGraphFrame_BP_EvilEye_Summoned_C' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, BP_DCHitBox4) == 0x0013E0, "Member 'ABP_EvilEye_Summoned_C::BP_DCHitBox4' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, BP_DCHitBox3) == 0x0013E8, "Member 'ABP_EvilEye_Summoned_C::BP_DCHitBox3' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, BP_DCHitBox2) == 0x0013F0, "Member 'ABP_EvilEye_Summoned_C::BP_DCHitBox2' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, BP_DCHitBox1) == 0x0013F8, "Member 'ABP_EvilEye_Summoned_C::BP_DCHitBox1' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, GlowingEye_R_Attack) == 0x001400, "Member 'ABP_EvilEye_Summoned_C::GlowingEye_R_Attack' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, GlowingEye_L_Attack) == 0x001408, "Member 'ABP_EvilEye_Summoned_C::GlowingEye_L_Attack' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, GlowingEye_R_Normal) == 0x001410, "Member 'ABP_EvilEye_Summoned_C::GlowingEye_R_Normal' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, GlowingEye_L_Normal) == 0x001418, "Member 'ABP_EvilEye_Summoned_C::GlowingEye_L_Normal' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, BP_DCHitBox) == 0x001420, "Member 'ABP_EvilEye_Summoned_C::BP_DCHitBox' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, GlowingTick) == 0x001428, "Member 'ABP_EvilEye_Summoned_C::GlowingTick' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, MSESizeX) == 0x001430, "Member 'ABP_EvilEye_Summoned_C::MSESizeX' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, MSESizeY) == 0x001438, "Member 'ABP_EvilEye_Summoned_C::MSESizeY' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, SWITCH) == 0x001440, "Member 'ABP_EvilEye_Summoned_C::SWITCH' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, MaterialSprite) == 0x001448, "Member 'ABP_EvilEye_Summoned_C::MaterialSprite' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, GlowingScale) == 0x001450, "Member 'ABP_EvilEye_Summoned_C::GlowingScale' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, OnRedEyes) == 0x001458, "Member 'ABP_EvilEye_Summoned_C::OnRedEyes' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, BigGlowingTime) == 0x001460, "Member 'ABP_EvilEye_Summoned_C::BigGlowingTime' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, SmallGlowingTime) == 0x001468, "Member 'ABP_EvilEye_Summoned_C::SmallGlowingTime' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, OnGlowing) == 0x001470, "Member 'ABP_EvilEye_Summoned_C::OnGlowing' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, OnDead) == 0x001471, "Member 'ABP_EvilEye_Summoned_C::OnDead' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, IsAttack) == 0x001472, "Member 'ABP_EvilEye_Summoned_C::IsAttack' has a wrong offset!");
static_assert(offsetof(ABP_EvilEye_Summoned_C, IsTargetHit) == 0x001473, "Member 'ABP_EvilEye_Summoned_C::IsTargetHit' has a wrong offset!");

}

