#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_QuickFire

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GA_QuickFire.GA_QuickFire_C.ExecuteUbergraph_GA_QuickFire
// 0x00F8 (0x00F8 - 0x0000)
struct GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5733[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     Temp_struct_Variable;                              // 0x0020(0x00B0)(ConstParm)
	TArray<struct FActiveGameplayEffectHandle>    CallFunc_ApplyEffectContainer_ReturnValue;         // 0x00D0(0x0010)(ReferenceParm)
	struct FGameplayTag                           K2Node_Event_SkillTag;                             // 0x00E0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_CooldownTag;                          // 0x00E8(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire) == 0x000008, "Wrong alignment on GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire");
static_assert(sizeof(GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire) == 0x0000F8, "Wrong size on GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire");
static_assert(offsetof(GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire, EntryPoint) == 0x000000, "Member 'GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire, Temp_int_Array_Index_Variable) == 0x000008, "Member 'GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire, CallFunc_Array_Get_Item) == 0x000010, "Member 'GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire, Temp_struct_Variable) == 0x000020, "Member 'GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire, CallFunc_ApplyEffectContainer_ReturnValue) == 0x0000D0, "Member 'GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire::CallFunc_ApplyEffectContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire, K2Node_Event_SkillTag) == 0x0000E0, "Member 'GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire::K2Node_Event_SkillTag' has a wrong offset!");
static_assert(offsetof(GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire, K2Node_Event_CooldownTag) == 0x0000E8, "Member 'GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire::K2Node_Event_CooldownTag' has a wrong offset!");
static_assert(offsetof(GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire, K2Node_Event_bWasCancelled) == 0x0000F0, "Member 'GA_QuickFire_C_ExecuteUbergraph_GA_QuickFire::K2Node_Event_bWasCancelled' has a wrong offset!");

// Function GA_QuickFire.GA_QuickFire_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_QuickFire_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_QuickFire_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_QuickFire_C_K2_OnEndAbility");
static_assert(sizeof(GA_QuickFire_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_QuickFire_C_K2_OnEndAbility");
static_assert(offsetof(GA_QuickFire_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_QuickFire_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_QuickFire.GA_QuickFire_C.ServerOnSkillActivate
// 0x0010 (0x0010 - 0x0000)
struct GA_QuickFire_C_ServerOnSkillActivate final
{
public:
	struct FGameplayTag                           SkillTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CooldownTag;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_QuickFire_C_ServerOnSkillActivate) == 0x000004, "Wrong alignment on GA_QuickFire_C_ServerOnSkillActivate");
static_assert(sizeof(GA_QuickFire_C_ServerOnSkillActivate) == 0x000010, "Wrong size on GA_QuickFire_C_ServerOnSkillActivate");
static_assert(offsetof(GA_QuickFire_C_ServerOnSkillActivate, SkillTag) == 0x000000, "Member 'GA_QuickFire_C_ServerOnSkillActivate::SkillTag' has a wrong offset!");
static_assert(offsetof(GA_QuickFire_C_ServerOnSkillActivate, CooldownTag) == 0x000008, "Member 'GA_QuickFire_C_ServerOnSkillActivate::CooldownTag' has a wrong offset!");

}

