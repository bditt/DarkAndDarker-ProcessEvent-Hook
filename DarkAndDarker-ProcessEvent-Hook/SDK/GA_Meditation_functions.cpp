#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Meditation

#include "Basic.hpp"

#include "GA_Meditation_classes.hpp"
#include "GA_Meditation_parameters.hpp"


namespace SDK
{

// Function GA_Meditation.GA_Meditation_C.AbilityActivated
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayEventData               TriggerEventData                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)

void UGA_Meditation_C::AbilityActivated(const struct FGameplayEventData& TriggerEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Meditation_C", "AbilityActivated");

	Params::GA_Meditation_C_AbilityActivated Parms{};

	Parms.TriggerEventData = std::move(TriggerEventData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Meditation.GA_Meditation_C.ExecuteUbergraph_GA_Meditation
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Meditation_C::ExecuteUbergraph_GA_Meditation(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Meditation_C", "ExecuteUbergraph_GA_Meditation");

	Params::GA_Meditation_C_ExecuteUbergraph_GA_Meditation Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Meditation.GA_Meditation_C.K2_OnEndAbility
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bWasCancelled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Meditation_C::K2_OnEndAbility(bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Meditation_C", "K2_OnEndAbility");

	Params::GA_Meditation_C_K2_OnEndAbility Parms{};

	Parms.bWasCancelled = bWasCancelled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Meditation.GA_Meditation_C.ServerOnChannelingAction_BP
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FGameplayEventData               EventData                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FGameplayCueParameters           CueParams                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// int32                                   ActionCount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Meditation_C::ServerOnChannelingAction_BP(const struct FGameplayEventData& EventData, const struct FGameplayCueParameters& CueParams, int32 ActionCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Meditation_C", "ServerOnChannelingAction_BP");

	Params::GA_Meditation_C_ServerOnChannelingAction_BP Parms{};

	Parms.EventData = std::move(EventData);
	Parms.CueParams = std::move(CueParams);
	Parms.ActionCount = ActionCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Meditation.GA_Meditation_C.ServerOnChannelingStart
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FGameplayEventData               EventData                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FGameplayCueParameters           CueParams                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void UGA_Meditation_C::ServerOnChannelingStart(const struct FGameplayEventData& EventData, const struct FGameplayCueParameters& CueParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Meditation_C", "ServerOnChannelingStart");

	Params::GA_Meditation_C_ServerOnChannelingStart Parms{};

	Parms.EventData = std::move(EventData);
	Parms.CueParams = std::move(CueParams);

	UObject::ProcessEvent(Func, &Parms);
}

}

