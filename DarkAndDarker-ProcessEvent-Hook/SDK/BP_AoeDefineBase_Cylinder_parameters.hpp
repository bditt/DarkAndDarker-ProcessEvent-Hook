#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AoeDefineBase_Cylinder

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_AoeDefineBase_Cylinder.BP_AoeDefineBase_Cylinder_C.ExecuteUbergraph_BP_AoeDefineBase_Cylinder
// 0x0008 (0x0008 - 0x0000)
struct BP_AoeDefineBase_Cylinder_C_ExecuteUbergraph_BP_AoeDefineBase_Cylinder final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AoeDefineBase_Cylinder_C_ExecuteUbergraph_BP_AoeDefineBase_Cylinder) == 0x000004, "Wrong alignment on BP_AoeDefineBase_Cylinder_C_ExecuteUbergraph_BP_AoeDefineBase_Cylinder");
static_assert(sizeof(BP_AoeDefineBase_Cylinder_C_ExecuteUbergraph_BP_AoeDefineBase_Cylinder) == 0x000008, "Wrong size on BP_AoeDefineBase_Cylinder_C_ExecuteUbergraph_BP_AoeDefineBase_Cylinder");
static_assert(offsetof(BP_AoeDefineBase_Cylinder_C_ExecuteUbergraph_BP_AoeDefineBase_Cylinder, EntryPoint) == 0x000000, "Member 'BP_AoeDefineBase_Cylinder_C_ExecuteUbergraph_BP_AoeDefineBase_Cylinder::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AoeDefineBase_Cylinder_C_ExecuteUbergraph_BP_AoeDefineBase_Cylinder, CallFunc_Delay_Duration_ImplicitCast) == 0x000004, "Member 'BP_AoeDefineBase_Cylinder_C_ExecuteUbergraph_BP_AoeDefineBase_Cylinder::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");

// Function BP_AoeDefineBase_Cylinder.BP_AoeDefineBase_Cylinder_C.Set Collision Profile Activate
// 0x0008 (0x0008 - 0x0000)
struct BP_AoeDefineBase_Cylinder_C_Set_Collision_Profile_Activate final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AoeDefineBase_Cylinder_C_Set_Collision_Profile_Activate) == 0x000008, "Wrong alignment on BP_AoeDefineBase_Cylinder_C_Set_Collision_Profile_Activate");
static_assert(sizeof(BP_AoeDefineBase_Cylinder_C_Set_Collision_Profile_Activate) == 0x000008, "Wrong size on BP_AoeDefineBase_Cylinder_C_Set_Collision_Profile_Activate");
static_assert(offsetof(BP_AoeDefineBase_Cylinder_C_Set_Collision_Profile_Activate, Target) == 0x000000, "Member 'BP_AoeDefineBase_Cylinder_C_Set_Collision_Profile_Activate::Target' has a wrong offset!");

// Function BP_AoeDefineBase_Cylinder.BP_AoeDefineBase_Cylinder_C.Set Collision Profile Deactivate
// 0x0008 (0x0008 - 0x0000)
struct BP_AoeDefineBase_Cylinder_C_Set_Collision_Profile_Deactivate final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AoeDefineBase_Cylinder_C_Set_Collision_Profile_Deactivate) == 0x000008, "Wrong alignment on BP_AoeDefineBase_Cylinder_C_Set_Collision_Profile_Deactivate");
static_assert(sizeof(BP_AoeDefineBase_Cylinder_C_Set_Collision_Profile_Deactivate) == 0x000008, "Wrong size on BP_AoeDefineBase_Cylinder_C_Set_Collision_Profile_Deactivate");
static_assert(offsetof(BP_AoeDefineBase_Cylinder_C_Set_Collision_Profile_Deactivate, Target) == 0x000000, "Member 'BP_AoeDefineBase_Cylinder_C_Set_Collision_Profile_Deactivate::Target' has a wrong offset!");

// Function BP_AoeDefineBase_Cylinder.BP_AoeDefineBase_Cylinder_C.SetCylinderSize
// 0x0028 (0x0028 - 0x0000)
struct BP_AoeDefineBase_Cylinder_C_SetCylinderSize final
{
public:
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AoeDefineBase_Cylinder_C_SetCylinderSize) == 0x000008, "Wrong alignment on BP_AoeDefineBase_Cylinder_C_SetCylinderSize");
static_assert(sizeof(BP_AoeDefineBase_Cylinder_C_SetCylinderSize) == 0x000028, "Wrong size on BP_AoeDefineBase_Cylinder_C_SetCylinderSize");
static_assert(offsetof(BP_AoeDefineBase_Cylinder_C_SetCylinderSize, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000000, "Member 'BP_AoeDefineBase_Cylinder_C_SetCylinderSize::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AoeDefineBase_Cylinder_C_SetCylinderSize, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000008, "Member 'BP_AoeDefineBase_Cylinder_C_SetCylinderSize::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AoeDefineBase_Cylinder_C_SetCylinderSize, CallFunc_MakeVector_ReturnValue) == 0x000010, "Member 'BP_AoeDefineBase_Cylinder_C_SetCylinderSize::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

}

