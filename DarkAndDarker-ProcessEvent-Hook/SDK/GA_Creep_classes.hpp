#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Creep

#include "Basic.hpp"

#include "GA_ActivateOnAbilityHandleData_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Creep.GA_Creep_C
// 0x0030 (0x05D0 - 0x05A0)
class UGA_Creep_C final : public UGA_ActivateOnAbilityHandleData_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          bIsWalking;                                        // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWantsToCreep;                                     // 0x05A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5592[0x6];                                     // 0x05AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CreepConditionTagContainer;                        // 0x05B0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Added_F80A4BBA4BA462AEF8D07FAEB8CE8D78();
	void AddedOnTarget_F80A4BBA4BA462AEF8D07FAEB8CE8D78(class AActor* TargetActor);
	void AddOrRemoveCreepStates(TArray<struct FActiveGameplayEffectHandle>* ActiveGameplayEffectHandles);
	void ExecuteUbergraph_GA_Creep(int32 EntryPoint);
	void InvalidHandle_E18E3E8E49D86F06DA65538E151266F5(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void K2_OnEndAbility(bool bWasCancelled);
	void OnMovementModeChanged_513A5D0B49F0FB55031E7AB53AA4AAA6(EMovementMode PrevMovementMode, EMovementMode NewMovementMode);
	void OnMovementModeChanged_935FA2BA4A9B2D47F35B2D84B794EED0(EMovementMode PrevMovementMode, EMovementMode NewMovementMode);
	void OnRemoved_E18E3E8E49D86F06DA65538E151266F5(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
	void Removed_E81EB63142901C4858A96D8C15224028();
	void RemovedOnTarget_E81EB63142901C4858A96D8C15224028(class AActor* TargetActor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Creep_C">();
	}
	static class UGA_Creep_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Creep_C>();
	}
};
static_assert(alignof(UGA_Creep_C) == 0x000008, "Wrong alignment on UGA_Creep_C");
static_assert(sizeof(UGA_Creep_C) == 0x0005D0, "Wrong size on UGA_Creep_C");
static_assert(offsetof(UGA_Creep_C, UberGraphFrame) == 0x0005A0, "Member 'UGA_Creep_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Creep_C, bIsWalking) == 0x0005A8, "Member 'UGA_Creep_C::bIsWalking' has a wrong offset!");
static_assert(offsetof(UGA_Creep_C, bWantsToCreep) == 0x0005A9, "Member 'UGA_Creep_C::bWantsToCreep' has a wrong offset!");
static_assert(offsetof(UGA_Creep_C, CreepConditionTagContainer) == 0x0005B0, "Member 'UGA_Creep_C::CreepConditionTagContainer' has a wrong offset!");

}

