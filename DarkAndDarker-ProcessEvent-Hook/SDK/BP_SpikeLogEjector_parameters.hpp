#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpikeLogEjector

#include "Basic.hpp"

#include "DungeonCrawler_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_SpikeLogEjector.BP_SpikeLogEjector_C.BndEvt__BP_SpikeLogEjector_DCGameObjectLink_K2Node_ComponentBoundEvent_0_DCGameObjectLinkComponentGameObjectLinkEvent__DelegateSignature
// 0x00D8 (0x00D8 - 0x0000)
struct BP_SpikeLogEjector_C_BndEvt__BP_SpikeLogEjector_DCGameObjectLink_K2Node_ComponentBoundEvent_0_DCGameObjectLinkComponentGameObjectLinkEvent__DelegateSignature final
{
public:
	struct FObjectLinkRequestEvent                RecvEvent;                                         // 0x0000(0x00D0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObjectLinkMetaDataBlueprint*           SendEventParam;                                    // 0x00D0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SpikeLogEjector_C_BndEvt__BP_SpikeLogEjector_DCGameObjectLink_K2Node_ComponentBoundEvent_0_DCGameObjectLinkComponentGameObjectLinkEvent__DelegateSignature) == 0x000008, "Wrong alignment on BP_SpikeLogEjector_C_BndEvt__BP_SpikeLogEjector_DCGameObjectLink_K2Node_ComponentBoundEvent_0_DCGameObjectLinkComponentGameObjectLinkEvent__DelegateSignature");
static_assert(sizeof(BP_SpikeLogEjector_C_BndEvt__BP_SpikeLogEjector_DCGameObjectLink_K2Node_ComponentBoundEvent_0_DCGameObjectLinkComponentGameObjectLinkEvent__DelegateSignature) == 0x0000D8, "Wrong size on BP_SpikeLogEjector_C_BndEvt__BP_SpikeLogEjector_DCGameObjectLink_K2Node_ComponentBoundEvent_0_DCGameObjectLinkComponentGameObjectLinkEvent__DelegateSignature");
static_assert(offsetof(BP_SpikeLogEjector_C_BndEvt__BP_SpikeLogEjector_DCGameObjectLink_K2Node_ComponentBoundEvent_0_DCGameObjectLinkComponentGameObjectLinkEvent__DelegateSignature, RecvEvent) == 0x000000, "Member 'BP_SpikeLogEjector_C_BndEvt__BP_SpikeLogEjector_DCGameObjectLink_K2Node_ComponentBoundEvent_0_DCGameObjectLinkComponentGameObjectLinkEvent__DelegateSignature::RecvEvent' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_BndEvt__BP_SpikeLogEjector_DCGameObjectLink_K2Node_ComponentBoundEvent_0_DCGameObjectLinkComponentGameObjectLinkEvent__DelegateSignature, SendEventParam) == 0x0000D0, "Member 'BP_SpikeLogEjector_C_BndEvt__BP_SpikeLogEjector_DCGameObjectLink_K2Node_ComponentBoundEvent_0_DCGameObjectLinkComponentGameObjectLinkEvent__DelegateSignature::SendEventParam' has a wrong offset!");

// Function BP_SpikeLogEjector.BP_SpikeLogEjector_C.CreateSpikeLog
// 0x0128 (0x0128 - 0x0000)
struct BP_SpikeLogEjector_C_CreateSpikeLog final
{
public:
	class ABP_SpikeLog_C*                         SpikeLog;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APropsActorBase*                        CallFunc_Rent_ReturnValue;                         // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_SpikeLog_C*                         K2Node_DynamicCast_AsBP_Spike_Log;                 // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5662[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0038(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SpikeLogEjector_C_CreateSpikeLog) == 0x000008, "Wrong alignment on BP_SpikeLogEjector_C_CreateSpikeLog");
static_assert(sizeof(BP_SpikeLogEjector_C_CreateSpikeLog) == 0x000128, "Wrong size on BP_SpikeLogEjector_C_CreateSpikeLog");
static_assert(offsetof(BP_SpikeLogEjector_C_CreateSpikeLog, SpikeLog) == 0x000000, "Member 'BP_SpikeLogEjector_C_CreateSpikeLog::SpikeLog' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_CreateSpikeLog, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000008, "Member 'BP_SpikeLogEjector_C_CreateSpikeLog::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_CreateSpikeLog, CallFunc_Rent_ReturnValue) == 0x000020, "Member 'BP_SpikeLogEjector_C_CreateSpikeLog::CallFunc_Rent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_CreateSpikeLog, K2Node_DynamicCast_AsBP_Spike_Log) == 0x000028, "Member 'BP_SpikeLogEjector_C_CreateSpikeLog::K2Node_DynamicCast_AsBP_Spike_Log' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_CreateSpikeLog, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_SpikeLogEjector_C_CreateSpikeLog::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_CreateSpikeLog, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000038, "Member 'BP_SpikeLogEjector_C_CreateSpikeLog::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_CreateSpikeLog, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000120, "Member 'BP_SpikeLogEjector_C_CreateSpikeLog::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_SpikeLogEjector.BP_SpikeLogEjector_C.EventMsgSound
// 0x0028 (0x0028 - 0x0000)
struct BP_SpikeLogEjector_C_EventMsgSound final
{
public:
	struct FMsgSoundEvent                         InMsg;                                             // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_SpikeLogEjector_C_EventMsgSound) == 0x000008, "Wrong alignment on BP_SpikeLogEjector_C_EventMsgSound");
static_assert(sizeof(BP_SpikeLogEjector_C_EventMsgSound) == 0x000028, "Wrong size on BP_SpikeLogEjector_C_EventMsgSound");
static_assert(offsetof(BP_SpikeLogEjector_C_EventMsgSound, InMsg) == 0x000000, "Member 'BP_SpikeLogEjector_C_EventMsgSound::InMsg' has a wrong offset!");

// Function BP_SpikeLogEjector.BP_SpikeLogEjector_C.ExecuteUbergraph_BP_SpikeLogEjector
// 0x0248 (0x0248 - 0x0000)
struct BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5663[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Interacter;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_StateTag;                             // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_TriggerTag;                           // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_HitResult;                            // 0x0020(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5664[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMsgSoundEvent                         K2Node_CustomEvent_InMsg;                          // 0x0110(0x0028)()
	bool                                          CallFunc_PlaySoundWithTag_ReturnValue;             // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5665[0x3];                                     // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_InGameplayTag;                        // 0x013C(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InCount;                              // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesTag_ReturnValue;                   // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1; // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5666[0x5];                                     // 0x014B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FObjectLinkRequestEvent                K2Node_ComponentBoundEvent_RecvEvent;              // 0x0150(0x00D0)(ConstParm)
	class UObjectLinkMetaDataBlueprint*           K2Node_ComponentBoundEvent_SendEventParam;         // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_2; // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesTag_ReturnValue_1;                 // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesTag_ReturnValue_2;                 // 0x022A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5667[0x5];                                     // 0x022B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SpikeLog_C*                         CallFunc_CreateSpikeLog_SpikeLog;                  // 0x0230(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_SpikeLog_C*                         CallFunc_CreateSpikeLog_SpikeLog_1;                // 0x0238(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector) == 0x000008, "Wrong alignment on BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector");
static_assert(sizeof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector) == 0x000248, "Wrong size on BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, EntryPoint) == 0x000000, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, K2Node_Event_Interacter) == 0x000008, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::K2Node_Event_Interacter' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, K2Node_Event_StateTag) == 0x000010, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::K2Node_Event_StateTag' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, K2Node_Event_TriggerTag) == 0x000018, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::K2Node_Event_TriggerTag' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, K2Node_Event_HitResult) == 0x000020, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::K2Node_Event_HitResult' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000108, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, K2Node_CustomEvent_InMsg) == 0x000110, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::K2Node_CustomEvent_InMsg' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, CallFunc_PlaySoundWithTag_ReturnValue) == 0x000138, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::CallFunc_PlaySoundWithTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, K2Node_Event_InGameplayTag) == 0x00013C, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::K2Node_Event_InGameplayTag' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, K2Node_Event_InCount) == 0x000144, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::K2Node_Event_InCount' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, CallFunc_MatchesTag_ReturnValue) == 0x000148, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::CallFunc_MatchesTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, CallFunc_Greater_IntInt_ReturnValue) == 0x000149, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1) == 0x00014A, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, K2Node_ComponentBoundEvent_RecvEvent) == 0x000150, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::K2Node_ComponentBoundEvent_RecvEvent' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, K2Node_ComponentBoundEvent_SendEventParam) == 0x000220, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::K2Node_ComponentBoundEvent_SendEventParam' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_2) == 0x000228, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, CallFunc_MatchesTag_ReturnValue_1) == 0x000229, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::CallFunc_MatchesTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, CallFunc_MatchesTag_ReturnValue_2) == 0x00022A, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::CallFunc_MatchesTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, CallFunc_CreateSpikeLog_SpikeLog) == 0x000230, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::CallFunc_CreateSpikeLog_SpikeLog' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, CallFunc_CreateSpikeLog_SpikeLog_1) == 0x000238, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::CallFunc_CreateSpikeLog_SpikeLog_1' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector, CallFunc_Delay_Duration_ImplicitCast) == 0x000240, "Member 'BP_SpikeLogEjector_C_ExecuteUbergraph_BP_SpikeLogEjector::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");

// Function BP_SpikeLogEjector.BP_SpikeLogEjector_C.GameplayTagUpdated
// 0x000C (0x000C - 0x0000)
struct BP_SpikeLogEjector_C_GameplayTagUpdated final
{
public:
	struct FGameplayTag                           InGameplayTag;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         InCount;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SpikeLogEjector_C_GameplayTagUpdated) == 0x000004, "Wrong alignment on BP_SpikeLogEjector_C_GameplayTagUpdated");
static_assert(sizeof(BP_SpikeLogEjector_C_GameplayTagUpdated) == 0x00000C, "Wrong size on BP_SpikeLogEjector_C_GameplayTagUpdated");
static_assert(offsetof(BP_SpikeLogEjector_C_GameplayTagUpdated, InGameplayTag) == 0x000000, "Member 'BP_SpikeLogEjector_C_GameplayTagUpdated::InGameplayTag' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_GameplayTagUpdated, InCount) == 0x000008, "Member 'BP_SpikeLogEjector_C_GameplayTagUpdated::InCount' has a wrong offset!");

// Function BP_SpikeLogEjector.BP_SpikeLogEjector_C.InteractSucceed
// 0x0100 (0x0100 - 0x0000)
struct BP_SpikeLogEjector_C_InteractSucceed final
{
public:
	class AActor*                                 Interacter;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           StateTag;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TriggerTag;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0018(0x00E8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_SpikeLogEjector_C_InteractSucceed) == 0x000008, "Wrong alignment on BP_SpikeLogEjector_C_InteractSucceed");
static_assert(sizeof(BP_SpikeLogEjector_C_InteractSucceed) == 0x000100, "Wrong size on BP_SpikeLogEjector_C_InteractSucceed");
static_assert(offsetof(BP_SpikeLogEjector_C_InteractSucceed, Interacter) == 0x000000, "Member 'BP_SpikeLogEjector_C_InteractSucceed::Interacter' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_InteractSucceed, StateTag) == 0x000008, "Member 'BP_SpikeLogEjector_C_InteractSucceed::StateTag' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_InteractSucceed, TriggerTag) == 0x000010, "Member 'BP_SpikeLogEjector_C_InteractSucceed::TriggerTag' has a wrong offset!");
static_assert(offsetof(BP_SpikeLogEjector_C_InteractSucceed, HitResult) == 0x000018, "Member 'BP_SpikeLogEjector_C_InteractSucceed::HitResult' has a wrong offset!");

}

