#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_DeathBeetle_CircleMove

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GA_MonsterGameplayAbilityBase_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_DeathBeetle_CircleMove.GA_DeathBeetle_CircleMove_C
// 0x0050 (0x0618 - 0x05C8)
class UGA_DeathBeetle_CircleMove_C final : public UGA_MonsterGameplayAbilityBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        LimitedSeconds;                                    // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_DCMonsterBaseWithOptions_C*         Controlled_Pawn;                                   // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ADCCharacterBase*                       TargetActor;                                       // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Time;                                              // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Direction;                                         // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CE4[0x7];                                     // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CircleMove_TimerHandle;                            // 0x05F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction_Vector;                                  // 0x0600(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AbilityActivated(const struct FGameplayEventData& TriggerEventData);
	void CircleMoveFromEnemy();
	void ExecuteUbergraph_GA_DeathBeetle_CircleMove(int32 EntryPoint);
	void K2_OnEndAbility(bool bWasCancelled);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_DeathBeetle_CircleMove_C">();
	}
	static class UGA_DeathBeetle_CircleMove_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_DeathBeetle_CircleMove_C>();
	}
};
static_assert(alignof(UGA_DeathBeetle_CircleMove_C) == 0x000008, "Wrong alignment on UGA_DeathBeetle_CircleMove_C");
static_assert(sizeof(UGA_DeathBeetle_CircleMove_C) == 0x000618, "Wrong size on UGA_DeathBeetle_CircleMove_C");
static_assert(offsetof(UGA_DeathBeetle_CircleMove_C, UberGraphFrame) == 0x0005C8, "Member 'UGA_DeathBeetle_CircleMove_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_DeathBeetle_CircleMove_C, LimitedSeconds) == 0x0005D0, "Member 'UGA_DeathBeetle_CircleMove_C::LimitedSeconds' has a wrong offset!");
static_assert(offsetof(UGA_DeathBeetle_CircleMove_C, Controlled_Pawn) == 0x0005D8, "Member 'UGA_DeathBeetle_CircleMove_C::Controlled_Pawn' has a wrong offset!");
static_assert(offsetof(UGA_DeathBeetle_CircleMove_C, TargetActor) == 0x0005E0, "Member 'UGA_DeathBeetle_CircleMove_C::TargetActor' has a wrong offset!");
static_assert(offsetof(UGA_DeathBeetle_CircleMove_C, Time) == 0x0005E8, "Member 'UGA_DeathBeetle_CircleMove_C::Time' has a wrong offset!");
static_assert(offsetof(UGA_DeathBeetle_CircleMove_C, Direction) == 0x0005F0, "Member 'UGA_DeathBeetle_CircleMove_C::Direction' has a wrong offset!");
static_assert(offsetof(UGA_DeathBeetle_CircleMove_C, CircleMove_TimerHandle) == 0x0005F8, "Member 'UGA_DeathBeetle_CircleMove_C::CircleMove_TimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_DeathBeetle_CircleMove_C, Direction_Vector) == 0x000600, "Member 'UGA_DeathBeetle_CircleMove_C::Direction_Vector' has a wrong offset!");

}

