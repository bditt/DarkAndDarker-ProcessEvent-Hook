#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Judgement

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GA_PlayerSkillCast_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Judgement.GA_Judgement_C
// 0x0048 (0x0800 - 0x07B8)
class UGA_Judgement_C final : public UGA_PlayerSkillCast_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AActor*                                 Target;                                            // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   TargetEmptyMessage;                                // 0x07C8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   TargetOutRangeMessage;                             // 0x07E0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          PrevCheckInvisible;                                // 0x07F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AfterCheckInvisible;                               // 0x07F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AbilityActivated(const struct FGameplayEventData& TriggerEventData);
	void BroadcastSystemMessage(const class FText& SystemMessage);
	void ExecuteUbergraph_GA_Judgement(int32 EntryPoint);
	void GetAimTraceTarget(double MaxRange, bool* Result);
	void IsTargetOutOfRange(bool* Result);
	void ServerOnSkillActivate(const struct FGameplayTag& SkillTag, const struct FGameplayTag& CooldownTag);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Judgement_C">();
	}
	static class UGA_Judgement_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Judgement_C>();
	}
};
static_assert(alignof(UGA_Judgement_C) == 0x000008, "Wrong alignment on UGA_Judgement_C");
static_assert(sizeof(UGA_Judgement_C) == 0x000800, "Wrong size on UGA_Judgement_C");
static_assert(offsetof(UGA_Judgement_C, UberGraphFrame) == 0x0007B8, "Member 'UGA_Judgement_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Judgement_C, Target) == 0x0007C0, "Member 'UGA_Judgement_C::Target' has a wrong offset!");
static_assert(offsetof(UGA_Judgement_C, TargetEmptyMessage) == 0x0007C8, "Member 'UGA_Judgement_C::TargetEmptyMessage' has a wrong offset!");
static_assert(offsetof(UGA_Judgement_C, TargetOutRangeMessage) == 0x0007E0, "Member 'UGA_Judgement_C::TargetOutRangeMessage' has a wrong offset!");
static_assert(offsetof(UGA_Judgement_C, PrevCheckInvisible) == 0x0007F8, "Member 'UGA_Judgement_C::PrevCheckInvisible' has a wrong offset!");
static_assert(offsetof(UGA_Judgement_C, AfterCheckInvisible) == 0x0007F9, "Member 'UGA_Judgement_C::AfterCheckInvisible' has a wrong offset!");

}

