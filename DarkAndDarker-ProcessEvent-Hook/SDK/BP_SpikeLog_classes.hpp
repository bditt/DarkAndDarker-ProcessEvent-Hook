#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpikeLog

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DungeonCrawler_structs.hpp"
#include "BP_TrapBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SpikeLog.BP_SpikeLog_C
// 0x0030 (0x05A8 - 0x0578)
class ABP_SpikeLog_C final : public ABP_TrapBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_SpikeLog_C;                      // 0x0578(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCapsuleComponent*                      Capsule;                                           // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_SpikeLogEjector_C*                  Ejector;                                           // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FDCSpikeLogAnimationData               SpikeLogAnimationData;                             // 0x0590(0x0014)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor)
	bool                                          bIsInitialized;                                    // 0x05A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActiveSpikeLog(const struct FDCSpikeLogAnimationData& Param_SpikeLogAnimationData, class ABP_SpikeLogEjector_C* Param_Ejector);
	void ExecuteUbergraph_BP_SpikeLog(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void OnActiveSpikeLog();
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SpikeLog_C">();
	}
	static class ABP_SpikeLog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SpikeLog_C>();
	}
};
static_assert(alignof(ABP_SpikeLog_C) == 0x000008, "Wrong alignment on ABP_SpikeLog_C");
static_assert(sizeof(ABP_SpikeLog_C) == 0x0005A8, "Wrong size on ABP_SpikeLog_C");
static_assert(offsetof(ABP_SpikeLog_C, UberGraphFrame_BP_SpikeLog_C) == 0x000578, "Member 'ABP_SpikeLog_C::UberGraphFrame_BP_SpikeLog_C' has a wrong offset!");
static_assert(offsetof(ABP_SpikeLog_C, Capsule) == 0x000580, "Member 'ABP_SpikeLog_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_SpikeLog_C, Ejector) == 0x000588, "Member 'ABP_SpikeLog_C::Ejector' has a wrong offset!");
static_assert(offsetof(ABP_SpikeLog_C, SpikeLogAnimationData) == 0x000590, "Member 'ABP_SpikeLog_C::SpikeLogAnimationData' has a wrong offset!");
static_assert(offsetof(ABP_SpikeLog_C, bIsInitialized) == 0x0005A4, "Member 'ABP_SpikeLog_C::bIsInitialized' has a wrong offset!");

}

