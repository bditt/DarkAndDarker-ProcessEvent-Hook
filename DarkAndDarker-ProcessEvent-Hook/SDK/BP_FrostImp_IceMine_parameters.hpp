#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FrostImp_IceMine

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function BP_FrostImp_IceMine.BP_FrostImp_IceMine_C.AddBeginOverlapActor
// 0x0008 (0x0008 - 0x0000)
struct BP_FrostImp_IceMine_C_AddBeginOverlapActor final
{
public:
	class ADCCharacterBase*                       CharacterBase;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FrostImp_IceMine_C_AddBeginOverlapActor) == 0x000008, "Wrong alignment on BP_FrostImp_IceMine_C_AddBeginOverlapActor");
static_assert(sizeof(BP_FrostImp_IceMine_C_AddBeginOverlapActor) == 0x000008, "Wrong size on BP_FrostImp_IceMine_C_AddBeginOverlapActor");
static_assert(offsetof(BP_FrostImp_IceMine_C_AddBeginOverlapActor, CharacterBase) == 0x000000, "Member 'BP_FrostImp_IceMine_C_AddBeginOverlapActor::CharacterBase' has a wrong offset!");

// Function BP_FrostImp_IceMine.BP_FrostImp_IceMine_C.ExecuteUbergraph_BP_FrostImp_IceMine
// 0x0100 (0x0100 - 0x0000)
struct BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C3F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADCCharacterBase*                       K2Node_Event_CharacterBase;                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 CallFunc_MakeGameplayCueParameters_ReturnValue;    // 0x0010(0x00D8)(ContainsInstancedReference)
	class ABP_DCMonsterBaseWithOptions_C*         K2Node_DynamicCast_AsBP_DCMonster_Base_with_Options; // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C40[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADCCharacterBase*                       K2Node_Event_Input_Pin;                            // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine) == 0x000008, "Wrong alignment on BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine");
static_assert(sizeof(BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine) == 0x000100, "Wrong size on BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine");
static_assert(offsetof(BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine, EntryPoint) == 0x000000, "Member 'BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine, K2Node_Event_CharacterBase) == 0x000008, "Member 'BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine::K2Node_Event_CharacterBase' has a wrong offset!");
static_assert(offsetof(BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine, CallFunc_MakeGameplayCueParameters_ReturnValue) == 0x000010, "Member 'BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine::CallFunc_MakeGameplayCueParameters_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine, K2Node_DynamicCast_AsBP_DCMonster_Base_with_Options) == 0x0000E8, "Member 'BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine::K2Node_DynamicCast_AsBP_DCMonster_Base_with_Options' has a wrong offset!");
static_assert(offsetof(BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine, K2Node_DynamicCast_bSuccess) == 0x0000F0, "Member 'BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine, K2Node_Event_Input_Pin) == 0x0000F8, "Member 'BP_FrostImp_IceMine_C_ExecuteUbergraph_BP_FrostImp_IceMine::K2Node_Event_Input_Pin' has a wrong offset!");

// Function BP_FrostImp_IceMine.BP_FrostImp_IceMine_C.Trigger
// 0x0008 (0x0008 - 0x0000)
struct BP_FrostImp_IceMine_C_Trigger final
{
public:
	class ADCCharacterBase*                       Input_Pin;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FrostImp_IceMine_C_Trigger) == 0x000008, "Wrong alignment on BP_FrostImp_IceMine_C_Trigger");
static_assert(sizeof(BP_FrostImp_IceMine_C_Trigger) == 0x000008, "Wrong size on BP_FrostImp_IceMine_C_Trigger");
static_assert(offsetof(BP_FrostImp_IceMine_C_Trigger, Input_Pin) == 0x000000, "Member 'BP_FrostImp_IceMine_C_Trigger::Input_Pin' has a wrong offset!");

}

