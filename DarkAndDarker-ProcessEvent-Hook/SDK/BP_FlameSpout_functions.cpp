#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FlameSpout

#include "Basic.hpp"

#include "BP_FlameSpout_classes.hpp"
#include "BP_FlameSpout_parameters.hpp"


namespace SDK
{

// Function BP_FlameSpout.BP_FlameSpout_C.Activate
// (BlueprintCallable, BlueprintEvent)

void ABP_FlameSpout_C::Activate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameSpout_C", "Activate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FlameSpout.BP_FlameSpout_C.EventMsgSound
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMsgSoundEvent                   InMsg                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_FlameSpout_C::EventMsgSound(const struct FMsgSoundEvent& InMsg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameSpout_C", "EventMsgSound");

	Params::BP_FlameSpout_C_EventMsgSound Parms{};

	Parms.InMsg = std::move(InMsg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameSpout.BP_FlameSpout_C.ExecuteUbergraph_BP_FlameSpout
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FlameSpout_C::ExecuteUbergraph_BP_FlameSpout(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameSpout_C", "ExecuteUbergraph_BP_FlameSpout");

	Params::BP_FlameSpout_C_ExecuteUbergraph_BP_FlameSpout Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameSpout.BP_FlameSpout_C.GameplayTagUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     InGameplayTag                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   InCount                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FlameSpout_C::GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameSpout_C", "GameplayTagUpdated");

	Params::BP_FlameSpout_C_GameplayTagUpdated Parms{};

	Parms.InGameplayTag = std::move(InGameplayTag);
	Parms.InCount = InCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameSpout.BP_FlameSpout_C.GetActivateTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FlameSpout_C::GetActivateTime(double* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameSpout_C", "GetActivateTime");

	Params::BP_FlameSpout_C_GetActivateTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_FlameSpout.BP_FlameSpout_C.GetDeactivateTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FlameSpout_C::GetDeactivateTime(double* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameSpout_C", "GetDeactivateTime");

	Params::BP_FlameSpout_C_GetDeactivateTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_FlameSpout.BP_FlameSpout_C.InteractSucceed
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           Interacter                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     StateTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     TriggerTag                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_FlameSpout_C::InteractSucceed(class AActor* Interacter, const struct FGameplayTag& StateTag, const struct FGameplayTag& TriggerTag, const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameSpout_C", "InteractSucceed");

	Params::BP_FlameSpout_C_InteractSucceed Parms{};

	Parms.Interacter = Interacter;
	Parms.StateTag = std::move(StateTag);
	Parms.TriggerTag = std::move(TriggerTag);
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameSpout.BP_FlameSpout_C.OnTrapActivate
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FlameSpout_C::OnTrapActivate(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameSpout_C", "OnTrapActivate");

	Params::BP_FlameSpout_C_OnTrapActivate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_FlameSpout.BP_FlameSpout_C.OnTrapDeactivate
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FlameSpout_C::OnTrapDeactivate(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameSpout_C", "OnTrapDeactivate");

	Params::BP_FlameSpout_C_OnTrapDeactivate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_FlameSpout.BP_FlameSpout_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_FlameSpout_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameSpout_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FlameSpout.BP_FlameSpout_C.ReceivePreInitializeComponents
// (Event, Protected, BlueprintEvent)

void ABP_FlameSpout_C::ReceivePreInitializeComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameSpout_C", "ReceivePreInitializeComponents");

	UObject::ProcessEvent(Func, nullptr);
}

}

