#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Lich

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ABP_Lich_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "DungeonCrawler_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Lich.ABP_Lich_C
// 0x0930 (0x0E60 - 0x0530)
class UABP_Lich_C final : public UDCMonsterAnimInstanceBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_Lich::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0538(0x0014)(HasGetValueTypeHash)
	uint8                                         Pad_48B2[0x4];                                     // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0550(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0558(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0560(0x0020)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0580(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x05C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x05F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0618(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0640(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0668(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0690(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x06D8(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x06F8(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0768(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0788(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x07F8(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x0818(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x08E0(0x0080)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0960(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0988(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x09B0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x09D8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0A00(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0A28(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x0A70(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x0A98(0x00F0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0B88(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0BA8(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0BF0(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0C18(0x00F0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0D08(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0D28(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0D50(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0D70(0x00C8)()
	bool                                          Combat;                                            // 0x0E38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48B3[0x7];                                     // 0x0E39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle;                                       // 0x0E40(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ADCCharacterBase*>               Target_Array;                                      // 0x0E48(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void ExecuteUbergraph_ABP_Lich(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Lich_C">();
	}
	static class UABP_Lich_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Lich_C>();
	}
};
static_assert(alignof(UABP_Lich_C) == 0x000010, "Wrong alignment on UABP_Lich_C");
static_assert(sizeof(UABP_Lich_C) == 0x000E60, "Wrong size on UABP_Lich_C");
static_assert(offsetof(UABP_Lich_C, UberGraphFrame) == 0x000530, "Member 'UABP_Lich_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, __AnimBlueprintMutables) == 0x000538, "Member 'UABP_Lich_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimBlueprintExtension_PropertyAccess) == 0x000550, "Member 'UABP_Lich_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimBlueprintExtension_Base) == 0x000558, "Member 'UABP_Lich_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_Root) == 0x000560, "Member 'UABP_Lich_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_Slot) == 0x000580, "Member 'UABP_Lich_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_TransitionResult_9) == 0x0005C8, "Member 'UABP_Lich_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_TransitionResult_8) == 0x0005F0, "Member 'UABP_Lich_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_TransitionResult_7) == 0x000618, "Member 'UABP_Lich_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_TransitionResult_6) == 0x000640, "Member 'UABP_Lich_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_TransitionResult_5) == 0x000668, "Member 'UABP_Lich_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_SequencePlayer_2) == 0x000690, "Member 'UABP_Lich_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_StateResult_5) == 0x0006D8, "Member 'UABP_Lich_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_BlendSpacePlayer_1) == 0x0006F8, "Member 'UABP_Lich_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_StateResult_4) == 0x000768, "Member 'UABP_Lich_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_BlendSpacePlayer) == 0x000788, "Member 'UABP_Lich_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_StateResult_3) == 0x0007F8, "Member 'UABP_Lich_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_StateMachine_1) == 0x000818, "Member 'UABP_Lich_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_SaveCachedPose) == 0x0008E0, "Member 'UABP_Lich_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_TransitionResult_4) == 0x000960, "Member 'UABP_Lich_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_TransitionResult_3) == 0x000988, "Member 'UABP_Lich_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_TransitionResult_2) == 0x0009B0, "Member 'UABP_Lich_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_TransitionResult_1) == 0x0009D8, "Member 'UABP_Lich_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_TransitionResult) == 0x000A00, "Member 'UABP_Lich_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_SequencePlayer_1) == 0x000A28, "Member 'UABP_Lich_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_UseCachedPose_2) == 0x000A70, "Member 'UABP_Lich_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_LayeredBoneBlend_1) == 0x000A98, "Member 'UABP_Lich_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_StateResult_2) == 0x000B88, "Member 'UABP_Lich_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_SequencePlayer) == 0x000BA8, "Member 'UABP_Lich_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_UseCachedPose_1) == 0x000BF0, "Member 'UABP_Lich_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_LayeredBoneBlend) == 0x000C18, "Member 'UABP_Lich_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_StateResult_1) == 0x000D08, "Member 'UABP_Lich_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_UseCachedPose) == 0x000D28, "Member 'UABP_Lich_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_StateResult) == 0x000D50, "Member 'UABP_Lich_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, AnimGraphNode_StateMachine) == 0x000D70, "Member 'UABP_Lich_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, Combat) == 0x000E38, "Member 'UABP_Lich_C::Combat' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, TimerHandle) == 0x000E40, "Member 'UABP_Lich_C::TimerHandle' has a wrong offset!");
static_assert(offsetof(UABP_Lich_C, Target_Array) == 0x000E48, "Member 'UABP_Lich_C::Target_Array' has a wrong offset!");

}

