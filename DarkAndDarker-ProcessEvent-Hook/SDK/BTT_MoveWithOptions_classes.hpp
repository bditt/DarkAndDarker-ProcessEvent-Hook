#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_MoveWithOptions

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_TargetTypeToMove_structs.hpp"
#include "DungeonCrawler_structs.hpp"
#include "DungeonCrawler_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_MoveWithOptions.BTT_MoveWithOptions_C
// 0x0108 (0x01B0 - 0x00A8)
class UBTT_MoveWithOptions_C final : public UBTT_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        Acceptance_Radius;                                 // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StopTime;                                          // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TargetTypeToMove                            DestinationType;                                   // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A71[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DestAngle;                                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DestDistance;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitBoxType                                   HitBoxType;                                        // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A72[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CheckEnemyTick;                                    // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetActor;                                       // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetLocation;                                    // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BlackBoardDistance;                                // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          Owner_Controller;                                  // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Controlled_Pawn;                                   // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_DCMonsterBaseWithOptions_C*         As_BP_DCMonster_Base;                              // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Destination;                                       // 0x0118(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxDistance_RandomMove;                            // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CheckEnemyDistance;                                // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ADCCharacterBase*>               TargetArray;                                       // 0x0140(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FTimerHandle                           TimerHandleNearEnemy;                              // 0x0150(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandleFollowUnRechableTarget;                 // 0x0158(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandleInvisibleTarget;                        // 0x0160(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ValidTargetActor;                                  // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reachable;                                         // 0x0171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A73[0x6];                                     // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityAsync_WaitGameplayEvent*        Wait_Death_Async_Action;                           // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Prev_Location;                                     // 0x0180(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityAsync_WaitGameplayTagAdded*     Wait_Playing_Tag_Async_Action;                     // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Stuck_Counting;                            // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_Stuck_Count;                                   // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Find_ExitStuck_Area_Radius;                        // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Added_641316AF4C48A92112164AAE84243D79();
	void Check_Caster_Is_Playing_Animation(bool* Param_Result);
	void Check_Invisible_Target();
	void Check_Stuck();
	void CheckDestinationValid();
	void CheckNearEnemies();
	void CheckStopTime();
	void ClearVariables();
	void EventReceived_CB08A86943F251B5D4DD73871182C746(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_BTT_MoveWithOptions(int32 EntryPoint);
	void FollowUnRechableTarget();
	void OnFail_06B3D6954D31FD4292F8D68D097E190F(EPathFollowingResult MovementResult);
	void OnFail_2202D91745600789AE05F59B41DB99AF(EPathFollowingResult MovementResult);
	void OnFail_4212524D431777D7D0ABCB86B13DACF3(EPathFollowingResult MovementResult);
	void OnFail_4BC9A0AB4F88C9DFF7B2AC89B97FEC01(EPathFollowingResult MovementResult);
	void OnFail_C95BBC0447ADD362FE1D7095E9E15247(EPathFollowingResult MovementResult);
	void OnSuccess_06B3D6954D31FD4292F8D68D097E190F(EPathFollowingResult MovementResult);
	void OnSuccess_2202D91745600789AE05F59B41DB99AF(EPathFollowingResult MovementResult);
	void OnSuccess_4212524D431777D7D0ABCB86B13DACF3(EPathFollowingResult MovementResult);
	void OnSuccess_4BC9A0AB4F88C9DFF7B2AC89B97FEC01(EPathFollowingResult MovementResult);
	void OnSuccess_C95BBC0447ADD362FE1D7095E9E15247(EPathFollowingResult MovementResult);
	void OnTaskFinished(class AAIController* OwnerController, class APawn* ControlledPawn, EBTNodeResult TaskResult);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void SetDestination(bool* Param_Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_MoveWithOptions_C">();
	}
	static class UBTT_MoveWithOptions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_MoveWithOptions_C>();
	}
};
static_assert(alignof(UBTT_MoveWithOptions_C) == 0x000008, "Wrong alignment on UBTT_MoveWithOptions_C");
static_assert(sizeof(UBTT_MoveWithOptions_C) == 0x0001B0, "Wrong size on UBTT_MoveWithOptions_C");
static_assert(offsetof(UBTT_MoveWithOptions_C, UberGraphFrame) == 0x0000A8, "Member 'UBTT_MoveWithOptions_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, Acceptance_Radius) == 0x0000B0, "Member 'UBTT_MoveWithOptions_C::Acceptance_Radius' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, StopTime) == 0x0000B8, "Member 'UBTT_MoveWithOptions_C::StopTime' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, DestinationType) == 0x0000C0, "Member 'UBTT_MoveWithOptions_C::DestinationType' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, DestAngle) == 0x0000C8, "Member 'UBTT_MoveWithOptions_C::DestAngle' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, DestDistance) == 0x0000D0, "Member 'UBTT_MoveWithOptions_C::DestDistance' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, HitBoxType) == 0x0000D8, "Member 'UBTT_MoveWithOptions_C::HitBoxType' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, CheckEnemyTick) == 0x0000E0, "Member 'UBTT_MoveWithOptions_C::CheckEnemyTick' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, TargetActor) == 0x0000E8, "Member 'UBTT_MoveWithOptions_C::TargetActor' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, TargetLocation) == 0x0000F0, "Member 'UBTT_MoveWithOptions_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, BlackBoardDistance) == 0x0000F8, "Member 'UBTT_MoveWithOptions_C::BlackBoardDistance' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, Owner_Controller) == 0x000100, "Member 'UBTT_MoveWithOptions_C::Owner_Controller' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, Controlled_Pawn) == 0x000108, "Member 'UBTT_MoveWithOptions_C::Controlled_Pawn' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, As_BP_DCMonster_Base) == 0x000110, "Member 'UBTT_MoveWithOptions_C::As_BP_DCMonster_Base' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, Destination) == 0x000118, "Member 'UBTT_MoveWithOptions_C::Destination' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, MaxDistance_RandomMove) == 0x000130, "Member 'UBTT_MoveWithOptions_C::MaxDistance_RandomMove' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, CheckEnemyDistance) == 0x000138, "Member 'UBTT_MoveWithOptions_C::CheckEnemyDistance' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, TargetArray) == 0x000140, "Member 'UBTT_MoveWithOptions_C::TargetArray' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, TimerHandleNearEnemy) == 0x000150, "Member 'UBTT_MoveWithOptions_C::TimerHandleNearEnemy' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, TimerHandleFollowUnRechableTarget) == 0x000158, "Member 'UBTT_MoveWithOptions_C::TimerHandleFollowUnRechableTarget' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, TimerHandleInvisibleTarget) == 0x000160, "Member 'UBTT_MoveWithOptions_C::TimerHandleInvisibleTarget' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, ValidTargetActor) == 0x000168, "Member 'UBTT_MoveWithOptions_C::ValidTargetActor' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, Result) == 0x000170, "Member 'UBTT_MoveWithOptions_C::Result' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, Reachable) == 0x000171, "Member 'UBTT_MoveWithOptions_C::Reachable' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, Wait_Death_Async_Action) == 0x000178, "Member 'UBTT_MoveWithOptions_C::Wait_Death_Async_Action' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, Prev_Location) == 0x000180, "Member 'UBTT_MoveWithOptions_C::Prev_Location' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, Wait_Playing_Tag_Async_Action) == 0x000198, "Member 'UBTT_MoveWithOptions_C::Wait_Playing_Tag_Async_Action' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, Current_Stuck_Counting) == 0x0001A0, "Member 'UBTT_MoveWithOptions_C::Current_Stuck_Counting' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, Max_Stuck_Count) == 0x0001A4, "Member 'UBTT_MoveWithOptions_C::Max_Stuck_Count' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_C, Find_ExitStuck_Area_Radius) == 0x0001A8, "Member 'UBTT_MoveWithOptions_C::Find_ExitStuck_Area_Radius' has a wrong offset!");

}

