#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_IceKoboldAxeman

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ABP_IceKoboldAxeman_structs.hpp"
#include "KawaiiPhysics_structs.hpp"
#include "DungeonCrawler_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_IceKoboldAxeman.ABP_IceKoboldAxeman_C
// 0x23D0 (0x2900 - 0x0530)
class UABP_IceKoboldAxeman_C final : public UDCMonsterAnimInstanceBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_IceKoboldAxeman::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0538(0x000C)(HasGetValueTypeHash)
	uint8                                         Pad_4607[0x4];                                     // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0548(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0550(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0558(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x0578(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x05A0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x05C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x05F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0618(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0640(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_6;                     // 0x0688(0x0028)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x06B0(0x00C8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x0778(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x07A0(0x00F0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x0890(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x08B0(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x08F8(0x0028)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x0920(0x00C8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x09E8(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0A10(0x00F0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0B00(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x0B20(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0B48(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x0B68(0x00C8)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0C30(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0C58(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0C80(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0CA8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0CD0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0CF8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0D20(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0D68(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0D88(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0DD0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0DF0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0E38(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0E58(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0EC8(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0EE8(0x00C8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0FB0(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x0FF8(0x0080)()
	uint8                                         Pad_4608[0x8];                                     // 0x1078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_2;                     // 0x1080(0x07A0)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_1;                     // 0x1820(0x07A0)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics;                       // 0x1FC0(0x07A0)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x2760(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x2780(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x27A0(0x0028)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x27C8(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x2848(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x2870(0x0048)()
	int32                                         Dead_index;                                        // 0x28B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDeadIndex1;                                     // 0x28BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDeadIndex2;                                     // 0x28BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDeadIndex3;                                     // 0x28BE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          On_Combat;                                         // 0x28BF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDeathCurveLarge;                                // 0x28C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4609[0x3];                                     // 0x28C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKawaiiPhysicsSettings                 Kawaii_Physics_Settings_Ponytail;                  // 0x28C4(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKawaiiPhysicsSettings                 Kawaii_Physics_Settings_Ear;                       // 0x28DC(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void ExecuteUbergraph_ABP_IceKoboldAxeman(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_IceKoboldAxeman_C">();
	}
	static class UABP_IceKoboldAxeman_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_IceKoboldAxeman_C>();
	}
};
static_assert(alignof(UABP_IceKoboldAxeman_C) == 0x000010, "Wrong alignment on UABP_IceKoboldAxeman_C");
static_assert(sizeof(UABP_IceKoboldAxeman_C) == 0x002900, "Wrong size on UABP_IceKoboldAxeman_C");
static_assert(offsetof(UABP_IceKoboldAxeman_C, UberGraphFrame) == 0x000530, "Member 'UABP_IceKoboldAxeman_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, __AnimBlueprintMutables) == 0x000538, "Member 'UABP_IceKoboldAxeman_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimBlueprintExtension_PropertyAccess) == 0x000548, "Member 'UABP_IceKoboldAxeman_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimBlueprintExtension_Base) == 0x000550, "Member 'UABP_IceKoboldAxeman_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_Root) == 0x000558, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_TransitionResult_10) == 0x000578, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_TransitionResult_9) == 0x0005A0, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_TransitionResult_8) == 0x0005C8, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_TransitionResult_7) == 0x0005F0, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_TransitionResult_6) == 0x000618, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_SequencePlayer_4) == 0x000640, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_UseCachedPose_6) == 0x000688, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_UseCachedPose_6' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_ApplyAdditive_1) == 0x0006B0, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_UseCachedPose_5) == 0x000778, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_LayeredBoneBlend_1) == 0x0007A0, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_StateResult_6) == 0x000890, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_SequencePlayer_3) == 0x0008B0, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_UseCachedPose_4) == 0x0008F8, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_ApplyAdditive) == 0x000920, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_UseCachedPose_3) == 0x0009E8, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_LayeredBoneBlend) == 0x000A10, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_StateResult_5) == 0x000B00, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_UseCachedPose_2) == 0x000B20, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_StateResult_4) == 0x000B48, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_StateMachine_1) == 0x000B68, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_TransitionResult_5) == 0x000C30, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_TransitionResult_4) == 0x000C58, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_TransitionResult_3) == 0x000C80, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_TransitionResult_2) == 0x000CA8, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_TransitionResult_1) == 0x000CD0, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_TransitionResult) == 0x000CF8, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_SequencePlayer_2) == 0x000D20, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_StateResult_3) == 0x000D68, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_SequencePlayer_1) == 0x000D88, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_StateResult_2) == 0x000DD0, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_SequencePlayer) == 0x000DF0, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_StateResult_1) == 0x000E38, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_BlendSpacePlayer) == 0x000E58, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_StateResult) == 0x000EC8, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_StateMachine) == 0x000EE8, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_Slot) == 0x000FB0, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_SaveCachedPose_1) == 0x000FF8, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_KawaiiPhysics_2) == 0x001080, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_KawaiiPhysics_2' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_KawaiiPhysics_1) == 0x001820, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_KawaiiPhysics_1' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_KawaiiPhysics) == 0x001FC0, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_KawaiiPhysics' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_LocalToComponentSpace) == 0x002760, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_ComponentToLocalSpace) == 0x002780, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_UseCachedPose_1) == 0x0027A0, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_SaveCachedPose) == 0x0027C8, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_UseCachedPose) == 0x002848, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, AnimGraphNode_BlendListByBool) == 0x002870, "Member 'UABP_IceKoboldAxeman_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, Dead_index) == 0x0028B8, "Member 'UABP_IceKoboldAxeman_C::Dead_index' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, bIsDeadIndex1) == 0x0028BC, "Member 'UABP_IceKoboldAxeman_C::bIsDeadIndex1' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, bIsDeadIndex2) == 0x0028BD, "Member 'UABP_IceKoboldAxeman_C::bIsDeadIndex2' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, bIsDeadIndex3) == 0x0028BE, "Member 'UABP_IceKoboldAxeman_C::bIsDeadIndex3' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, On_Combat) == 0x0028BF, "Member 'UABP_IceKoboldAxeman_C::On_Combat' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, bIsDeathCurveLarge) == 0x0028C0, "Member 'UABP_IceKoboldAxeman_C::bIsDeathCurveLarge' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, Kawaii_Physics_Settings_Ponytail) == 0x0028C4, "Member 'UABP_IceKoboldAxeman_C::Kawaii_Physics_Settings_Ponytail' has a wrong offset!");
static_assert(offsetof(UABP_IceKoboldAxeman_C, Kawaii_Physics_Settings_Ear) == 0x0028DC, "Member 'UABP_IceKoboldAxeman_C::Kawaii_Physics_Settings_Ear' has a wrong offset!");

}

