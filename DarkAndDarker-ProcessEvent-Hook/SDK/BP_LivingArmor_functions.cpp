#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LivingArmor

#include "Basic.hpp"

#include "BP_LivingArmor_classes.hpp"
#include "BP_LivingArmor_parameters.hpp"


namespace SDK
{

// Function BP_LivingArmor.BP_LivingArmor_C.Add Combo Count
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LivingArmor_C::Add_Combo_Count()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LivingArmor_C", "Add Combo Count");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LivingArmor.BP_LivingArmor_C.ExecuteUbergraph_BP_LivingArmor
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LivingArmor_C::ExecuteUbergraph_BP_LivingArmor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LivingArmor_C", "ExecuteUbergraph_BP_LivingArmor");

	Params::BP_LivingArmor_C_ExecuteUbergraph_BP_LivingArmor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LivingArmor.BP_LivingArmor_C.GameplayTagUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     InGameplayTag                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   InCount                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LivingArmor_C::GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LivingArmor_C", "GameplayTagUpdated");

	Params::BP_LivingArmor_C_GameplayTagUpdated Parms{};

	Parms.InGameplayTag = std::move(InGameplayTag);
	Parms.InCount = InCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LivingArmor.BP_LivingArmor_C.Get Next Combo Possibility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           LivingArmor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LivingArmor_C::Get_Next_Combo_Possibility(class AActor* InActor, class AActor* LivingArmor, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LivingArmor_C", "Get Next Combo Possibility");

	Params::BP_LivingArmor_C_Get_Next_Combo_Possibility Parms{};

	Parms.InActor = InActor;
	Parms.LivingArmor = LivingArmor;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_LivingArmor.BP_LivingArmor_C.OnAsyncInitialized
// (Event, Protected, BlueprintEvent)

void ABP_LivingArmor_C::OnAsyncInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LivingArmor_C", "OnAsyncInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LivingArmor.BP_LivingArmor_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LivingArmor_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LivingArmor_C", "ReceiveTick");

	Params::BP_LivingArmor_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LivingArmor.BP_LivingArmor_C.Reset Combo Count
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LivingArmor_C::Reset_Combo_Count()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LivingArmor_C", "Reset Combo Count");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LivingArmor.BP_LivingArmor_C.TargeNotLookingLivingArmor
// (BlueprintCallable, BlueprintEvent)

void ABP_LivingArmor_C::TargeNotLookingLivingArmor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LivingArmor_C", "TargeNotLookingLivingArmor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LivingArmor.BP_LivingArmor_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_LivingArmor_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LivingArmor_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

