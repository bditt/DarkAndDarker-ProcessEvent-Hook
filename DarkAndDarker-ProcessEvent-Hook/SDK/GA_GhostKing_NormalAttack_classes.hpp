#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_GhostKing_NormalAttack

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "DungeonCrawler_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_GhostKing_NormalAttack.GA_GhostKing_NormalAttack_C
// 0x0080 (0x07D8 - 0x0758)
class UGA_GhostKing_NormalAttack_C final : public UGA_MonsterChargedRangedAttackBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0758(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_GhostKing_Common_C*                 As_BP_Ghost_King;                                  // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityTargetDataHandle       Payload_Target_Data;                               // 0x0768(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Start_Z_Rotation;                                  // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Random_Range;                                      // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rotate_Z_Angle;                                    // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Interval;                                          // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_Z_Rotation;                                   // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADCCharacterBase*                       As_DCCharacter_Base;                               // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRotator>                       Temp_Rotation_Array;                               // 0x07C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Temp_Index;                                        // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AbilityActivated(const struct FGameplayEventData& TriggerEventData);
	void CreateProjectiles(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData, float FirePower, const struct FVector& StartLocation);
	void EventReceived_442DA6E34A7324E0185013B9B8192AE7(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void EventReceived_808334F54FC668822F461982A5C1F828(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_GA_GhostKing_NormalAttack(int32 EntryPoint);
	void OnSuccess_C7A010454D363CFFE342A88C155A0B81(class AActor* ProjectileActor);
	void Set_Variables(const struct FGameplayEventData& Trigger_Event_Data);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_GhostKing_NormalAttack_C">();
	}
	static class UGA_GhostKing_NormalAttack_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_GhostKing_NormalAttack_C>();
	}
};
static_assert(alignof(UGA_GhostKing_NormalAttack_C) == 0x000008, "Wrong alignment on UGA_GhostKing_NormalAttack_C");
static_assert(sizeof(UGA_GhostKing_NormalAttack_C) == 0x0007D8, "Wrong size on UGA_GhostKing_NormalAttack_C");
static_assert(offsetof(UGA_GhostKing_NormalAttack_C, UberGraphFrame) == 0x000758, "Member 'UGA_GhostKing_NormalAttack_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_GhostKing_NormalAttack_C, As_BP_Ghost_King) == 0x000760, "Member 'UGA_GhostKing_NormalAttack_C::As_BP_Ghost_King' has a wrong offset!");
static_assert(offsetof(UGA_GhostKing_NormalAttack_C, Payload_Target_Data) == 0x000768, "Member 'UGA_GhostKing_NormalAttack_C::Payload_Target_Data' has a wrong offset!");
static_assert(offsetof(UGA_GhostKing_NormalAttack_C, Start_Z_Rotation) == 0x000790, "Member 'UGA_GhostKing_NormalAttack_C::Start_Z_Rotation' has a wrong offset!");
static_assert(offsetof(UGA_GhostKing_NormalAttack_C, Random_Range) == 0x000798, "Member 'UGA_GhostKing_NormalAttack_C::Random_Range' has a wrong offset!");
static_assert(offsetof(UGA_GhostKing_NormalAttack_C, Rotate_Z_Angle) == 0x0007A0, "Member 'UGA_GhostKing_NormalAttack_C::Rotate_Z_Angle' has a wrong offset!");
static_assert(offsetof(UGA_GhostKing_NormalAttack_C, Interval) == 0x0007A8, "Member 'UGA_GhostKing_NormalAttack_C::Interval' has a wrong offset!");
static_assert(offsetof(UGA_GhostKing_NormalAttack_C, Temp_Z_Rotation) == 0x0007B0, "Member 'UGA_GhostKing_NormalAttack_C::Temp_Z_Rotation' has a wrong offset!");
static_assert(offsetof(UGA_GhostKing_NormalAttack_C, As_DCCharacter_Base) == 0x0007B8, "Member 'UGA_GhostKing_NormalAttack_C::As_DCCharacter_Base' has a wrong offset!");
static_assert(offsetof(UGA_GhostKing_NormalAttack_C, Temp_Rotation_Array) == 0x0007C0, "Member 'UGA_GhostKing_NormalAttack_C::Temp_Rotation_Array' has a wrong offset!");
static_assert(offsetof(UGA_GhostKing_NormalAttack_C, Temp_Index) == 0x0007D0, "Member 'UGA_GhostKing_NormalAttack_C::Temp_Index' has a wrong offset!");

}

