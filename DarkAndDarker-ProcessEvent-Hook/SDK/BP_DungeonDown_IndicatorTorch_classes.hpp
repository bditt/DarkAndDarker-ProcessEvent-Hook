#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DungeonDown_IndicatorTorch

#include "Basic.hpp"

#include "BP_LightSource_ObjectLinkBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DungeonDown_IndicatorTorch.BP_DungeonDown_IndicatorTorch_C
// 0x0080 (0x05C0 - 0x0540)
class ABP_DungeonDown_IndicatorTorch_C final : public ABP_LightSource_ObjectLinkBase_C
{
public:
	class UNiagaraComponent*                      FXS_TorchFire_Red_001A;                            // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight1;                                       // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Iron_Nail3;                                     // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Iron_Nail2;                                     // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Silver_Ring3;                                   // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Silver_Ring2;                                   // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mechanism04;                                       // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere1;                                           // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh1;                                       // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Iron_Nail1;                                     // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Iron_Nail;                                      // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Silver_Ring1;                                   // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Silver_Ring;                                    // 0x05A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mechanism03;                                       // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    StairLight;                                        // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsOverlapped_0;                                   // 0x05B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void InteractTargetInfoName(class FText* Param_Name);
	void InteractTargetInfoRarity(struct FGameplayTag* RarityTag);
	void OnDungeonExitOverlapped(class ADCPlayerCharacterBase* PlayerCharacter, bool* bResult);
	void SetLightIntensity(double Value);
	void SetParticleActive(bool New_Active, bool Reset);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DungeonDown_IndicatorTorch_C">();
	}
	static class ABP_DungeonDown_IndicatorTorch_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DungeonDown_IndicatorTorch_C>();
	}
};
static_assert(alignof(ABP_DungeonDown_IndicatorTorch_C) == 0x000008, "Wrong alignment on ABP_DungeonDown_IndicatorTorch_C");
static_assert(sizeof(ABP_DungeonDown_IndicatorTorch_C) == 0x0005C0, "Wrong size on ABP_DungeonDown_IndicatorTorch_C");
static_assert(offsetof(ABP_DungeonDown_IndicatorTorch_C, FXS_TorchFire_Red_001A) == 0x000540, "Member 'ABP_DungeonDown_IndicatorTorch_C::FXS_TorchFire_Red_001A' has a wrong offset!");
static_assert(offsetof(ABP_DungeonDown_IndicatorTorch_C, PointLight1) == 0x000548, "Member 'ABP_DungeonDown_IndicatorTorch_C::PointLight1' has a wrong offset!");
static_assert(offsetof(ABP_DungeonDown_IndicatorTorch_C, SM_Iron_Nail3) == 0x000550, "Member 'ABP_DungeonDown_IndicatorTorch_C::SM_Iron_Nail3' has a wrong offset!");
static_assert(offsetof(ABP_DungeonDown_IndicatorTorch_C, SM_Iron_Nail2) == 0x000558, "Member 'ABP_DungeonDown_IndicatorTorch_C::SM_Iron_Nail2' has a wrong offset!");
static_assert(offsetof(ABP_DungeonDown_IndicatorTorch_C, SM_Silver_Ring3) == 0x000560, "Member 'ABP_DungeonDown_IndicatorTorch_C::SM_Silver_Ring3' has a wrong offset!");
static_assert(offsetof(ABP_DungeonDown_IndicatorTorch_C, SM_Silver_Ring2) == 0x000568, "Member 'ABP_DungeonDown_IndicatorTorch_C::SM_Silver_Ring2' has a wrong offset!");
static_assert(offsetof(ABP_DungeonDown_IndicatorTorch_C, Mechanism04) == 0x000570, "Member 'ABP_DungeonDown_IndicatorTorch_C::Mechanism04' has a wrong offset!");
static_assert(offsetof(ABP_DungeonDown_IndicatorTorch_C, Sphere1) == 0x000578, "Member 'ABP_DungeonDown_IndicatorTorch_C::Sphere1' has a wrong offset!");
static_assert(offsetof(ABP_DungeonDown_IndicatorTorch_C, StaticMesh1) == 0x000580, "Member 'ABP_DungeonDown_IndicatorTorch_C::StaticMesh1' has a wrong offset!");
static_assert(offsetof(ABP_DungeonDown_IndicatorTorch_C, SM_Iron_Nail1) == 0x000588, "Member 'ABP_DungeonDown_IndicatorTorch_C::SM_Iron_Nail1' has a wrong offset!");
static_assert(offsetof(ABP_DungeonDown_IndicatorTorch_C, SM_Iron_Nail) == 0x000590, "Member 'ABP_DungeonDown_IndicatorTorch_C::SM_Iron_Nail' has a wrong offset!");
static_assert(offsetof(ABP_DungeonDown_IndicatorTorch_C, SM_Silver_Ring1) == 0x000598, "Member 'ABP_DungeonDown_IndicatorTorch_C::SM_Silver_Ring1' has a wrong offset!");
static_assert(offsetof(ABP_DungeonDown_IndicatorTorch_C, SM_Silver_Ring) == 0x0005A0, "Member 'ABP_DungeonDown_IndicatorTorch_C::SM_Silver_Ring' has a wrong offset!");
static_assert(offsetof(ABP_DungeonDown_IndicatorTorch_C, Mechanism03) == 0x0005A8, "Member 'ABP_DungeonDown_IndicatorTorch_C::Mechanism03' has a wrong offset!");
static_assert(offsetof(ABP_DungeonDown_IndicatorTorch_C, StairLight) == 0x0005B0, "Member 'ABP_DungeonDown_IndicatorTorch_C::StairLight' has a wrong offset!");
static_assert(offsetof(ABP_DungeonDown_IndicatorTorch_C, bIsOverlapped_0) == 0x0005B8, "Member 'ABP_DungeonDown_IndicatorTorch_C::bIsOverlapped_0' has a wrong offset!");

}

