#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WallSpike

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_TrapBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WallSpike.BP_WallSpike_C
// 0x0050 (0x05C8 - 0x0578)
class ABP_WallSpike_C final : public ABP_TrapBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_WallSpike_C;                     // 0x0578(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ActiveBox;                                         // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActivate;                                        // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C0F[0x7];                                     // 0x0599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         In_Gameplay_Effect_Id_Array;                       // 0x05A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        ActiveDamagePreDelayTime;                          // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ActiveDurationTime;                                // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ActiveCoolTime;                                    // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_FloorSpikeTrap_ActiveBox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void EventFMsgSoundEvent(const struct FMsgSoundEvent& Msg);
	void ExecuteUbergraph_BP_WallSpike(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void InteractSucceed(class AActor* Interacter, const struct FGameplayTag& StateTag, const struct FGameplayTag& TriggerTag, const struct FHitResult& HitResult);
	void OnMessageReceived_55C0747248939B02403D89BE669E525B(class UMsgBaseNode* ProxyObject);
	void ReceivePreInitializeComponents();
	void SetAbilityTriggerTag(const struct FGameplayTag& New_Tag, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WallSpike_C">();
	}
	static class ABP_WallSpike_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WallSpike_C>();
	}
};
static_assert(alignof(ABP_WallSpike_C) == 0x000008, "Wrong alignment on ABP_WallSpike_C");
static_assert(sizeof(ABP_WallSpike_C) == 0x0005C8, "Wrong size on ABP_WallSpike_C");
static_assert(offsetof(ABP_WallSpike_C, UberGraphFrame_BP_WallSpike_C) == 0x000578, "Member 'ABP_WallSpike_C::UberGraphFrame_BP_WallSpike_C' has a wrong offset!");
static_assert(offsetof(ABP_WallSpike_C, Box) == 0x000580, "Member 'ABP_WallSpike_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_WallSpike_C, ActiveBox) == 0x000588, "Member 'ABP_WallSpike_C::ActiveBox' has a wrong offset!");
static_assert(offsetof(ABP_WallSpike_C, Arrow) == 0x000590, "Member 'ABP_WallSpike_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_WallSpike_C, IsActivate) == 0x000598, "Member 'ABP_WallSpike_C::IsActivate' has a wrong offset!");
static_assert(offsetof(ABP_WallSpike_C, In_Gameplay_Effect_Id_Array) == 0x0005A0, "Member 'ABP_WallSpike_C::In_Gameplay_Effect_Id_Array' has a wrong offset!");
static_assert(offsetof(ABP_WallSpike_C, ActiveDamagePreDelayTime) == 0x0005B0, "Member 'ABP_WallSpike_C::ActiveDamagePreDelayTime' has a wrong offset!");
static_assert(offsetof(ABP_WallSpike_C, ActiveDurationTime) == 0x0005B8, "Member 'ABP_WallSpike_C::ActiveDurationTime' has a wrong offset!");
static_assert(offsetof(ABP_WallSpike_C, ActiveCoolTime) == 0x0005C0, "Member 'ABP_WallSpike_C::ActiveCoolTime' has a wrong offset!");

}

