#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FrozenGhost

#include "Basic.hpp"

#include "BP_DCMonsterBaseWithOptions_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DungeonCrawler_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FrozenGhost.BP_FrozenGhost_C
// 0x00D0 (0x14B0 - 0x13E0)
class ABP_FrozenGhost_C : public ABP_DCMonsterBaseWithOptions_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_FrozenGhost_C;                   // 0x13D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   FrostScream;                                       // 0x13E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x13E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x13F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Hand_R;                                     // 0x13F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Hand_L;                                     // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Low_Body;                                   // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_Low_L;                                  // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_Low_R;                                  // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_Upper_L;                                // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_Upper_R;                                // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Body;                                       // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Head;                                       // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Phase_Count;                                       // 0x1440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max;                                               // 0x1444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Min;                                               // 0x1448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D0B[0x4];                                     // 0x144C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Overlapped_Enemies;                                // 0x1450(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        HP_To_Use_Flee;                                    // 0x1460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Other_Actor;                                       // 0x1468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Flee_Target;                                       // 0x1470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FDCGameplayEffectData>          In_Gameplay_Effect_Data_Array;                     // 0x1478(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FActiveGameplayEffectHandle>    BuffMoveSpeed;                                     // 0x1488(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                Scream_Radius;                                     // 0x1498(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ChangeFXState(bool New_State, class UNiagaraComponent* Niagara_System_Component);
	void ChangeFXStateOnTagUpdate(class UNiagaraComponent* Niagara_Component, const struct FGameplayTag& In_Gameplay_Tag, int32 In_Count);
	void EventReceived_E0BD796B4E82B57E77C3C9A43F09021B(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_BP_FrozenGhost(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void OnFMsgGASAttributeNotifyBlueprint(const struct FMsgGASAttributeNotify& InMsg);
	void Overlap_in(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Overlap_Out(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void Phase_Count__Reset();
	void Phase_Count_Function();
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FrozenGhost_C">();
	}
	static class ABP_FrozenGhost_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FrozenGhost_C>();
	}
};
static_assert(alignof(ABP_FrozenGhost_C) == 0x000010, "Wrong alignment on ABP_FrozenGhost_C");
static_assert(sizeof(ABP_FrozenGhost_C) == 0x0014B0, "Wrong size on ABP_FrozenGhost_C");
static_assert(offsetof(ABP_FrozenGhost_C, UberGraphFrame_BP_FrozenGhost_C) == 0x0013D8, "Member 'ABP_FrozenGhost_C::UberGraphFrame_BP_FrozenGhost_C' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, FrostScream) == 0x0013E0, "Member 'ABP_FrozenGhost_C::FrostScream' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, Niagara) == 0x0013E8, "Member 'ABP_FrozenGhost_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, SkeletalMesh) == 0x0013F0, "Member 'ABP_FrozenGhost_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, HitBox_Hand_R) == 0x0013F8, "Member 'ABP_FrozenGhost_C::HitBox_Hand_R' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, HitBox_Hand_L) == 0x001400, "Member 'ABP_FrozenGhost_C::HitBox_Hand_L' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, HitBox_Low_Body) == 0x001408, "Member 'ABP_FrozenGhost_C::HitBox_Low_Body' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, HitBox_Arm_Low_L) == 0x001410, "Member 'ABP_FrozenGhost_C::HitBox_Arm_Low_L' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, HitBox_Arm_Low_R) == 0x001418, "Member 'ABP_FrozenGhost_C::HitBox_Arm_Low_R' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, HitBox_Arm_Upper_L) == 0x001420, "Member 'ABP_FrozenGhost_C::HitBox_Arm_Upper_L' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, HitBox_Arm_Upper_R) == 0x001428, "Member 'ABP_FrozenGhost_C::HitBox_Arm_Upper_R' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, HitBox_Body) == 0x001430, "Member 'ABP_FrozenGhost_C::HitBox_Body' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, HitBox_Head) == 0x001438, "Member 'ABP_FrozenGhost_C::HitBox_Head' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, Phase_Count) == 0x001440, "Member 'ABP_FrozenGhost_C::Phase_Count' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, Max) == 0x001444, "Member 'ABP_FrozenGhost_C::Max' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, Min) == 0x001448, "Member 'ABP_FrozenGhost_C::Min' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, Overlapped_Enemies) == 0x001450, "Member 'ABP_FrozenGhost_C::Overlapped_Enemies' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, HP_To_Use_Flee) == 0x001460, "Member 'ABP_FrozenGhost_C::HP_To_Use_Flee' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, Other_Actor) == 0x001468, "Member 'ABP_FrozenGhost_C::Other_Actor' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, Flee_Target) == 0x001470, "Member 'ABP_FrozenGhost_C::Flee_Target' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, In_Gameplay_Effect_Data_Array) == 0x001478, "Member 'ABP_FrozenGhost_C::In_Gameplay_Effect_Data_Array' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, BuffMoveSpeed) == 0x001488, "Member 'ABP_FrozenGhost_C::BuffMoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_FrozenGhost_C, Scream_Radius) == 0x001498, "Member 'ABP_FrozenGhost_C::Scream_Radius' has a wrong offset!");

}

