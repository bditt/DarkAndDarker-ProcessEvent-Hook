#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_FrostWyvern_Special_Breath_Ground

#include "Basic.hpp"

#include "GA_FrostWyvern_Special_Breath_Base_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C
// 0x0108 (0x0780 - 0x0678)
class UGA_FrostWyvern_Special_Breath_Ground_C final : public UGA_FrostWyvern_Special_Breath_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_FrostWyvern_Special_Breath_Ground_C; // 0x0678(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_FrostWyvern_C*                      As_BP_Frost_Wyvern;                                // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Dealt_Damage_TimerHandle;                          // 0x0688(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Found_Target;                                      // 0x0690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C14[0x7];                                     // 0x0691(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Rotation_Angle_Per_Tick;                           // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotation_Finished;                                 // 0x06A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C15[0x7];                                     // 0x06A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Rotation_TimerHandle;                              // 0x06A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDCAT_RotateToActor*                    Rotate_Async_Task;                                 // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     Trigger_Event_Data;                                // 0x06B8(0x00B0)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FActiveGameplayEffectHandle>    Mark_Effect_Handle;                                // 0x0768(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           Windforce_TimerHandle;                             // 0x0778(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AbilityActivated(const struct FGameplayEventData& TriggerEventData);
	void Apply_Windforce();
	void Clear_Damage_TimerHandle();
	void Clear_Rotate_Tasks_Minus_Unused();
	void Clear_Target_Minus_Unused();
	void Clear_Windforce_All();
	void EventReceived_2538F3FC4C0590DD2D5F50858CFB1AF9(const struct FGameplayEventData& Payload);
	void EventReceived_4A13B0FA478E9FB8061AE48DD7C4020B(const struct FGameplayEventData& Payload);
	void EventReceived_4EF8A20F497BAB21CFFC6382AFA34D74(const struct FGameplayEventData& Payload);
	void EventReceived_B16513274F6928BFAC5813BBE6D63739(const struct FGameplayEventData& Payload);
	void EventReceived_FC4AA6884628A8C3C6DBC0995C5A4F39(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground(int32 EntryPoint);
	void Find_Marked_Target_Minus_Unused();
	void K2_OnEndAbility(bool bWasCancelled);
	void Remove_Mark_To_Target_Minus_Unused();
	void Rotate_To_Random_Direction();
	void Set_Mark_To_Target_Minus_Unused();
	void Set_Windforce_Timer();
	void Update_Target_MinusUnused();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_FrostWyvern_Special_Breath_Ground_C">();
	}
	static class UGA_FrostWyvern_Special_Breath_Ground_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_FrostWyvern_Special_Breath_Ground_C>();
	}
};
static_assert(alignof(UGA_FrostWyvern_Special_Breath_Ground_C) == 0x000008, "Wrong alignment on UGA_FrostWyvern_Special_Breath_Ground_C");
static_assert(sizeof(UGA_FrostWyvern_Special_Breath_Ground_C) == 0x000780, "Wrong size on UGA_FrostWyvern_Special_Breath_Ground_C");
static_assert(offsetof(UGA_FrostWyvern_Special_Breath_Ground_C, UberGraphFrame_GA_FrostWyvern_Special_Breath_Ground_C) == 0x000678, "Member 'UGA_FrostWyvern_Special_Breath_Ground_C::UberGraphFrame_GA_FrostWyvern_Special_Breath_Ground_C' has a wrong offset!");
static_assert(offsetof(UGA_FrostWyvern_Special_Breath_Ground_C, As_BP_Frost_Wyvern) == 0x000680, "Member 'UGA_FrostWyvern_Special_Breath_Ground_C::As_BP_Frost_Wyvern' has a wrong offset!");
static_assert(offsetof(UGA_FrostWyvern_Special_Breath_Ground_C, Dealt_Damage_TimerHandle) == 0x000688, "Member 'UGA_FrostWyvern_Special_Breath_Ground_C::Dealt_Damage_TimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_FrostWyvern_Special_Breath_Ground_C, Found_Target) == 0x000690, "Member 'UGA_FrostWyvern_Special_Breath_Ground_C::Found_Target' has a wrong offset!");
static_assert(offsetof(UGA_FrostWyvern_Special_Breath_Ground_C, Rotation_Angle_Per_Tick) == 0x000698, "Member 'UGA_FrostWyvern_Special_Breath_Ground_C::Rotation_Angle_Per_Tick' has a wrong offset!");
static_assert(offsetof(UGA_FrostWyvern_Special_Breath_Ground_C, Rotation_Finished) == 0x0006A0, "Member 'UGA_FrostWyvern_Special_Breath_Ground_C::Rotation_Finished' has a wrong offset!");
static_assert(offsetof(UGA_FrostWyvern_Special_Breath_Ground_C, Rotation_TimerHandle) == 0x0006A8, "Member 'UGA_FrostWyvern_Special_Breath_Ground_C::Rotation_TimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_FrostWyvern_Special_Breath_Ground_C, Rotate_Async_Task) == 0x0006B0, "Member 'UGA_FrostWyvern_Special_Breath_Ground_C::Rotate_Async_Task' has a wrong offset!");
static_assert(offsetof(UGA_FrostWyvern_Special_Breath_Ground_C, Trigger_Event_Data) == 0x0006B8, "Member 'UGA_FrostWyvern_Special_Breath_Ground_C::Trigger_Event_Data' has a wrong offset!");
static_assert(offsetof(UGA_FrostWyvern_Special_Breath_Ground_C, Mark_Effect_Handle) == 0x000768, "Member 'UGA_FrostWyvern_Special_Breath_Ground_C::Mark_Effect_Handle' has a wrong offset!");
static_assert(offsetof(UGA_FrostWyvern_Special_Breath_Ground_C, Windforce_TimerHandle) == 0x000778, "Member 'UGA_FrostWyvern_Special_Breath_Ground_C::Windforce_TimerHandle' has a wrong offset!");

}

