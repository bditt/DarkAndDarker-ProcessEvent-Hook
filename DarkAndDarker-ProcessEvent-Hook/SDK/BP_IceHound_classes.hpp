#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IceHound

#include "Basic.hpp"

#include "BP_DCMonsterBaseWithOptions_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_IceHound.BP_IceHound_C
// 0x00A0 (0x1480 - 0x13E0)
class ABP_IceHound_C : public ABP_DCMonsterBaseWithOptions_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_IceHound_C;                      // 0x13D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Foot_L;                                // 0x13E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Foot_R;                                // 0x13E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Leg_R_02;                              // 0x13F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Leg_R_01;                              // 0x13F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Leg_L_02;                              // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Leg_L_01;                              // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Thigh_L;                               // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Thigh_R;                               // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Hand_L;                                // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Hand_R;                                // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Arm_L_L;                               // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Body_01;                               // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Arm_U_L;                               // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Arm_L_R;                               // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Arm_U_R;                               // 0x1450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Body_03;                               // 0x1458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Head;                                  // 0x1460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Body_02;                               // 0x1468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Phase_Count;                                       // 0x1470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max;                                               // 0x1474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Min;                                               // 0x1478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_IceHound(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void OnSetAI();
	void Phase_Count_Function();
	void Phase_Count_Reset();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_IceHound_C">();
	}
	static class ABP_IceHound_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_IceHound_C>();
	}
};
static_assert(alignof(ABP_IceHound_C) == 0x000010, "Wrong alignment on ABP_IceHound_C");
static_assert(sizeof(ABP_IceHound_C) == 0x001480, "Wrong size on ABP_IceHound_C");
static_assert(offsetof(ABP_IceHound_C, UberGraphFrame_BP_IceHound_C) == 0x0013D8, "Member 'ABP_IceHound_C::UberGraphFrame_BP_IceHound_C' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Foot_L) == 0x0013E0, "Member 'ABP_IceHound_C::BP_DCHitBox_Foot_L' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Foot_R) == 0x0013E8, "Member 'ABP_IceHound_C::BP_DCHitBox_Foot_R' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Leg_R_02) == 0x0013F0, "Member 'ABP_IceHound_C::BP_DCHitBox_Leg_R_02' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Leg_R_01) == 0x0013F8, "Member 'ABP_IceHound_C::BP_DCHitBox_Leg_R_01' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Leg_L_02) == 0x001400, "Member 'ABP_IceHound_C::BP_DCHitBox_Leg_L_02' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Leg_L_01) == 0x001408, "Member 'ABP_IceHound_C::BP_DCHitBox_Leg_L_01' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Thigh_L) == 0x001410, "Member 'ABP_IceHound_C::BP_DCHitBox_Thigh_L' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Thigh_R) == 0x001418, "Member 'ABP_IceHound_C::BP_DCHitBox_Thigh_R' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Hand_L) == 0x001420, "Member 'ABP_IceHound_C::BP_DCHitBox_Hand_L' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Hand_R) == 0x001428, "Member 'ABP_IceHound_C::BP_DCHitBox_Hand_R' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Arm_L_L) == 0x001430, "Member 'ABP_IceHound_C::BP_DCHitBox_Arm_L_L' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Body_01) == 0x001438, "Member 'ABP_IceHound_C::BP_DCHitBox_Body_01' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Arm_U_L) == 0x001440, "Member 'ABP_IceHound_C::BP_DCHitBox_Arm_U_L' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Arm_L_R) == 0x001448, "Member 'ABP_IceHound_C::BP_DCHitBox_Arm_L_R' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Arm_U_R) == 0x001450, "Member 'ABP_IceHound_C::BP_DCHitBox_Arm_U_R' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Body_03) == 0x001458, "Member 'ABP_IceHound_C::BP_DCHitBox_Body_03' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Head) == 0x001460, "Member 'ABP_IceHound_C::BP_DCHitBox_Head' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, BP_DCHitBox_Body_02) == 0x001468, "Member 'ABP_IceHound_C::BP_DCHitBox_Body_02' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, Phase_Count) == 0x001470, "Member 'ABP_IceHound_C::Phase_Count' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, Max) == 0x001474, "Member 'ABP_IceHound_C::Max' has a wrong offset!");
static_assert(offsetof(ABP_IceHound_C, Min) == 0x001478, "Member 'ABP_IceHound_C::Min' has a wrong offset!");

}

