#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DCUIFunctionLibrary

#include "Basic.hpp"

#include "DCUIFunctionLibrary_classes.hpp"
#include "DCUIFunctionLibrary_parameters.hpp"


namespace SDK
{

// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.UpdateRadialDirectionWithMousePosition
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          WorldContextObject                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDCUIFunctionLibrary_C::UpdateRadialDirectionWithMousePosition(class UObject* WorldContextObject, class UObject* __WorldContext, struct FVector2D* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "UpdateRadialDirectionWithMousePosition");

	Params::DCUIFunctionLibrary_C_UpdateRadialDirectionWithMousePosition Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetTwoUnitDHMSTextFromTimespan
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTimespan                        InTimespan                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             DHMSText                                               (Parm, OutParm)

void UDCUIFunctionLibrary_C::GetTwoUnitDHMSTextFromTimespan(const struct FTimespan& InTimespan, class UObject* __WorldContext, class FText* DHMSText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetTwoUnitDHMSTextFromTimespan");

	Params::DCUIFunctionLibrary_C_GetTwoUnitDHMSTextFromTimespan Parms{};

	Parms.InTimespan = std::move(InTimespan);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (DHMSText != nullptr)
		*DHMSText = std::move(Parms.DHMSText);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetSpellTypeColor
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     SpellSourceType                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      OutlineColor                                           (Parm, OutParm)

void UDCUIFunctionLibrary_C::GetSpellTypeColor(const struct FGameplayTag& SpellSourceType, class UObject* __WorldContext, struct FSlateColor* OutlineColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetSpellTypeColor");

	Params::DCUIFunctionLibrary_C_GetSpellTypeColor Parms{};

	Parms.SpellSourceType = std::move(SpellSourceType);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutlineColor != nullptr)
		*OutlineColor = std::move(Parms.OutlineColor);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetShortDHMSTextFromTimespan
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTimespan                        InTimespan                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             DHMSText                                               (Parm, OutParm)

void UDCUIFunctionLibrary_C::GetShortDHMSTextFromTimespan(const struct FTimespan& InTimespan, class UObject* __WorldContext, class FText* DHMSText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetShortDHMSTextFromTimespan");

	Params::DCUIFunctionLibrary_C_GetShortDHMSTextFromTimespan Parms{};

	Parms.InTimespan = std::move(InTimespan);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (DHMSText != nullptr)
		*DHMSText = std::move(Parms.DHMSText);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetSemicircleSelectedIndexByInputDirection
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  SectionDegreeSize                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   RadialIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDCUIFunctionLibrary_C::GetSemicircleSelectedIndexByInputDirection(const struct FVector2D& Direction, double SectionDegreeSize, class UObject* __WorldContext, int32* RadialIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetSemicircleSelectedIndexByInputDirection");

	Params::DCUIFunctionLibrary_C_GetSemicircleSelectedIndexByInputDirection Parms{};

	Parms.Direction = std::move(Direction);
	Parms.SectionDegreeSize = SectionDegreeSize;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (RadialIndex != nullptr)
		*RadialIndex = Parms.RadialIndex;
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetRankColor
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDCLeaderboardRankGroupDataAsset* LeaderboardRankGroupData                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     RankColor                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDCUIFunctionLibrary_C::GetRankColor(class UDCLeaderboardRankGroupDataAsset* LeaderboardRankGroupData, class UObject* __WorldContext, struct FLinearColor* RankColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetRankColor");

	Params::DCUIFunctionLibrary_C_GetRankColor Parms{};

	Parms.LeaderboardRankGroupData = LeaderboardRankGroupData;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (RankColor != nullptr)
		*RankColor = std::move(Parms.RankColor);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetRadialSelectedIndexByInputDirection
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  SectionDegreeSize                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   RadialIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDCUIFunctionLibrary_C::GetRadialSelectedIndexByInputDirection(const struct FVector2D& Direction, double SectionDegreeSize, class UObject* __WorldContext, int32* RadialIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetRadialSelectedIndexByInputDirection");

	Params::DCUIFunctionLibrary_C_GetRadialSelectedIndexByInputDirection Parms{};

	Parms.Direction = std::move(Direction);
	Parms.SectionDegreeSize = SectionDegreeSize;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (RadialIndex != nullptr)
		*RadialIndex = Parms.RadialIndex;
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetPlayerCharacterEffectTypeText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void UDCUIFunctionLibrary_C::GetPlayerCharacterEffectTypeText(const struct FGameplayTag& GameplayTag, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetPlayerCharacterEffectTypeText");

	Params::DCUIFunctionLibrary_C_GetPlayerCharacterEffectTypeText Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetMusicTypeColor
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     MusicSourceType                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      OutlineColor                                           (Parm, OutParm)

void UDCUIFunctionLibrary_C::GetMusicTypeColor(const struct FGameplayTag& MusicSourceType, class UObject* __WorldContext, struct FSlateColor* OutlineColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetMusicTypeColor");

	Params::DCUIFunctionLibrary_C_GetMusicTypeColor Parms{};

	Parms.MusicSourceType = std::move(MusicSourceType);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutlineColor != nullptr)
		*OutlineColor = std::move(Parms.OutlineColor);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetItemWeaponTypeText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void UDCUIFunctionLibrary_C::GetItemWeaponTypeText(const struct FGameplayTag& GameplayTag, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetItemWeaponTypeText");

	Params::DCUIFunctionLibrary_C_GetItemWeaponTypeText Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetItemUtilityTypeText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void UDCUIFunctionLibrary_C::GetItemUtilityTypeText(const struct FGameplayTag& GameplayTag, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetItemUtilityTypeText");

	Params::DCUIFunctionLibrary_C_GetItemUtilityTypeText Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetItemSlotTypeText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void UDCUIFunctionLibrary_C::GetItemSlotTypeText(const struct FGameplayTag& GameplayTag, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetItemSlotTypeText");

	Params::DCUIFunctionLibrary_C_GetItemSlotTypeText Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetItemRaritySlateColor
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Rarity                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      SlateColor                                             (Parm, OutParm)

void UDCUIFunctionLibrary_C::GetItemRaritySlateColor(const struct FGameplayTag& Rarity, class UObject* __WorldContext, struct FSlateColor* SlateColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetItemRaritySlateColor");

	Params::DCUIFunctionLibrary_C_GetItemRaritySlateColor Parms{};

	Parms.Rarity = std::move(Rarity);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (SlateColor != nullptr)
		*SlateColor = std::move(Parms.SlateColor);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetItemHandTypeText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void UDCUIFunctionLibrary_C::GetItemHandTypeText(const struct FGameplayTag& GameplayTag, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetItemHandTypeText");

	Params::DCUIFunctionLibrary_C_GetItemHandTypeText Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetItemEffectValueText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     EffectTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   EffectValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             EffectValueText                                        (Parm, OutParm)

void UDCUIFunctionLibrary_C::GetItemEffectValueText(const struct FGameplayTag& EffectTag, int32 EffectValue, class UObject* __WorldContext, class FText* EffectValueText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetItemEffectValueText");

	Params::DCUIFunctionLibrary_C_GetItemEffectValueText Parms{};

	Parms.EffectTag = std::move(EffectTag);
	Parms.EffectValue = EffectValue;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (EffectValueText != nullptr)
		*EffectValueText = std::move(Parms.EffectValueText);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetItemEffectTypeText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void UDCUIFunctionLibrary_C::GetItemEffectTypeText(const struct FGameplayTag& GameplayTag, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetItemEffectTypeText");

	Params::DCUIFunctionLibrary_C_GetItemEffectTypeText Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetItemArmorTypeText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void UDCUIFunctionLibrary_C::GetItemArmorTypeText(const struct FGameplayTag& GameplayTag, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetItemArmorTypeText");

	Params::DCUIFunctionLibrary_C_GetItemArmorTypeText Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetGamepadButtonImage
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Image                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UDCUIFunctionLibrary_C::GetGamepadButtonImage(const struct FKey& Key, class UObject* __WorldContext, class UTexture2D** Image)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetGamepadButtonImage");

	Params::DCUIFunctionLibrary_C_GetGamepadButtonImage Parms{};

	Parms.Key = std::move(Key);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Image != nullptr)
		*Image = Parms.Image;
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetFirstKeyByInputAction
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInputAction*                     InputAction                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             KeyDisplayName                                         (Parm, OutParm)
// class UTexture2D*                       KeyImage                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UDCUIFunctionLibrary_C::GetFirstKeyByInputAction(const class UInputAction* InputAction, class UObject* __WorldContext, class FText* KeyDisplayName, class UTexture2D** KeyImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetFirstKeyByInputAction");

	Params::DCUIFunctionLibrary_C_GetFirstKeyByInputAction Parms{};

	Parms.InputAction = InputAction;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (KeyDisplayName != nullptr)
		*KeyDisplayName = std::move(Parms.KeyDisplayName);

	if (KeyImage != nullptr)
		*KeyImage = Parms.KeyImage;
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetDHMSTextFromTimespan
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTimespan                        InTimespan                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             DHMSText                                               (Parm, OutParm)

void UDCUIFunctionLibrary_C::GetDHMSTextFromTimespan(const struct FTimespan& InTimespan, class UObject* __WorldContext, class FText* DHMSText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "GetDHMSTextFromTimespan");

	Params::DCUIFunctionLibrary_C_GetDHMSTextFromTimespan Parms{};

	Parms.InTimespan = std::move(InTimespan);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (DHMSText != nullptr)
		*DHMSText = std::move(Parms.DHMSText);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.Get Item Name And Color
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FItemData                        ItemData                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             Param_Name                                             (Parm, OutParm)
// struct FSlateColor                      Color                                                  (Parm, OutParm)

void UDCUIFunctionLibrary_C::Get_Item_Name_And_Color(const struct FItemData& ItemData, class UObject* __WorldContext, class FText* Param_Name, struct FSlateColor* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DCUIFunctionLibrary_C", "Get Item Name And Color");

	Params::DCUIFunctionLibrary_C_Get_Item_Name_And_Color Parms{};

	Parms.ItemData = std::move(ItemData);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Param_Name != nullptr)
		*Param_Name = std::move(Parms.Param_Name);

	if (Color != nullptr)
		*Color = std::move(Parms.Color);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetAttributeTextColor_OverloadedValue
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  BaseValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  CurrentValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      SlateColor                                             (Parm, OutParm)

void UDCUIFunctionLibrary_C::GetAttributeTextColor_OverloadedValue(double BaseValue, double CurrentValue, class UObject* __WorldContext, struct FSlateColor* SlateColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DCUIFunctionLibrary_C", "GetAttributeTextColor_OverloadedValue");

	Params::DCUIFunctionLibrary_C_GetAttributeTextColor_OverloadedValue Parms{};

	Parms.BaseValue = BaseValue;
	Parms.CurrentValue = CurrentValue;
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	if (SlateColor != nullptr)
		*SlateColor = std::move(Parms.SlateColor);
}


// Function DCUIFunctionLibrary.DCUIFunctionLibrary_C.GetAttributeTextColor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayAttributeData           GameplayAttributeData                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      SlateColor                                             (Parm, OutParm)

void UDCUIFunctionLibrary_C::GetAttributeTextColor(const struct FGameplayAttributeData& GameplayAttributeData, class UObject* __WorldContext, struct FSlateColor* SlateColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DCUIFunctionLibrary_C", "GetAttributeTextColor");

	Params::DCUIFunctionLibrary_C_GetAttributeTextColor Parms{};

	Parms.GameplayAttributeData = std::move(GameplayAttributeData);
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	if (SlateColor != nullptr)
		*SlateColor = std::move(Parms.SlateColor);
}

}

