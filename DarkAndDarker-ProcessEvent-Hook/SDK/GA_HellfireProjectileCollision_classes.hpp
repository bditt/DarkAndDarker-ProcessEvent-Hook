#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_HellfireProjectileCollision

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GA_ProjectileCollision_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_HellfireProjectileCollision.GA_HellfireProjectileCollision_C
// 0x01D0 (0x0790 - 0x05C0)
class UGA_HellfireProjectileCollision_C final : public UGA_ProjectileCollision_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FPrimaryAssetId                        SpellDataId;                                       // 0x05C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FActiveGameplayEffectHandle>    NewVar;                                            // 0x05D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AActor*>                         TargetList;                                        // 0x05E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FGameplayEffectQuery                   ActiveGEQuery;                                     // 0x05F8(0x0198)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void AbilityActivated(const struct FGameplayEventData& TriggerEventData);
	void ExecuteUbergraph_GA_HellfireProjectileCollision(int32 EntryPoint);
	void K2_OnEndAbility(bool bWasCancelled);
	void OnDistanceChange_E4D8B0924A37CACC18502CAABDE7F1E2();
	void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OverlapBeginTargetActor(class AActor* InTargetActor);
	void OverlapEndTargetActor(class AActor* InTargetActor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_HellfireProjectileCollision_C">();
	}
	static class UGA_HellfireProjectileCollision_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_HellfireProjectileCollision_C>();
	}
};
static_assert(alignof(UGA_HellfireProjectileCollision_C) == 0x000008, "Wrong alignment on UGA_HellfireProjectileCollision_C");
static_assert(sizeof(UGA_HellfireProjectileCollision_C) == 0x000790, "Wrong size on UGA_HellfireProjectileCollision_C");
static_assert(offsetof(UGA_HellfireProjectileCollision_C, UberGraphFrame) == 0x0005C0, "Member 'UGA_HellfireProjectileCollision_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_HellfireProjectileCollision_C, SpellDataId) == 0x0005C8, "Member 'UGA_HellfireProjectileCollision_C::SpellDataId' has a wrong offset!");
static_assert(offsetof(UGA_HellfireProjectileCollision_C, NewVar) == 0x0005D8, "Member 'UGA_HellfireProjectileCollision_C::NewVar' has a wrong offset!");
static_assert(offsetof(UGA_HellfireProjectileCollision_C, TargetList) == 0x0005E8, "Member 'UGA_HellfireProjectileCollision_C::TargetList' has a wrong offset!");
static_assert(offsetof(UGA_HellfireProjectileCollision_C, ActiveGEQuery) == 0x0005F8, "Member 'UGA_HellfireProjectileCollision_C::ActiveGEQuery' has a wrong offset!");

}

