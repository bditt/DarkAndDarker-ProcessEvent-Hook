#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_OilLantern_Projectile

#include "Basic.hpp"

#include "BP_ProjectileActor_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_OilLantern_Projectile.BP_OilLantern_Projectile_C
// 0x0030 (0x07C0 - 0x0790)
class ABP_OilLantern_Projectile_C final : public ABP_ProjectileActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_OilLantern_Projectile_C;         // 0x0788(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URotatingMovementComponent*             RotatingMovement;                                  // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RepRotation;                                       // 0x07A8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)

public:
	void ExecuteUbergraph_BP_OilLantern_Projectile(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void OnRep_RepRotation();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_OilLantern_Projectile_C">();
	}
	static class ABP_OilLantern_Projectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_OilLantern_Projectile_C>();
	}
};
static_assert(alignof(ABP_OilLantern_Projectile_C) == 0x000010, "Wrong alignment on ABP_OilLantern_Projectile_C");
static_assert(sizeof(ABP_OilLantern_Projectile_C) == 0x0007C0, "Wrong size on ABP_OilLantern_Projectile_C");
static_assert(offsetof(ABP_OilLantern_Projectile_C, UberGraphFrame_BP_OilLantern_Projectile_C) == 0x000788, "Member 'ABP_OilLantern_Projectile_C::UberGraphFrame_BP_OilLantern_Projectile_C' has a wrong offset!");
static_assert(offsetof(ABP_OilLantern_Projectile_C, PointLight) == 0x000790, "Member 'ABP_OilLantern_Projectile_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_OilLantern_Projectile_C, ParticleSystem) == 0x000798, "Member 'ABP_OilLantern_Projectile_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_OilLantern_Projectile_C, RotatingMovement) == 0x0007A0, "Member 'ABP_OilLantern_Projectile_C::RotatingMovement' has a wrong offset!");
static_assert(offsetof(ABP_OilLantern_Projectile_C, RepRotation) == 0x0007A8, "Member 'ABP_OilLantern_Projectile_C::RepRotation' has a wrong offset!");

}

