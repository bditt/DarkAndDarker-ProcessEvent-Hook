#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Wraith_Common

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_DCMonsterBaseWithOptions_SubBoss_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Wraith_Common.BP_Wraith_Common_C
// 0x0110 (0x14F0 - 0x13E0)
class ABP_Wraith_Common_C : public ABP_DCMonsterBaseWithOptions_SubBoss_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Wraith_Common_C;                 // 0x13D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x13E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox6;                                      // 0x13E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox5;                                      // 0x13F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox4;                                      // 0x13F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox3;                                      // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox2;                                      // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox1;                                      // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox;                                       // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Weapon;                                            // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Cloth;                                             // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Dress;                                             // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Scarf;                                             // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Wristband;                                         // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Sleeve;                                            // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Necklace;                                          // 0x1450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Shoulderpad;                                       // 0x1458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hood;                                              // 0x1460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Eyes;                                              // 0x1468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hair;                                              // 0x1470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseHair;                                          // 0x1478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseEyes;                                          // 0x1479(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseHood;                                          // 0x147A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseShoulderpad;                                   // 0x147B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseNecklace;                                      // 0x147C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseSleeve;                                        // 0x147D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseWristband;                                     // 0x147E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseScarf;                                         // 0x147F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseDress;                                         // 0x1480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseCloth;                                         // 0x1481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59FC[0x2];                                     // 0x1482(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Probability;                                       // 0x1484(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59FD[0x4];                                     // 0x148C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, struct FGameplayCueTag> GameplayCueByStateMap;                             // 0x1490(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FGameplayTag                           GameplayCueTagByState;                             // 0x14E0(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   HPRatio;                                           // 0x14E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Wraith_Common(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void OnSetAI();
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Wraith_Common_C">();
	}
	static class ABP_Wraith_Common_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Wraith_Common_C>();
	}
};
static_assert(alignof(ABP_Wraith_Common_C) == 0x000010, "Wrong alignment on ABP_Wraith_Common_C");
static_assert(sizeof(ABP_Wraith_Common_C) == 0x0014F0, "Wrong size on ABP_Wraith_Common_C");
static_assert(offsetof(ABP_Wraith_Common_C, UberGraphFrame_BP_Wraith_Common_C) == 0x0013D8, "Member 'ABP_Wraith_Common_C::UberGraphFrame_BP_Wraith_Common_C' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, ParticleSystem) == 0x0013E0, "Member 'ABP_Wraith_Common_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, BP_DCHitBox6) == 0x0013E8, "Member 'ABP_Wraith_Common_C::BP_DCHitBox6' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, BP_DCHitBox5) == 0x0013F0, "Member 'ABP_Wraith_Common_C::BP_DCHitBox5' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, BP_DCHitBox4) == 0x0013F8, "Member 'ABP_Wraith_Common_C::BP_DCHitBox4' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, BP_DCHitBox3) == 0x001400, "Member 'ABP_Wraith_Common_C::BP_DCHitBox3' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, BP_DCHitBox2) == 0x001408, "Member 'ABP_Wraith_Common_C::BP_DCHitBox2' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, BP_DCHitBox1) == 0x001410, "Member 'ABP_Wraith_Common_C::BP_DCHitBox1' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, BP_DCHitBox) == 0x001418, "Member 'ABP_Wraith_Common_C::BP_DCHitBox' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, Weapon) == 0x001420, "Member 'ABP_Wraith_Common_C::Weapon' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, Cloth) == 0x001428, "Member 'ABP_Wraith_Common_C::Cloth' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, Dress) == 0x001430, "Member 'ABP_Wraith_Common_C::Dress' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, Scarf) == 0x001438, "Member 'ABP_Wraith_Common_C::Scarf' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, Wristband) == 0x001440, "Member 'ABP_Wraith_Common_C::Wristband' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, Sleeve) == 0x001448, "Member 'ABP_Wraith_Common_C::Sleeve' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, Necklace) == 0x001450, "Member 'ABP_Wraith_Common_C::Necklace' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, Shoulderpad) == 0x001458, "Member 'ABP_Wraith_Common_C::Shoulderpad' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, Hood) == 0x001460, "Member 'ABP_Wraith_Common_C::Hood' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, Eyes) == 0x001468, "Member 'ABP_Wraith_Common_C::Eyes' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, Hair) == 0x001470, "Member 'ABP_Wraith_Common_C::Hair' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, bUseHair) == 0x001478, "Member 'ABP_Wraith_Common_C::bUseHair' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, bUseEyes) == 0x001479, "Member 'ABP_Wraith_Common_C::bUseEyes' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, bUseHood) == 0x00147A, "Member 'ABP_Wraith_Common_C::bUseHood' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, bUseShoulderpad) == 0x00147B, "Member 'ABP_Wraith_Common_C::bUseShoulderpad' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, bUseNecklace) == 0x00147C, "Member 'ABP_Wraith_Common_C::bUseNecklace' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, bUseSleeve) == 0x00147D, "Member 'ABP_Wraith_Common_C::bUseSleeve' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, bUseWristband) == 0x00147E, "Member 'ABP_Wraith_Common_C::bUseWristband' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, bUseScarf) == 0x00147F, "Member 'ABP_Wraith_Common_C::bUseScarf' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, bUseDress) == 0x001480, "Member 'ABP_Wraith_Common_C::bUseDress' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, bUseCloth) == 0x001481, "Member 'ABP_Wraith_Common_C::bUseCloth' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, Probability) == 0x001484, "Member 'ABP_Wraith_Common_C::Probability' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, GameplayCueByStateMap) == 0x001490, "Member 'ABP_Wraith_Common_C::GameplayCueByStateMap' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, GameplayCueTagByState) == 0x0014E0, "Member 'ABP_Wraith_Common_C::GameplayCueTagByState' has a wrong offset!");
static_assert(offsetof(ABP_Wraith_Common_C, HPRatio) == 0x0014E8, "Member 'ABP_Wraith_Common_C::HPRatio' has a wrong offset!");

}

