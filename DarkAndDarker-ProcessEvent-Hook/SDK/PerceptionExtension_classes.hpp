#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PerceptionExtension

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class PerceptionExtension.PerceptionExtensionBPLibrary
// 0x0000 (0x0028 - 0x0028)
class UPerceptionExtensionBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool ForgetActor(class UAIPerceptionComponent* Perception, class AActor* Actor);
	static bool ForgetAll(class UAIPerceptionComponent* Perception);
	static float GetAutoSuccessRange(class UAIPerceptionComponent* Perception);
	static struct FAISenseAffiliationFilter GetDetectionByAffiliation(class UAIPerceptionComponent* Perception, TSubclassOf<class UAISense> SenseClass);
	static TSubclassOf<class UAISense> GetDominantSense(class UAIPerceptionComponent* Perception);
	static float GetHearingRange(class UAIPerceptionComponent* Perception);
	static float GetLoseSightRange(class UAIPerceptionComponent* Perception);
	static float GetLoSHearingRange(class UAIPerceptionComponent* Perception);
	static float GetMaxAge(class UAIPerceptionComponent* Perception, TSubclassOf<class UAISense> SenseClass);
	static float GetNearClippingRadius(class UAIPerceptionComponent* Perception);
	static float GetPOVBackwardOffset(class UAIPerceptionComponent* Perception);
	static float GetSightRange(class UAIPerceptionComponent* Perception);
	static bool GetUseLoSHearing(class UAIPerceptionComponent* Perception);
	static float GetVisionAngle(class UAIPerceptionComponent* Perception);
	static bool SetAutoSuccessRange(class UAIPerceptionComponent* Perception, float AutoSuccessRange);
	static bool SetDetectionByAffiliation(class UAIPerceptionComponent* Perception, TSubclassOf<class UAISense> SenseClass, bool DetectEnemies, bool DetectNeutrals, bool DetectFriendlies);
	static bool SetDominantSense(class UAIPerceptionComponent* Perception, TSubclassOf<class UAISense> SenseClass);
	static bool SetHearingRange(class UAIPerceptionComponent* Perception, float HearingRange);
	static bool SetLoseSightRange(class UAIPerceptionComponent* Perception, float LoseSightRange);
	static bool SetLoSHearingRange(class UAIPerceptionComponent* Perception, float LoSHearingRange);
	static bool SetMaxAge(class UAIPerceptionComponent* Perception, TSubclassOf<class UAISense> SenseClass, float MaxAge);
	static bool SetNearClippingRadius(class UAIPerceptionComponent* Perception, float NearClippingRadius);
	static bool SetPOVBackwardOffset(class UAIPerceptionComponent* Perception, float POVBackwardsOffset);
	static bool SetSightRange(class UAIPerceptionComponent* Perception, float SightRange);
	static bool SetUseLoSHearing(class UAIPerceptionComponent* Perception, bool UseLoSHearing);
	static bool SetVisionAngle(class UAIPerceptionComponent* Perception, float VisionAngle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PerceptionExtensionBPLibrary">();
	}
	static class UPerceptionExtensionBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPerceptionExtensionBPLibrary>();
	}
};
static_assert(alignof(UPerceptionExtensionBPLibrary) == 0x000008, "Wrong alignment on UPerceptionExtensionBPLibrary");
static_assert(sizeof(UPerceptionExtensionBPLibrary) == 0x000028, "Wrong size on UPerceptionExtensionBPLibrary");

}

