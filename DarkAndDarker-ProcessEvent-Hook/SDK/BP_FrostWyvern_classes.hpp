#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FrostWyvern

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "E_FrostWyvern_EnemyLocation_structs.hpp"
#include "E_FrostWyvern_AbilityToUseCombo_structs.hpp"
#include "BP_DCMonsterBaseWithOptions_Boss_classes.hpp"
#include "E_FrostWyvern_Abilities_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FrostWyvern.BP_FrostWyvern_C
// 0x0620 (0x1A20 - 0x1400)
class ABP_FrostWyvern_C : public ABP_DCMonsterBaseWithOptions_Boss_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_FrostWyvern_C;                   // 0x13F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCapsuleComponent*                      Capsule_To_Add_Impact_Power;                       // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Cursed_Area_Stuck_Collision;                       // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AttackCone_Special_Breath;                         // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       WindforceSphere_Special_Breath_Ground;             // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          AttackBox_LeapAttack_RightWing;                    // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          AttackBox_LeapAttack_LeftWing;                     // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          AttackBox_LeapAttack_Neck2;                        // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          AttackBox_LeapAttack_Neck1;                        // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          AttackBox_LeapAttack_Head;                         // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          AttackBox_LeapAttack_Body;                         // 0x1450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Tail8;                       // 0x1458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Tail7;                       // 0x1460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Tail6;                       // 0x1468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Tail5;                       // 0x1470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Tail4;                       // 0x1478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Tail3;                       // 0x1480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Tail2;                       // 0x1488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Tail1;                       // 0x1490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Foot6;                       // 0x1498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Foot5;                       // 0x14A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Foot4;                       // 0x14A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Foot3;                       // 0x14B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Foot2;                       // 0x14B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Foot1;                       // 0x14C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Leg6;                        // 0x14C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Leg5;                        // 0x14D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Leg4;                        // 0x14D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Leg3;                        // 0x14E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Leg2;                        // 0x14E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Leg1;                        // 0x14F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing24;                      // 0x14F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing23;                      // 0x1500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing22;                      // 0x1508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing21;                      // 0x1510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing20;                      // 0x1518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing19;                      // 0x1520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing18;                      // 0x1528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing17;                      // 0x1530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing16;                      // 0x1538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing15;                      // 0x1540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing14;                      // 0x1548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing13;                      // 0x1550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing12;                      // 0x1558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing11;                      // 0x1560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing10;                      // 0x1568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing9;                       // 0x1570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing8;                       // 0x1578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing7;                       // 0x1580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing6;                       // 0x1588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing5;                       // 0x1590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing4;                       // 0x1598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing3;                       // 0x15A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing2;                       // 0x15A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Wing1;                       // 0x15B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Hand8;                       // 0x15B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Hand7;                       // 0x15C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Hand6;                       // 0x15C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Hand5;                       // 0x15D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Arm4;                        // 0x15D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Arm3;                        // 0x15E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Hand4;                       // 0x15E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Hand3;                       // 0x15F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Hand2;                       // 0x15F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Hand1;                       // 0x1600(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Arm2;                        // 0x1608(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Arm1;                        // 0x1610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Body3;                       // 0x1618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Body2;                       // 0x1620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Body1;                       // 0x1628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Neck2;                       // 0x1630(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Neck1;                       // 0x1638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrostWyvern_HitBox_C*               BP_FrostWyvern_HitBox_Head;                        // 0x1640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Combo;                                     // 0x1648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Statue_Count;                                      // 0x164C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_Combo;                                         // 0x1650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_FrostWyvern_AbilityToUseCombo               Current_Skill;                                     // 0x1654(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FA6[0x3];                                     // 0x1655(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_FrostWyvern_AbilityToUseCombo, bool>   Possible_Next_Combo;                               // 0x1658(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ADCCharacterBase*>               Players_On_Center;                                 // 0x16A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ADCCharacterBase*>               Players_On_Edge;                                   // 0x16B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ADCCharacterBase*>               Players_On_Combat_Area;                            // 0x16C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ADCCharacterBase*>               Target_Enemies;                                    // 0x16D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ADCPlayerCharacterBase*>         Enemies_In_Special_Breath;                         // 0x16E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ADCCharacterBase*>               Enemies_Of_Exception_Special_Breath;               // 0x16F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	E_FrostWyvern_EnemyLocation                   Enemy_Location;                                    // 0x1708(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FA7[0x7];                                     // 0x1709(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Pushing_Power;                                     // 0x1710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_To_Determine_Center;                      // 0x1718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_FrostWyvern_C*                      As_BP_Frost_Wyvern;                                // 0x1720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<E_FrostWyvern_Abilities, struct FGameplayTag> FrostWyvern_Abilities;                             // 0x1728(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           Next_Combo_Trigger_Tag;                            // 0x1778(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  Tag_Container_TailAttack1;                         // 0x1780(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_TailAttack2;                         // 0x17A0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_ForwardAttackL;                      // 0x17C0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_ForwardAttackR;                      // 0x17E0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_TwoHandAttack;                       // 0x1800(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_Breath_Ground;                       // 0x1820(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_Breath_Air;                          // 0x1840(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_LeapAttack1;                         // 0x1860(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tag_Container_LeapAttack2;                         // 0x1880(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAsyncTaskWaitGameplayEvent*            Off_Async_Action;                                  // 0x18A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityAsync_WaitGameplayEvent*        TwoHandAttack_Wait_Camera_Async_Action;            // 0x18A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityAsync_WaitGameplayEvent*        Common_Wait_Camera_Async_Action;                   // 0x18B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BreathBall_Explosion_Radius;                       // 0x18B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  Tag_Container_LeapAttack3;                         // 0x18C0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UBoxComponent*>                  AttackBox_Collisions_LeapAttack;                   // 0x18E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        TwoHandAttack_Radius;                              // 0x18F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LeapAttack3_Radius;                                // 0x18F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Over_Distance_From_Actor_To_Leap;                  // 0x1900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMin_TailAttack1;                              // 0x1908(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMax_TailAttack1;                              // 0x190C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMin_TailAttack2;                              // 0x1910(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMax_TailAttack2;                              // 0x1914(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMin_ForwardAttackL;                           // 0x1918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMax_ForwardAttackL;                           // 0x191C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMin_ForwardAttackR;                           // 0x1920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMax_ForwardAttackR;                           // 0x1924(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMin_BreathGround;                             // 0x1928(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMax_BreathGround;                             // 0x192C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMin_BreathAir;                                // 0x1930(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMax_BreathAir;                                // 0x1934(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMin_LeapAttack1;                              // 0x1938(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMax_LeapAttack1;                              // 0x193C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMin_LeapAttack2;                              // 0x1940(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMax_LeapAttack2;                              // 0x1944(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMin_LeapAttack3;                              // 0x1948(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseMax_LeapAttack3;                              // 0x194C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PropsActorBase_C*>           Eggs;                                              // 0x1950(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UBP_FrostWyvern_HitBox_C*               BP_Frost_Wyvern_Hit_Box_Wing_18;                   // 0x1960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Pushing_Wind_VFX_Radius;                           // 0x1968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ADCPlayerCharacterBase*>         Enemies_In_Windforce_Area_Special_Breath_Ground;   // 0x1970(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ADCPlayerCharacterBase*>         Enemies_Out_Windforce_Area_Special_Breath_Ground;  // 0x1980(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Count_Hiding_Eggs_By_Tick;                         // 0x1990(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FA8[0x4];                                     // 0x1994(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Hide_Eggs_TimerHandle;                             // 0x1998(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Cursed_Count;                                      // 0x19A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FA9[0x4];                                     // 0x19A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Props_FrostWyvern_DemonicGuardians_C*> DemonStatues;                                      // 0x19A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ATriggerSphere*                         Trigger_Sphere_Combat_Area;                        // 0x19B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ATriggerSphere*                         Trigger_Sphere_Recognize_Area;                     // 0x19C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Props_FrostWyvern_IcePillar_C*> IcePillars;                                        // 0x19C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Egg_Hided_For_Replication;                         // 0x19D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FAA[0x3];                                     // 0x19D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Deactivate_Curse_Count;                            // 0x19DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  Did_Special;                                       // 0x19E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_FrostWyvern_AbilityToUseCombo               Last_Ability;                                      // 0x19F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Statue;                                        // 0x19F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cursed_Area_Destroyed;                             // 0x19F2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FAB[0x5];                                     // 0x19F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Combat_Area_Radius;                                // 0x19F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HP_Phase_Ratio;                                    // 0x1A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FActiveGameplayEffectHandle>    Damage_Immune_Effect_Handle;                       // 0x1A08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Add_Phase(int32 Min, int32 Max);
	void Add_Windforce_Power(TScriptInterface<class IGameplayTagAssetInterface> _C);
	void Area_Overlap_Check_Event_Bind();
	void Buff_Movespeed_Off();
	void Buff_Movespeed_On();
	void Buff_Movespeed_On_Special();
	void Check_Combo_Success_Ratio(bool* Result);
	void Check_Trigger_To_Be_Freedom();
	void Comeback_Event_End(bool Arrived_SpawnLocation);
	void Comeback_Event_Start();
	void EventReceived_718961DA4A4B5174D29F5EA00C881E23(const struct FGameplayEventData& Payload);
	void EventReceived_7CEA9E874257AEC8835140BCE28E278D(const struct FGameplayEventData& Payload);
	void EventReceived_BD366F1748422D7274798A8D3D6F7919(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_BP_FrostWyvern(int32 EntryPoint);
	void Filter_Enemies_On_Center_Of_Combat_Area(TArray<class ADCCharacterBase*>& DCCharacterBase, bool* Anyone_On_Center, TArray<class ADCCharacterBase*>* Param_Players_On_Center, TArray<class ADCCharacterBase*>* Param_Players_On_Edge);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void Get_Overlap_Weight_From_Effect_Context(const struct FGameplayEffectContextHandle& EffectContext, double Jump_Coefficient_XY, double Jump_Coefficient_Z, class AActor** Hit_Actor, double* XY_Value, double* Z_Value);
	double Get_Overlap_Weight_From_Target(const class AActor* OtherActor, double Jump_Coefficient_XY, double Jump_Coefficient_Z, double* ReturnValue2);
	bool Get_Possible_to_Use_Next_Combo(struct FGameplayTag* Param_Next_Combo_Trigger_Tag, TArray<class ADCCharacterBase*>* DCCharacterBase);
	void Hide_Eggs();
	void Input_Power_Proportional_To_Spawn_Location(double Move_Distance, double* Result);
	void Input_Power_Proportional_To_Target(double* Result);
	void OnAsyncInitialized();
	void OnFMsgGASAttributeNotifyBlueprint(const struct FMsgGASAttributeNotify& InMsg);
	void OnRep_Cursed_Area_Destroyed();
	void OnSetAI();
	void Overlap_In_Add_Impact_Power_Area(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Overlap_In_Special_Breath(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Overlap_In_Windforce_Breath_Ground(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Overlap_Out_Special_Breath(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void Overlap_Out_Windforce_Breath_Ground(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ReceiveBeginPlay();
	void Reset_Variables();
	void Set_Zero_Phase();
	void Spawn_Box_for_Area_Check();
	void Spawn_Eggs();
	void Spawn_Statues();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FrostWyvern_C">();
	}
	static class ABP_FrostWyvern_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FrostWyvern_C>();
	}
};
static_assert(alignof(ABP_FrostWyvern_C) == 0x000010, "Wrong alignment on ABP_FrostWyvern_C");
static_assert(sizeof(ABP_FrostWyvern_C) == 0x001A20, "Wrong size on ABP_FrostWyvern_C");
static_assert(offsetof(ABP_FrostWyvern_C, UberGraphFrame_BP_FrostWyvern_C) == 0x0013F8, "Member 'ABP_FrostWyvern_C::UberGraphFrame_BP_FrostWyvern_C' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Capsule_To_Add_Impact_Power) == 0x001400, "Member 'ABP_FrostWyvern_C::Capsule_To_Add_Impact_Power' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Box) == 0x001408, "Member 'ABP_FrostWyvern_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Cursed_Area_Stuck_Collision) == 0x001410, "Member 'ABP_FrostWyvern_C::Cursed_Area_Stuck_Collision' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, AttackCone_Special_Breath) == 0x001418, "Member 'ABP_FrostWyvern_C::AttackCone_Special_Breath' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, WindforceSphere_Special_Breath_Ground) == 0x001420, "Member 'ABP_FrostWyvern_C::WindforceSphere_Special_Breath_Ground' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, AttackBox_LeapAttack_RightWing) == 0x001428, "Member 'ABP_FrostWyvern_C::AttackBox_LeapAttack_RightWing' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, AttackBox_LeapAttack_LeftWing) == 0x001430, "Member 'ABP_FrostWyvern_C::AttackBox_LeapAttack_LeftWing' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, AttackBox_LeapAttack_Neck2) == 0x001438, "Member 'ABP_FrostWyvern_C::AttackBox_LeapAttack_Neck2' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, AttackBox_LeapAttack_Neck1) == 0x001440, "Member 'ABP_FrostWyvern_C::AttackBox_LeapAttack_Neck1' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, AttackBox_LeapAttack_Head) == 0x001448, "Member 'ABP_FrostWyvern_C::AttackBox_LeapAttack_Head' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, AttackBox_LeapAttack_Body) == 0x001450, "Member 'ABP_FrostWyvern_C::AttackBox_LeapAttack_Body' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Tail8) == 0x001458, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Tail8' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Tail7) == 0x001460, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Tail7' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Tail6) == 0x001468, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Tail6' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Tail5) == 0x001470, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Tail5' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Tail4) == 0x001478, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Tail4' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Tail3) == 0x001480, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Tail3' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Tail2) == 0x001488, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Tail2' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Tail1) == 0x001490, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Tail1' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Foot6) == 0x001498, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Foot6' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Foot5) == 0x0014A0, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Foot5' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Foot4) == 0x0014A8, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Foot4' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Foot3) == 0x0014B0, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Foot3' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Foot2) == 0x0014B8, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Foot2' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Foot1) == 0x0014C0, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Foot1' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Leg6) == 0x0014C8, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Leg6' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Leg5) == 0x0014D0, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Leg5' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Leg4) == 0x0014D8, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Leg4' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Leg3) == 0x0014E0, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Leg3' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Leg2) == 0x0014E8, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Leg2' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Leg1) == 0x0014F0, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Leg1' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing24) == 0x0014F8, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing24' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing23) == 0x001500, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing23' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing22) == 0x001508, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing22' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing21) == 0x001510, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing21' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing20) == 0x001518, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing20' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing19) == 0x001520, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing19' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing18) == 0x001528, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing18' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing17) == 0x001530, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing17' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing16) == 0x001538, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing16' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing15) == 0x001540, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing15' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing14) == 0x001548, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing14' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing13) == 0x001550, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing13' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing12) == 0x001558, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing12' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing11) == 0x001560, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing11' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing10) == 0x001568, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing10' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing9) == 0x001570, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing9' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing8) == 0x001578, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing8' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing7) == 0x001580, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing7' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing6) == 0x001588, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing6' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing5) == 0x001590, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing5' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing4) == 0x001598, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing4' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing3) == 0x0015A0, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing3' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing2) == 0x0015A8, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing2' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Wing1) == 0x0015B0, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Wing1' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Hand8) == 0x0015B8, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Hand8' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Hand7) == 0x0015C0, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Hand7' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Hand6) == 0x0015C8, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Hand6' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Hand5) == 0x0015D0, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Hand5' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Arm4) == 0x0015D8, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Arm4' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Arm3) == 0x0015E0, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Arm3' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Hand4) == 0x0015E8, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Hand4' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Hand3) == 0x0015F0, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Hand3' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Hand2) == 0x0015F8, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Hand2' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Hand1) == 0x001600, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Hand1' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Arm2) == 0x001608, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Arm2' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Arm1) == 0x001610, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Arm1' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Body3) == 0x001618, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Body3' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Body2) == 0x001620, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Body2' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Body1) == 0x001628, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Body1' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Neck2) == 0x001630, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Neck2' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Neck1) == 0x001638, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Neck1' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_FrostWyvern_HitBox_Head) == 0x001640, "Member 'ABP_FrostWyvern_C::BP_FrostWyvern_HitBox_Head' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Current_Combo) == 0x001648, "Member 'ABP_FrostWyvern_C::Current_Combo' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Statue_Count) == 0x00164C, "Member 'ABP_FrostWyvern_C::Statue_Count' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Max_Combo) == 0x001650, "Member 'ABP_FrostWyvern_C::Max_Combo' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Current_Skill) == 0x001654, "Member 'ABP_FrostWyvern_C::Current_Skill' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Possible_Next_Combo) == 0x001658, "Member 'ABP_FrostWyvern_C::Possible_Next_Combo' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Players_On_Center) == 0x0016A8, "Member 'ABP_FrostWyvern_C::Players_On_Center' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Players_On_Edge) == 0x0016B8, "Member 'ABP_FrostWyvern_C::Players_On_Edge' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Players_On_Combat_Area) == 0x0016C8, "Member 'ABP_FrostWyvern_C::Players_On_Combat_Area' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Target_Enemies) == 0x0016D8, "Member 'ABP_FrostWyvern_C::Target_Enemies' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Enemies_In_Special_Breath) == 0x0016E8, "Member 'ABP_FrostWyvern_C::Enemies_In_Special_Breath' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Enemies_Of_Exception_Special_Breath) == 0x0016F8, "Member 'ABP_FrostWyvern_C::Enemies_Of_Exception_Special_Breath' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Enemy_Location) == 0x001708, "Member 'ABP_FrostWyvern_C::Enemy_Location' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Pushing_Power) == 0x001710, "Member 'ABP_FrostWyvern_C::Pushing_Power' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Distance_To_Determine_Center) == 0x001718, "Member 'ABP_FrostWyvern_C::Distance_To_Determine_Center' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, As_BP_Frost_Wyvern) == 0x001720, "Member 'ABP_FrostWyvern_C::As_BP_Frost_Wyvern' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, FrostWyvern_Abilities) == 0x001728, "Member 'ABP_FrostWyvern_C::FrostWyvern_Abilities' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Next_Combo_Trigger_Tag) == 0x001778, "Member 'ABP_FrostWyvern_C::Next_Combo_Trigger_Tag' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Tag_Container_TailAttack1) == 0x001780, "Member 'ABP_FrostWyvern_C::Tag_Container_TailAttack1' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Tag_Container_TailAttack2) == 0x0017A0, "Member 'ABP_FrostWyvern_C::Tag_Container_TailAttack2' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Tag_Container_ForwardAttackL) == 0x0017C0, "Member 'ABP_FrostWyvern_C::Tag_Container_ForwardAttackL' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Tag_Container_ForwardAttackR) == 0x0017E0, "Member 'ABP_FrostWyvern_C::Tag_Container_ForwardAttackR' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Tag_Container_TwoHandAttack) == 0x001800, "Member 'ABP_FrostWyvern_C::Tag_Container_TwoHandAttack' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Tag_Container_Breath_Ground) == 0x001820, "Member 'ABP_FrostWyvern_C::Tag_Container_Breath_Ground' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Tag_Container_Breath_Air) == 0x001840, "Member 'ABP_FrostWyvern_C::Tag_Container_Breath_Air' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Tag_Container_LeapAttack1) == 0x001860, "Member 'ABP_FrostWyvern_C::Tag_Container_LeapAttack1' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Tag_Container_LeapAttack2) == 0x001880, "Member 'ABP_FrostWyvern_C::Tag_Container_LeapAttack2' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Off_Async_Action) == 0x0018A0, "Member 'ABP_FrostWyvern_C::Off_Async_Action' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, TwoHandAttack_Wait_Camera_Async_Action) == 0x0018A8, "Member 'ABP_FrostWyvern_C::TwoHandAttack_Wait_Camera_Async_Action' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Common_Wait_Camera_Async_Action) == 0x0018B0, "Member 'ABP_FrostWyvern_C::Common_Wait_Camera_Async_Action' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BreathBall_Explosion_Radius) == 0x0018B8, "Member 'ABP_FrostWyvern_C::BreathBall_Explosion_Radius' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Tag_Container_LeapAttack3) == 0x0018C0, "Member 'ABP_FrostWyvern_C::Tag_Container_LeapAttack3' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, AttackBox_Collisions_LeapAttack) == 0x0018E0, "Member 'ABP_FrostWyvern_C::AttackBox_Collisions_LeapAttack' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, TwoHandAttack_Radius) == 0x0018F0, "Member 'ABP_FrostWyvern_C::TwoHandAttack_Radius' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, LeapAttack3_Radius) == 0x0018F8, "Member 'ABP_FrostWyvern_C::LeapAttack3_Radius' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Over_Distance_From_Actor_To_Leap) == 0x001900, "Member 'ABP_FrostWyvern_C::Over_Distance_From_Actor_To_Leap' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMin_TailAttack1) == 0x001908, "Member 'ABP_FrostWyvern_C::PhaseMin_TailAttack1' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMax_TailAttack1) == 0x00190C, "Member 'ABP_FrostWyvern_C::PhaseMax_TailAttack1' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMin_TailAttack2) == 0x001910, "Member 'ABP_FrostWyvern_C::PhaseMin_TailAttack2' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMax_TailAttack2) == 0x001914, "Member 'ABP_FrostWyvern_C::PhaseMax_TailAttack2' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMin_ForwardAttackL) == 0x001918, "Member 'ABP_FrostWyvern_C::PhaseMin_ForwardAttackL' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMax_ForwardAttackL) == 0x00191C, "Member 'ABP_FrostWyvern_C::PhaseMax_ForwardAttackL' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMin_ForwardAttackR) == 0x001920, "Member 'ABP_FrostWyvern_C::PhaseMin_ForwardAttackR' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMax_ForwardAttackR) == 0x001924, "Member 'ABP_FrostWyvern_C::PhaseMax_ForwardAttackR' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMin_BreathGround) == 0x001928, "Member 'ABP_FrostWyvern_C::PhaseMin_BreathGround' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMax_BreathGround) == 0x00192C, "Member 'ABP_FrostWyvern_C::PhaseMax_BreathGround' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMin_BreathAir) == 0x001930, "Member 'ABP_FrostWyvern_C::PhaseMin_BreathAir' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMax_BreathAir) == 0x001934, "Member 'ABP_FrostWyvern_C::PhaseMax_BreathAir' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMin_LeapAttack1) == 0x001938, "Member 'ABP_FrostWyvern_C::PhaseMin_LeapAttack1' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMax_LeapAttack1) == 0x00193C, "Member 'ABP_FrostWyvern_C::PhaseMax_LeapAttack1' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMin_LeapAttack2) == 0x001940, "Member 'ABP_FrostWyvern_C::PhaseMin_LeapAttack2' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMax_LeapAttack2) == 0x001944, "Member 'ABP_FrostWyvern_C::PhaseMax_LeapAttack2' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMin_LeapAttack3) == 0x001948, "Member 'ABP_FrostWyvern_C::PhaseMin_LeapAttack3' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, PhaseMax_LeapAttack3) == 0x00194C, "Member 'ABP_FrostWyvern_C::PhaseMax_LeapAttack3' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Eggs) == 0x001950, "Member 'ABP_FrostWyvern_C::Eggs' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, BP_Frost_Wyvern_Hit_Box_Wing_18) == 0x001960, "Member 'ABP_FrostWyvern_C::BP_Frost_Wyvern_Hit_Box_Wing_18' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Pushing_Wind_VFX_Radius) == 0x001968, "Member 'ABP_FrostWyvern_C::Pushing_Wind_VFX_Radius' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Enemies_In_Windforce_Area_Special_Breath_Ground) == 0x001970, "Member 'ABP_FrostWyvern_C::Enemies_In_Windforce_Area_Special_Breath_Ground' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Enemies_Out_Windforce_Area_Special_Breath_Ground) == 0x001980, "Member 'ABP_FrostWyvern_C::Enemies_Out_Windforce_Area_Special_Breath_Ground' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Count_Hiding_Eggs_By_Tick) == 0x001990, "Member 'ABP_FrostWyvern_C::Count_Hiding_Eggs_By_Tick' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Hide_Eggs_TimerHandle) == 0x001998, "Member 'ABP_FrostWyvern_C::Hide_Eggs_TimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Cursed_Count) == 0x0019A0, "Member 'ABP_FrostWyvern_C::Cursed_Count' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, DemonStatues) == 0x0019A8, "Member 'ABP_FrostWyvern_C::DemonStatues' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Trigger_Sphere_Combat_Area) == 0x0019B8, "Member 'ABP_FrostWyvern_C::Trigger_Sphere_Combat_Area' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Trigger_Sphere_Recognize_Area) == 0x0019C0, "Member 'ABP_FrostWyvern_C::Trigger_Sphere_Recognize_Area' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, IcePillars) == 0x0019C8, "Member 'ABP_FrostWyvern_C::IcePillars' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Egg_Hided_For_Replication) == 0x0019D8, "Member 'ABP_FrostWyvern_C::Egg_Hided_For_Replication' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Deactivate_Curse_Count) == 0x0019DC, "Member 'ABP_FrostWyvern_C::Deactivate_Curse_Count' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Did_Special) == 0x0019E0, "Member 'ABP_FrostWyvern_C::Did_Special' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Last_Ability) == 0x0019F0, "Member 'ABP_FrostWyvern_C::Last_Ability' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Use_Statue) == 0x0019F1, "Member 'ABP_FrostWyvern_C::Use_Statue' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Cursed_Area_Destroyed) == 0x0019F2, "Member 'ABP_FrostWyvern_C::Cursed_Area_Destroyed' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Combat_Area_Radius) == 0x0019F8, "Member 'ABP_FrostWyvern_C::Combat_Area_Radius' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, HP_Phase_Ratio) == 0x001A00, "Member 'ABP_FrostWyvern_C::HP_Phase_Ratio' has a wrong offset!");
static_assert(offsetof(ABP_FrostWyvern_C, Damage_Immune_Effect_Handle) == 0x001A08, "Member 'ABP_FrostWyvern_C::Damage_Immune_Effect_Handle' has a wrong offset!");

}

