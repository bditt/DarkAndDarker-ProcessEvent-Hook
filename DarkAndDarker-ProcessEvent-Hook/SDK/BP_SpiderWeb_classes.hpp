#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpiderWeb

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_TrapBase_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SpiderWeb.BP_SpiderWeb_C
// 0x00D0 (0x0648 - 0x0578)
class ABP_SpiderWeb_C final : public ABP_TrapBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_SpiderWeb_C;                     // 0x0578(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   WebMesh;                                           // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox;                                       // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          OnDisableDestroyContact;                           // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnContactCountDestroy;                             // 0x0599(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_566C[0x2];                                     // 0x059A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxContactCount;                                   // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnRecovery;                                        // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_566D[0x7];                                     // 0x05A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RecoveryTime;                                      // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MaterialOnDestroyRect;                             // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MaterialRect;                                      // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ScaleBoost;                                        // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GizmoInfluence;                                    // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            StaticMesh;                                        // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TopLeft;                                           // 0x05D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TopRight;                                          // 0x05F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BotRight;                                          // 0x0608(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BotLeft;                                           // 0x0620(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_Deactivate;                                    // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_Activate;                                      // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExchangeYZ(const struct FVector& In, struct FVector* Out);
	void ExecuteUbergraph_BP_SpiderWeb(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void GetDestroyCount(int32* Result);
	void GetRecoveryTime(double* Result);
	void IsContactCountDestroy(bool* Result);
	void IsDisableDestroyContact(bool* Result);
	void IsRecovery(bool* Result);
	void ReceiveBeginPlay();
	void SetPointPosition(class UMaterialInstanceDynamic*& Material_Instance, const struct FVector& Param_TopLeft, const struct FVector& Param_TopRight, const struct FVector& Param_BotLeft, const struct FVector& Param_BotRight, double Influence);
	void UpdateSpiderWebMaterial(class UMaterialInstanceDynamic* InDynamicMaterialInstance);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SpiderWeb_C">();
	}
	static class ABP_SpiderWeb_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SpiderWeb_C>();
	}
};
static_assert(alignof(ABP_SpiderWeb_C) == 0x000008, "Wrong alignment on ABP_SpiderWeb_C");
static_assert(sizeof(ABP_SpiderWeb_C) == 0x000648, "Wrong size on ABP_SpiderWeb_C");
static_assert(offsetof(ABP_SpiderWeb_C, UberGraphFrame_BP_SpiderWeb_C) == 0x000578, "Member 'ABP_SpiderWeb_C::UberGraphFrame_BP_SpiderWeb_C' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, WebMesh) == 0x000580, "Member 'ABP_SpiderWeb_C::WebMesh' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, Niagara) == 0x000588, "Member 'ABP_SpiderWeb_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, BP_DCHitBox) == 0x000590, "Member 'ABP_SpiderWeb_C::BP_DCHitBox' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, OnDisableDestroyContact) == 0x000598, "Member 'ABP_SpiderWeb_C::OnDisableDestroyContact' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, OnContactCountDestroy) == 0x000599, "Member 'ABP_SpiderWeb_C::OnContactCountDestroy' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, MaxContactCount) == 0x00059C, "Member 'ABP_SpiderWeb_C::MaxContactCount' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, OnRecovery) == 0x0005A0, "Member 'ABP_SpiderWeb_C::OnRecovery' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, RecoveryTime) == 0x0005A8, "Member 'ABP_SpiderWeb_C::RecoveryTime' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, MaterialOnDestroyRect) == 0x0005B0, "Member 'ABP_SpiderWeb_C::MaterialOnDestroyRect' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, MaterialRect) == 0x0005B8, "Member 'ABP_SpiderWeb_C::MaterialRect' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, ScaleBoost) == 0x0005C0, "Member 'ABP_SpiderWeb_C::ScaleBoost' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, GizmoInfluence) == 0x0005C8, "Member 'ABP_SpiderWeb_C::GizmoInfluence' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, StaticMesh) == 0x0005D0, "Member 'ABP_SpiderWeb_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, TopLeft) == 0x0005D8, "Member 'ABP_SpiderWeb_C::TopLeft' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, TopRight) == 0x0005F0, "Member 'ABP_SpiderWeb_C::TopRight' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, BotRight) == 0x000608, "Member 'ABP_SpiderWeb_C::BotRight' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, BotLeft) == 0x000620, "Member 'ABP_SpiderWeb_C::BotLeft' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, MID_Deactivate) == 0x000638, "Member 'ABP_SpiderWeb_C::MID_Deactivate' has a wrong offset!");
static_assert(offsetof(ABP_SpiderWeb_C, MID_Activate) == 0x000640, "Member 'ABP_SpiderWeb_C::MID_Activate' has a wrong offset!");

}

