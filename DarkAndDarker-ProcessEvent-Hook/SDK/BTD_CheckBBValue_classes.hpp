#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_CheckBBValue

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "E_Variables_structs.hpp"
#include "E_CompareNumber_structs.hpp"
#include "E_LocationVariables_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTD_CheckBBValue.BTD_CheckBBValue_C
// 0x0058 (0x00F8 - 0x00A0)
class UBTD_CheckBBValue_C final : public UBTDecorator_BlueprintBase
{
public:
	E_Variables                                   Variable_Type;                                     // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TURR;                                              // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CompareNumber                               Int;                                               // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C47[0x5];                                     // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Float_Value;                                       // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Int_Value;                                         // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C48[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 Select_Key;                                        // 0x00B8(0x0028)(Edit, BlueprintVisible)
	class FName                                   Key_Name;                                          // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LocationVariables                           Select_Vector;                                     // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C49[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Tolerance;                                         // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Controlled_Pawn;                                   // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void CompareFloatValue(bool* Bool);
	void CompareIntValue(bool* Bool);
	void CompareVectorValue(bool* Bool);
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTD_CheckBBValue_C">();
	}
	static class UBTD_CheckBBValue_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTD_CheckBBValue_C>();
	}
};
static_assert(alignof(UBTD_CheckBBValue_C) == 0x000008, "Wrong alignment on UBTD_CheckBBValue_C");
static_assert(sizeof(UBTD_CheckBBValue_C) == 0x0000F8, "Wrong size on UBTD_CheckBBValue_C");
static_assert(offsetof(UBTD_CheckBBValue_C, Variable_Type) == 0x0000A0, "Member 'UBTD_CheckBBValue_C::Variable_Type' has a wrong offset!");
static_assert(offsetof(UBTD_CheckBBValue_C, TURR) == 0x0000A1, "Member 'UBTD_CheckBBValue_C::TURR' has a wrong offset!");
static_assert(offsetof(UBTD_CheckBBValue_C, Int) == 0x0000A2, "Member 'UBTD_CheckBBValue_C::Int' has a wrong offset!");
static_assert(offsetof(UBTD_CheckBBValue_C, Float_Value) == 0x0000A8, "Member 'UBTD_CheckBBValue_C::Float_Value' has a wrong offset!");
static_assert(offsetof(UBTD_CheckBBValue_C, Int_Value) == 0x0000B0, "Member 'UBTD_CheckBBValue_C::Int_Value' has a wrong offset!");
static_assert(offsetof(UBTD_CheckBBValue_C, Select_Key) == 0x0000B8, "Member 'UBTD_CheckBBValue_C::Select_Key' has a wrong offset!");
static_assert(offsetof(UBTD_CheckBBValue_C, Key_Name) == 0x0000E0, "Member 'UBTD_CheckBBValue_C::Key_Name' has a wrong offset!");
static_assert(offsetof(UBTD_CheckBBValue_C, Select_Vector) == 0x0000E8, "Member 'UBTD_CheckBBValue_C::Select_Vector' has a wrong offset!");
static_assert(offsetof(UBTD_CheckBBValue_C, Tolerance) == 0x0000EC, "Member 'UBTD_CheckBBValue_C::Tolerance' has a wrong offset!");
static_assert(offsetof(UBTD_CheckBBValue_C, Controlled_Pawn) == 0x0000F0, "Member 'UBTD_CheckBBValue_C::Controlled_Pawn' has a wrong offset!");

}

