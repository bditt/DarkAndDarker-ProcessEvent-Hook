#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_SpectralKnight_Move

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GA_MonsterGameplayAbilityBase_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_SpectralKnight_Move.GA_SpectralKnight_Move_C
// 0x0050 (0x0618 - 0x05C8)
class UGA_SpectralKnight_Move_C final : public UGA_MonsterGameplayAbilityBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_SpectralKnight_Common_C*            As_BP_Spectral_Knight;                             // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction_Vector;                                  // 0x05D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Movement_Input_Timer_Handle;                       // 0x05F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Random_Direction;                                  // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C0[0x3];                                     // 0x05F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Limit_Move_Time;                                   // 0x05FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Stop_Move_Timer;                                   // 0x0600(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDCAT_RotateToActor*                    Rotation_Async_Task;                               // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Player_Count;                                      // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AbilityActivated(const struct FGameplayEventData& TriggerEventData);
	void EventReceived_84C0025C4195DF8CA26D3892A76A176C(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_GA_SpectralKnight_Move(int32 EntryPoint);
	void K2_OnEndAbility(bool bWasCancelled);
	void Movement_Input();
	void OnFail_B1C72CBC4DDD4D00CE8FE580492D264B(EPathFollowingResult MovementResult);
	void OnSuccess_B1C72CBC4DDD4D00CE8FE580492D264B(EPathFollowingResult MovementResult);
	void Start_Move_Timer();
	void Func_Stop_Move_Timer();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_SpectralKnight_Move_C">();
	}
	static class UGA_SpectralKnight_Move_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_SpectralKnight_Move_C>();
	}
};
static_assert(alignof(UGA_SpectralKnight_Move_C) == 0x000008, "Wrong alignment on UGA_SpectralKnight_Move_C");
static_assert(sizeof(UGA_SpectralKnight_Move_C) == 0x000618, "Wrong size on UGA_SpectralKnight_Move_C");
static_assert(offsetof(UGA_SpectralKnight_Move_C, UberGraphFrame) == 0x0005C8, "Member 'UGA_SpectralKnight_Move_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_SpectralKnight_Move_C, As_BP_Spectral_Knight) == 0x0005D0, "Member 'UGA_SpectralKnight_Move_C::As_BP_Spectral_Knight' has a wrong offset!");
static_assert(offsetof(UGA_SpectralKnight_Move_C, Direction_Vector) == 0x0005D8, "Member 'UGA_SpectralKnight_Move_C::Direction_Vector' has a wrong offset!");
static_assert(offsetof(UGA_SpectralKnight_Move_C, Movement_Input_Timer_Handle) == 0x0005F0, "Member 'UGA_SpectralKnight_Move_C::Movement_Input_Timer_Handle' has a wrong offset!");
static_assert(offsetof(UGA_SpectralKnight_Move_C, Random_Direction) == 0x0005F8, "Member 'UGA_SpectralKnight_Move_C::Random_Direction' has a wrong offset!");
static_assert(offsetof(UGA_SpectralKnight_Move_C, Limit_Move_Time) == 0x0005FC, "Member 'UGA_SpectralKnight_Move_C::Limit_Move_Time' has a wrong offset!");
static_assert(offsetof(UGA_SpectralKnight_Move_C, Stop_Move_Timer) == 0x000600, "Member 'UGA_SpectralKnight_Move_C::Stop_Move_Timer' has a wrong offset!");
static_assert(offsetof(UGA_SpectralKnight_Move_C, Rotation_Async_Task) == 0x000608, "Member 'UGA_SpectralKnight_Move_C::Rotation_Async_Task' has a wrong offset!");
static_assert(offsetof(UGA_SpectralKnight_Move_C, Player_Count) == 0x000610, "Member 'UGA_SpectralKnight_Move_C::Player_Count' has a wrong offset!");

}

