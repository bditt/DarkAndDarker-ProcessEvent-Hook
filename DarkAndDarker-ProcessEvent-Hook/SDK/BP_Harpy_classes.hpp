#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Harpy

#include "Basic.hpp"

#include "BP_DCMonsterBaseWithOptions_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Harpy.BP_Harpy_C
// 0x0080 (0x1460 - 0x13E0)
class ABP_Harpy_C : public ABP_DCMonsterBaseWithOptions_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Harpy_C;                         // 0x13D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_DCHitBox_C*                         Hitbox_Claw_R;                                     // 0x13E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_Claw_L;                                     // 0x13E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Foot_R;                                     // 0x13F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Foot_L;                                     // 0x13F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_Calf_R;                                     // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_Calf_L;                                     // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_Thigh_L1;                                   // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Thigh_L;                                    // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Hand_R;                                     // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Hand_L;                                     // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_LowerArm_R;                                 // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_LowerArm_L;                                 // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_UpperArm_R;                                 // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_UpperArm_L;                                 // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Body;                                       // 0x1450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Head;                                       // 0x1458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Harpy(int32 EntryPoint);
	void Falling_Event();
	void Falling_Event_(ECollisionResponse NewResponse);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void OnFMsgGASAttributeNotifyBlueprint(const struct FMsgGASAttributeNotify& InMsg);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Harpy_C">();
	}
	static class ABP_Harpy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Harpy_C>();
	}
};
static_assert(alignof(ABP_Harpy_C) == 0x000010, "Wrong alignment on ABP_Harpy_C");
static_assert(sizeof(ABP_Harpy_C) == 0x001460, "Wrong size on ABP_Harpy_C");
static_assert(offsetof(ABP_Harpy_C, UberGraphFrame_BP_Harpy_C) == 0x0013D8, "Member 'ABP_Harpy_C::UberGraphFrame_BP_Harpy_C' has a wrong offset!");
static_assert(offsetof(ABP_Harpy_C, Hitbox_Claw_R) == 0x0013E0, "Member 'ABP_Harpy_C::Hitbox_Claw_R' has a wrong offset!");
static_assert(offsetof(ABP_Harpy_C, Hitbox_Claw_L) == 0x0013E8, "Member 'ABP_Harpy_C::Hitbox_Claw_L' has a wrong offset!");
static_assert(offsetof(ABP_Harpy_C, HitBox_Foot_R) == 0x0013F0, "Member 'ABP_Harpy_C::HitBox_Foot_R' has a wrong offset!");
static_assert(offsetof(ABP_Harpy_C, HitBox_Foot_L) == 0x0013F8, "Member 'ABP_Harpy_C::HitBox_Foot_L' has a wrong offset!");
static_assert(offsetof(ABP_Harpy_C, Hitbox_Calf_R) == 0x001400, "Member 'ABP_Harpy_C::Hitbox_Calf_R' has a wrong offset!");
static_assert(offsetof(ABP_Harpy_C, Hitbox_Calf_L) == 0x001408, "Member 'ABP_Harpy_C::Hitbox_Calf_L' has a wrong offset!");
static_assert(offsetof(ABP_Harpy_C, Hitbox_Thigh_L1) == 0x001410, "Member 'ABP_Harpy_C::Hitbox_Thigh_L1' has a wrong offset!");
static_assert(offsetof(ABP_Harpy_C, HitBox_Thigh_L) == 0x001418, "Member 'ABP_Harpy_C::HitBox_Thigh_L' has a wrong offset!");
static_assert(offsetof(ABP_Harpy_C, HitBox_Hand_R) == 0x001420, "Member 'ABP_Harpy_C::HitBox_Hand_R' has a wrong offset!");
static_assert(offsetof(ABP_Harpy_C, HitBox_Hand_L) == 0x001428, "Member 'ABP_Harpy_C::HitBox_Hand_L' has a wrong offset!");
static_assert(offsetof(ABP_Harpy_C, Hitbox_LowerArm_R) == 0x001430, "Member 'ABP_Harpy_C::Hitbox_LowerArm_R' has a wrong offset!");
static_assert(offsetof(ABP_Harpy_C, Hitbox_LowerArm_L) == 0x001438, "Member 'ABP_Harpy_C::Hitbox_LowerArm_L' has a wrong offset!");
static_assert(offsetof(ABP_Harpy_C, Hitbox_UpperArm_R) == 0x001440, "Member 'ABP_Harpy_C::Hitbox_UpperArm_R' has a wrong offset!");
static_assert(offsetof(ABP_Harpy_C, Hitbox_UpperArm_L) == 0x001448, "Member 'ABP_Harpy_C::Hitbox_UpperArm_L' has a wrong offset!");
static_assert(offsetof(ABP_Harpy_C, HitBox_Body) == 0x001450, "Member 'ABP_Harpy_C::HitBox_Body' has a wrong offset!");
static_assert(offsetof(ABP_Harpy_C, HitBox_Head) == 0x001458, "Member 'ABP_Harpy_C::HitBox_Head' has a wrong offset!");

}

