#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IceGiantSpider

#include "Basic.hpp"

#include "BP_DCMonsterBaseWithOptions_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_IceGiantSpider.BP_IceGiantSpider_C
// 0x0100 (0x14E0 - 0x13E0)
class ABP_IceGiantSpider_C : public ABP_DCMonsterBaseWithOptions_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_IceGiantSpider_C;                // 0x13D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Cylinder;                                          // 0x13E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_L_01_04;                                // 0x13E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_L_01_03;                                // 0x13F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_L_01_01;                                // 0x13F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_L_02_03;                                // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_L_02_02;                                // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_L_02_01;                                // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_L_02_04;                                // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_R_02_04;                                // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_R_02_03;                                // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_R_02_02;                                // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_R_02_01;                                // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_R_01_04;                                // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_R_01_03;                                // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_R_01_02;                                // 0x1450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_R_01_01;                                // 0x1458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Reg_L_03;                                   // 0x1460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Reg_L_04;                                   // 0x1468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Reg_L_02;                                   // 0x1470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Reg_L_01;                                   // 0x1478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Reg_R_04;                                   // 0x1480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Reg_R_03;                                   // 0x1488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Reg_R_02;                                   // 0x1490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Reg_R_01;                                   // 0x1498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Arm_L_01_02;                                // 0x14A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Body_01;                                    // 0x14A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Head;                                       // 0x14B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          BackStep_CoolTime;                                 // 0x14B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45DE[0x7];                                     // 0x14B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Spawn_Correction_Height;                           // 0x14C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Faild_Spaw_Correction_Height;                      // 0x14C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HangOn_State;                                      // 0x14D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Used_WakeUp;                                       // 0x14D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_IceGiantSpider_Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Buff_Movespeed_Off();
	void Buff_Movespeed_On();
	void Do_WakeUp();
	void EventReceived_896312FE4A354B9870006B87D4A95C77(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_BP_IceGiantSpider(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void OnAsyncInitialized();
	void OnFMsgGASAttributeNotifyBlueprint(const struct FMsgGASAttributeNotify& InMsg);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_IceGiantSpider_C">();
	}
	static class ABP_IceGiantSpider_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_IceGiantSpider_C>();
	}
};
static_assert(alignof(ABP_IceGiantSpider_C) == 0x000010, "Wrong alignment on ABP_IceGiantSpider_C");
static_assert(sizeof(ABP_IceGiantSpider_C) == 0x0014E0, "Wrong size on ABP_IceGiantSpider_C");
static_assert(offsetof(ABP_IceGiantSpider_C, UberGraphFrame_BP_IceGiantSpider_C) == 0x0013D8, "Member 'ABP_IceGiantSpider_C::UberGraphFrame_BP_IceGiantSpider_C' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, Cylinder) == 0x0013E0, "Member 'ABP_IceGiantSpider_C::Cylinder' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Arm_L_01_04) == 0x0013E8, "Member 'ABP_IceGiantSpider_C::HitBox_Arm_L_01_04' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Arm_L_01_03) == 0x0013F0, "Member 'ABP_IceGiantSpider_C::HitBox_Arm_L_01_03' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Arm_L_01_01) == 0x0013F8, "Member 'ABP_IceGiantSpider_C::HitBox_Arm_L_01_01' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Arm_L_02_03) == 0x001400, "Member 'ABP_IceGiantSpider_C::HitBox_Arm_L_02_03' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Arm_L_02_02) == 0x001408, "Member 'ABP_IceGiantSpider_C::HitBox_Arm_L_02_02' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Arm_L_02_01) == 0x001410, "Member 'ABP_IceGiantSpider_C::HitBox_Arm_L_02_01' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Arm_L_02_04) == 0x001418, "Member 'ABP_IceGiantSpider_C::HitBox_Arm_L_02_04' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Arm_R_02_04) == 0x001420, "Member 'ABP_IceGiantSpider_C::HitBox_Arm_R_02_04' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Arm_R_02_03) == 0x001428, "Member 'ABP_IceGiantSpider_C::HitBox_Arm_R_02_03' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Arm_R_02_02) == 0x001430, "Member 'ABP_IceGiantSpider_C::HitBox_Arm_R_02_02' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Arm_R_02_01) == 0x001438, "Member 'ABP_IceGiantSpider_C::HitBox_Arm_R_02_01' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Arm_R_01_04) == 0x001440, "Member 'ABP_IceGiantSpider_C::HitBox_Arm_R_01_04' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Arm_R_01_03) == 0x001448, "Member 'ABP_IceGiantSpider_C::HitBox_Arm_R_01_03' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Arm_R_01_02) == 0x001450, "Member 'ABP_IceGiantSpider_C::HitBox_Arm_R_01_02' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Arm_R_01_01) == 0x001458, "Member 'ABP_IceGiantSpider_C::HitBox_Arm_R_01_01' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Reg_L_03) == 0x001460, "Member 'ABP_IceGiantSpider_C::HitBox_Reg_L_03' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Reg_L_04) == 0x001468, "Member 'ABP_IceGiantSpider_C::HitBox_Reg_L_04' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Reg_L_02) == 0x001470, "Member 'ABP_IceGiantSpider_C::HitBox_Reg_L_02' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Reg_L_01) == 0x001478, "Member 'ABP_IceGiantSpider_C::HitBox_Reg_L_01' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Reg_R_04) == 0x001480, "Member 'ABP_IceGiantSpider_C::HitBox_Reg_R_04' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Reg_R_03) == 0x001488, "Member 'ABP_IceGiantSpider_C::HitBox_Reg_R_03' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Reg_R_02) == 0x001490, "Member 'ABP_IceGiantSpider_C::HitBox_Reg_R_02' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Reg_R_01) == 0x001498, "Member 'ABP_IceGiantSpider_C::HitBox_Reg_R_01' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Arm_L_01_02) == 0x0014A0, "Member 'ABP_IceGiantSpider_C::HitBox_Arm_L_01_02' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Body_01) == 0x0014A8, "Member 'ABP_IceGiantSpider_C::HitBox_Body_01' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HitBox_Head) == 0x0014B0, "Member 'ABP_IceGiantSpider_C::HitBox_Head' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, BackStep_CoolTime) == 0x0014B8, "Member 'ABP_IceGiantSpider_C::BackStep_CoolTime' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, Spawn_Correction_Height) == 0x0014C0, "Member 'ABP_IceGiantSpider_C::Spawn_Correction_Height' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, Faild_Spaw_Correction_Height) == 0x0014C8, "Member 'ABP_IceGiantSpider_C::Faild_Spaw_Correction_Height' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, HangOn_State) == 0x0014D0, "Member 'ABP_IceGiantSpider_C::HangOn_State' has a wrong offset!");
static_assert(offsetof(ABP_IceGiantSpider_C, Used_WakeUp) == 0x0014D1, "Member 'ABP_IceGiantSpider_C::Used_WakeUp' has a wrong offset!");

}

