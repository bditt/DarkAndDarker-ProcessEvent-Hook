#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_ApplyEffectToPartyWithinRangePerkBase

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DungeonCrawler_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GA_ActivateOnGranted_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_ApplyEffectToPartyWithinRangePerkBase.GA_ApplyEffectToPartyWithinRangePerkBase_C
// 0x0218 (0x07B8 - 0x05A0)
class UGA_ApplyEffectToPartyWithinRangePerkBase_C : public UGA_ActivateOnGranted_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FPrimaryAssetId                        PerkId;                                            // 0x05A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       AuraCollision;                                     // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsExceptForOwner;                                 // 0x05C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5572[0x3];                                     // 0x05C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           PerkStateTag;                                      // 0x05C4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5573[0x4];                                     // 0x05CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectQuery                   PerkStateQuery;                                    // 0x05D0(0x0198)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FGameplayTag                           GrantedAbilityTag;                                 // 0x0768(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        GrantingAbilityId;                                 // 0x0770(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FDCGameplayAbilityData                 Out_Gameplay_Ability_Data;                         // 0x0780(0x0028)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<class ADCPlayerCharacterBase*>         EffectAppliedActors;                               // 0x07A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance)

public:
	void ApplyEffect(class ADCPlayerCharacterBase* Target, bool* bIsApplied);
	void CanApplyEffect(class ADCCharacterBase* OverlapCharacter, bool* CanApply);
	void CreateAndAttachCollisionToOwner(class USphereComponent** Output_Get);
	void ExecuteUbergraph_GA_ApplyEffectToPartyWithinRangePerkBase(int32 EntryPoint);
	void GrantAbility(class AActor* Target);
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void K2_OnEndAbility(bool bWasCancelled);
	void OnComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnComponentEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void RemoveEffect(class ADCPlayerCharacterBase* Character);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_ApplyEffectToPartyWithinRangePerkBase_C">();
	}
	static class UGA_ApplyEffectToPartyWithinRangePerkBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_ApplyEffectToPartyWithinRangePerkBase_C>();
	}
};
static_assert(alignof(UGA_ApplyEffectToPartyWithinRangePerkBase_C) == 0x000008, "Wrong alignment on UGA_ApplyEffectToPartyWithinRangePerkBase_C");
static_assert(sizeof(UGA_ApplyEffectToPartyWithinRangePerkBase_C) == 0x0007B8, "Wrong size on UGA_ApplyEffectToPartyWithinRangePerkBase_C");
static_assert(offsetof(UGA_ApplyEffectToPartyWithinRangePerkBase_C, UberGraphFrame) == 0x0005A0, "Member 'UGA_ApplyEffectToPartyWithinRangePerkBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_ApplyEffectToPartyWithinRangePerkBase_C, PerkId) == 0x0005A8, "Member 'UGA_ApplyEffectToPartyWithinRangePerkBase_C::PerkId' has a wrong offset!");
static_assert(offsetof(UGA_ApplyEffectToPartyWithinRangePerkBase_C, AuraCollision) == 0x0005B8, "Member 'UGA_ApplyEffectToPartyWithinRangePerkBase_C::AuraCollision' has a wrong offset!");
static_assert(offsetof(UGA_ApplyEffectToPartyWithinRangePerkBase_C, bIsExceptForOwner) == 0x0005C0, "Member 'UGA_ApplyEffectToPartyWithinRangePerkBase_C::bIsExceptForOwner' has a wrong offset!");
static_assert(offsetof(UGA_ApplyEffectToPartyWithinRangePerkBase_C, PerkStateTag) == 0x0005C4, "Member 'UGA_ApplyEffectToPartyWithinRangePerkBase_C::PerkStateTag' has a wrong offset!");
static_assert(offsetof(UGA_ApplyEffectToPartyWithinRangePerkBase_C, PerkStateQuery) == 0x0005D0, "Member 'UGA_ApplyEffectToPartyWithinRangePerkBase_C::PerkStateQuery' has a wrong offset!");
static_assert(offsetof(UGA_ApplyEffectToPartyWithinRangePerkBase_C, GrantedAbilityTag) == 0x000768, "Member 'UGA_ApplyEffectToPartyWithinRangePerkBase_C::GrantedAbilityTag' has a wrong offset!");
static_assert(offsetof(UGA_ApplyEffectToPartyWithinRangePerkBase_C, GrantingAbilityId) == 0x000770, "Member 'UGA_ApplyEffectToPartyWithinRangePerkBase_C::GrantingAbilityId' has a wrong offset!");
static_assert(offsetof(UGA_ApplyEffectToPartyWithinRangePerkBase_C, Out_Gameplay_Ability_Data) == 0x000780, "Member 'UGA_ApplyEffectToPartyWithinRangePerkBase_C::Out_Gameplay_Ability_Data' has a wrong offset!");
static_assert(offsetof(UGA_ApplyEffectToPartyWithinRangePerkBase_C, EffectAppliedActors) == 0x0007A8, "Member 'UGA_ApplyEffectToPartyWithinRangePerkBase_C::EffectAppliedActors' has a wrong offset!");

}

