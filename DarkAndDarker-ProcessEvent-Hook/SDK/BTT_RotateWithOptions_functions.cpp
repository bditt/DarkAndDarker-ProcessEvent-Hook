#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_RotateWithOptions

#include "Basic.hpp"

#include "BTT_RotateWithOptions_classes.hpp"
#include "BTT_RotateWithOptions_parameters.hpp"


namespace SDK
{

// Function BTT_RotateWithOptions.BTT_RotateWithOptions_C.ExecuteUbergraph_BTT_RotateWithOptions
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_RotateWithOptions_C::ExecuteUbergraph_BTT_RotateWithOptions(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_RotateWithOptions_C", "ExecuteUbergraph_BTT_RotateWithOptions");

	Params::BTT_RotateWithOptions_C_ExecuteUbergraph_BTT_RotateWithOptions Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_RotateWithOptions.BTT_RotateWithOptions_C.GetFloatRotationValue
// (Public, BlueprintCallable, BlueprintEvent)

void UBTT_RotateWithOptions_C::GetFloatRotationValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_RotateWithOptions_C", "GetFloatRotationValue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTT_RotateWithOptions.BTT_RotateWithOptions_C.GetHitBoxLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADCCharacterBase*                 DCCharacterBase                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTT_RotateWithOptions_C::GetHitBoxLocation(class ADCCharacterBase* DCCharacterBase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_RotateWithOptions_C", "GetHitBoxLocation");

	Params::BTT_RotateWithOptions_C_GetHitBoxLocation Parms{};

	Parms.DCCharacterBase = DCCharacterBase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_RotateWithOptions.BTT_RotateWithOptions_C.ReceiveExecuteAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTT_RotateWithOptions_C::ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_RotateWithOptions_C", "ReceiveExecuteAI");

	Params::BTT_RotateWithOptions_C_ReceiveExecuteAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_RotateWithOptions.BTT_RotateWithOptions_C.ReceiveTickAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_RotateWithOptions_C::ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_RotateWithOptions_C", "ReceiveTickAI");

	Params::BTT_RotateWithOptions_C_ReceiveTickAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}

}

