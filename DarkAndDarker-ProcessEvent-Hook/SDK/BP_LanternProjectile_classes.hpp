#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LanternProjectile

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BP_ProjectileToSpawnItemHolder_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LanternProjectile.BP_LanternProjectile_C
// 0x0030 (0x07D0 - 0x07A0)
class ABP_LanternProjectile_C final : public ABP_ProjectileToSpawnItemHolder_C
{
public:
	class UNiagaraComponent*                      FXS_Fire_OilLantern_Util;                          // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLightFire;                                    // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URotatingMovementComponent*             RotatingMovement;                                  // 0x07B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RepRotation;                                       // 0x07B8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)

public:
	void OnRep_RepRotation();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LanternProjectile_C">();
	}
	static class ABP_LanternProjectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LanternProjectile_C>();
	}
};
static_assert(alignof(ABP_LanternProjectile_C) == 0x000010, "Wrong alignment on ABP_LanternProjectile_C");
static_assert(sizeof(ABP_LanternProjectile_C) == 0x0007D0, "Wrong size on ABP_LanternProjectile_C");
static_assert(offsetof(ABP_LanternProjectile_C, FXS_Fire_OilLantern_Util) == 0x000798, "Member 'ABP_LanternProjectile_C::FXS_Fire_OilLantern_Util' has a wrong offset!");
static_assert(offsetof(ABP_LanternProjectile_C, PointLightFire) == 0x0007A0, "Member 'ABP_LanternProjectile_C::PointLightFire' has a wrong offset!");
static_assert(offsetof(ABP_LanternProjectile_C, PointLight) == 0x0007A8, "Member 'ABP_LanternProjectile_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_LanternProjectile_C, RotatingMovement) == 0x0007B0, "Member 'ABP_LanternProjectile_C::RotatingMovement' has a wrong offset!");
static_assert(offsetof(ABP_LanternProjectile_C, RepRotation) == 0x0007B8, "Member 'ABP_LanternProjectile_C::RepRotation' has a wrong offset!");

}

