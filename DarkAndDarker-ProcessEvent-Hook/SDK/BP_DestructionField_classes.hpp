#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DestructionField

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FieldSystemEngine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DestructionField.BP_DestructionField_C
// 0x0020 (0x02C0 - 0x02A0)
class ABP_DestructionField_C final : public AFieldSystemActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URadialVector*                          RadialVector;                                      // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URadialFalloff*                         RadialFalloff;                                     // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DestructionField(int32 EntryPoint);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DestructionField_C">();
	}
	static class ABP_DestructionField_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DestructionField_C>();
	}
};
static_assert(alignof(ABP_DestructionField_C) == 0x000008, "Wrong alignment on ABP_DestructionField_C");
static_assert(sizeof(ABP_DestructionField_C) == 0x0002C0, "Wrong size on ABP_DestructionField_C");
static_assert(offsetof(ABP_DestructionField_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_DestructionField_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DestructionField_C, RadialVector) == 0x0002A8, "Member 'ABP_DestructionField_C::RadialVector' has a wrong offset!");
static_assert(offsetof(ABP_DestructionField_C, RadialFalloff) == 0x0002B0, "Member 'ABP_DestructionField_C::RadialFalloff' has a wrong offset!");
static_assert(offsetof(ABP_DestructionField_C, Sphere) == 0x0002B8, "Member 'ABP_DestructionField_C::Sphere' has a wrong offset!");

}

