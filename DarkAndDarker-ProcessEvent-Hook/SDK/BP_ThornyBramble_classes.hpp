#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ThornyBramble

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_TrapBase_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ThornyBramble.BP_ThornyBramble_C
// 0x00E0 (0x0658 - 0x0578)
class ABP_ThornyBramble_C final : public ABP_TrapBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ThornyBramble_C;                 // 0x0578(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_DCHitBox_C*                         BP_DCHitBox;                                       // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CapsuleDamage4;                                    // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CapsuleDamage3;                                    // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CapsuleDamage2;                                    // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CapsuleDamage1;                                    // 0x05A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CapsuleBlock4;                                     // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CapsuleBlock3;                                     // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CapsuleBlock2;                                     // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CapsuleBlock1;                                     // 0x05C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CapsuleDamage;                                     // 0x05C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CapsuleBlock;                                      // 0x05D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x05D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFieldSystemComponent*                  FieldSystem;                                       // 0x05E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDCGeometryCollectionComponent*         DCGeometryCollection;                              // 0x05E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          OnRecovery;                                        // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35E3[0x7];                                     // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RecoveryTime;                                      // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LastTriggeredTime;                                 // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           StaticMeshComponents;                              // 0x0608(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UMaterialInterface*                     SelectedMaterialInstnace;                          // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        RandomDelayMax;                                    // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TransitionDurationBase;                            // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RandomizeTransitionDurationMax;                    // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                EffectiveTransitionDuration;                       // 0x0638(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                EffectiveTransitionDelay;                          // 0x0648(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_ThornyBramble(int32 EntryPoint);
	void FX_Test();
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void GetLastNormalizedProgression(double Last_Time_Delay, double Last_Transition_Duration, double Last_Triggered_Time, bool IsActivated, double* NewParam);
	void GetRecoveryTime(double* Result);
	void InitializeMeshArray();
	void InitializeThornyBramblePrimitiveData();
	void IsRecovery(bool* Result);
	void OnImpactEnduranceExhausted(float ExhaustedTime, TSubclassOf<class UGameplayEffect> GameplayEffectClass, const struct FDCGameplayEffectContext& EffectContext);
	void ReceiveBeginPlay();
	void UpdateThornyBramblePrimitiveData(bool IsActivate);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ThornyBramble_C">();
	}
	static class ABP_ThornyBramble_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ThornyBramble_C>();
	}
};
static_assert(alignof(ABP_ThornyBramble_C) == 0x000008, "Wrong alignment on ABP_ThornyBramble_C");
static_assert(sizeof(ABP_ThornyBramble_C) == 0x000658, "Wrong size on ABP_ThornyBramble_C");
static_assert(offsetof(ABP_ThornyBramble_C, UberGraphFrame_BP_ThornyBramble_C) == 0x000578, "Member 'ABP_ThornyBramble_C::UberGraphFrame_BP_ThornyBramble_C' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, BP_DCHitBox) == 0x000580, "Member 'ABP_ThornyBramble_C::BP_DCHitBox' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, CapsuleDamage4) == 0x000588, "Member 'ABP_ThornyBramble_C::CapsuleDamage4' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, CapsuleDamage3) == 0x000590, "Member 'ABP_ThornyBramble_C::CapsuleDamage3' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, CapsuleDamage2) == 0x000598, "Member 'ABP_ThornyBramble_C::CapsuleDamage2' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, CapsuleDamage1) == 0x0005A0, "Member 'ABP_ThornyBramble_C::CapsuleDamage1' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, CapsuleBlock4) == 0x0005A8, "Member 'ABP_ThornyBramble_C::CapsuleBlock4' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, CapsuleBlock3) == 0x0005B0, "Member 'ABP_ThornyBramble_C::CapsuleBlock3' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, CapsuleBlock2) == 0x0005B8, "Member 'ABP_ThornyBramble_C::CapsuleBlock2' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, CapsuleBlock1) == 0x0005C0, "Member 'ABP_ThornyBramble_C::CapsuleBlock1' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, CapsuleDamage) == 0x0005C8, "Member 'ABP_ThornyBramble_C::CapsuleDamage' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, CapsuleBlock) == 0x0005D0, "Member 'ABP_ThornyBramble_C::CapsuleBlock' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, StaticMesh) == 0x0005D8, "Member 'ABP_ThornyBramble_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, FieldSystem) == 0x0005E0, "Member 'ABP_ThornyBramble_C::FieldSystem' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, DCGeometryCollection) == 0x0005E8, "Member 'ABP_ThornyBramble_C::DCGeometryCollection' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, OnRecovery) == 0x0005F0, "Member 'ABP_ThornyBramble_C::OnRecovery' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, RecoveryTime) == 0x0005F8, "Member 'ABP_ThornyBramble_C::RecoveryTime' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, LastTriggeredTime) == 0x000600, "Member 'ABP_ThornyBramble_C::LastTriggeredTime' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, StaticMeshComponents) == 0x000608, "Member 'ABP_ThornyBramble_C::StaticMeshComponents' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, SelectedMaterialInstnace) == 0x000618, "Member 'ABP_ThornyBramble_C::SelectedMaterialInstnace' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, RandomDelayMax) == 0x000620, "Member 'ABP_ThornyBramble_C::RandomDelayMax' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, TransitionDurationBase) == 0x000628, "Member 'ABP_ThornyBramble_C::TransitionDurationBase' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, RandomizeTransitionDurationMax) == 0x000630, "Member 'ABP_ThornyBramble_C::RandomizeTransitionDurationMax' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, EffectiveTransitionDuration) == 0x000638, "Member 'ABP_ThornyBramble_C::EffectiveTransitionDuration' has a wrong offset!");
static_assert(offsetof(ABP_ThornyBramble_C, EffectiveTransitionDelay) == 0x000648, "Member 'ABP_ThornyBramble_C::EffectiveTransitionDelay' has a wrong offset!");

}

