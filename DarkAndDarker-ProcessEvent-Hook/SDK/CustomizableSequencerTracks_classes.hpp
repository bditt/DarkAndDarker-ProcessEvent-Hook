#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomizableSequencerTracks

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "MovieScene_classes.hpp"
#include "CustomizableSequencerTracks_structs.hpp"


namespace SDK
{

// Class CustomizableSequencerTracks.SequencerSectionBP
// 0x0008 (0x00F8 - 0x00F0)
class USequencerSectionBP final : public UMovieSceneSection
{
public:
	uint8                                         Pad_293D[0x8];                                     // 0x00F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SequencerSectionBP">();
	}
	static class USequencerSectionBP* GetDefaultObj()
	{
		return GetDefaultObjImpl<USequencerSectionBP>();
	}
};
static_assert(alignof(USequencerSectionBP) == 0x000008, "Wrong alignment on USequencerSectionBP");
static_assert(sizeof(USequencerSectionBP) == 0x0000F8, "Wrong size on USequencerSectionBP");

// Class CustomizableSequencerTracks.SequencerTrackBP
// 0x0118 (0x01B0 - 0x0098)
class USequencerTrackBP final : public UMovieSceneNameableTrack
{
public:
	bool                                          bSupportsMultipleRows;                             // 0x0098(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportsBlending;                                 // 0x0099(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_293E[0x2];                                     // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	ECustomSequencerTrackType                     TrackType;                                         // 0x009C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    SupportedObjectType;                               // 0x00A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USequencerSectionBP>        DefaultSectionType;                                // 0x00A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class USequencerSectionBP>> SupportedSections;                                 // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, AssetRegistrySearchable, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class USequencerTrackInstanceBP>  TrackInstanceType;                                 // 0x00C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_293F[0x8];                                     // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Icon;                                              // 0x00D0(0x00D0)(Edit, DisableEditOnInstance, AssetRegistrySearchable, NativeAccessSpecifierPublic)
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x01A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SequencerTrackBP">();
	}
	static class USequencerTrackBP* GetDefaultObj()
	{
		return GetDefaultObjImpl<USequencerTrackBP>();
	}
};
static_assert(alignof(USequencerTrackBP) == 0x000010, "Wrong alignment on USequencerTrackBP");
static_assert(sizeof(USequencerTrackBP) == 0x0001B0, "Wrong size on USequencerTrackBP");
static_assert(offsetof(USequencerTrackBP, bSupportsMultipleRows) == 0x000098, "Member 'USequencerTrackBP::bSupportsMultipleRows' has a wrong offset!");
static_assert(offsetof(USequencerTrackBP, bSupportsBlending) == 0x000099, "Member 'USequencerTrackBP::bSupportsBlending' has a wrong offset!");
static_assert(offsetof(USequencerTrackBP, TrackType) == 0x00009C, "Member 'USequencerTrackBP::TrackType' has a wrong offset!");
static_assert(offsetof(USequencerTrackBP, SupportedObjectType) == 0x0000A0, "Member 'USequencerTrackBP::SupportedObjectType' has a wrong offset!");
static_assert(offsetof(USequencerTrackBP, DefaultSectionType) == 0x0000A8, "Member 'USequencerTrackBP::DefaultSectionType' has a wrong offset!");
static_assert(offsetof(USequencerTrackBP, SupportedSections) == 0x0000B0, "Member 'USequencerTrackBP::SupportedSections' has a wrong offset!");
static_assert(offsetof(USequencerTrackBP, TrackInstanceType) == 0x0000C0, "Member 'USequencerTrackBP::TrackInstanceType' has a wrong offset!");
static_assert(offsetof(USequencerTrackBP, Icon) == 0x0000D0, "Member 'USequencerTrackBP::Icon' has a wrong offset!");
static_assert(offsetof(USequencerTrackBP, Sections) == 0x0001A0, "Member 'USequencerTrackBP::Sections' has a wrong offset!");

// Class CustomizableSequencerTracks.SequencerTrackInstanceBP
// 0x0000 (0x0050 - 0x0050)
class USequencerTrackInstanceBP final : public UMovieSceneTrackInstance
{
public:
	void K2_OnBeginUpdateInputs();
	void K2_OnDestroyed();
	void K2_OnEndUpdateInputs();
	void K2_OnInitialize();
	void K2_OnInputAdded(const struct FSequencerTrackInstanceInput& Input);
	void K2_OnInputRemoved(const struct FSequencerTrackInstanceInput& Input);
	void K2_OnUpdate();

	class UObject* GetAnimatedObject() const;
	struct FSequencerTrackInstanceInput GetInput(int32 Param_Index) const;
	TArray<struct FSequencerTrackInstanceInput> GetInputs() const;
	int32 GetNumInputs() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SequencerTrackInstanceBP">();
	}
	static class USequencerTrackInstanceBP* GetDefaultObj()
	{
		return GetDefaultObjImpl<USequencerTrackInstanceBP>();
	}
};
static_assert(alignof(USequencerTrackInstanceBP) == 0x000008, "Wrong alignment on USequencerTrackInstanceBP");
static_assert(sizeof(USequencerTrackInstanceBP) == 0x000050, "Wrong size on USequencerTrackInstanceBP");

}

