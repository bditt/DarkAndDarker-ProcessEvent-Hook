#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GiantWorm

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_DCMonsterBaseWithOptions_SubBoss_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GiantWorm.BP_GiantWorm_C
// 0x0050 (0x1430 - 0x13E0)
class ABP_GiantWorm_C : public ABP_DCMonsterBaseWithOptions_SubBoss_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GiantWorm_C;                     // 0x13D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      Niagara;                                           // 0x13E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox4;                                      // 0x13E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox3;                                      // 0x13F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox2;                                      // 0x13F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox1;                                      // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox;                                       // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FActiveGameplayEffectHandle>    Buff_MoveSpeed_Effect_Handle;                      // 0x1410(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Min;                                               // 0x1420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max;                                               // 0x1424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GiantWorm(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void Set_On_Ground();
	void Set_Under_Ground();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GiantWorm_C">();
	}
	static class ABP_GiantWorm_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GiantWorm_C>();
	}
};
static_assert(alignof(ABP_GiantWorm_C) == 0x000010, "Wrong alignment on ABP_GiantWorm_C");
static_assert(sizeof(ABP_GiantWorm_C) == 0x001430, "Wrong size on ABP_GiantWorm_C");
static_assert(offsetof(ABP_GiantWorm_C, UberGraphFrame_BP_GiantWorm_C) == 0x0013D8, "Member 'ABP_GiantWorm_C::UberGraphFrame_BP_GiantWorm_C' has a wrong offset!");
static_assert(offsetof(ABP_GiantWorm_C, Niagara) == 0x0013E0, "Member 'ABP_GiantWorm_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_GiantWorm_C, BP_DCHitBox4) == 0x0013E8, "Member 'ABP_GiantWorm_C::BP_DCHitBox4' has a wrong offset!");
static_assert(offsetof(ABP_GiantWorm_C, BP_DCHitBox3) == 0x0013F0, "Member 'ABP_GiantWorm_C::BP_DCHitBox3' has a wrong offset!");
static_assert(offsetof(ABP_GiantWorm_C, BP_DCHitBox2) == 0x0013F8, "Member 'ABP_GiantWorm_C::BP_DCHitBox2' has a wrong offset!");
static_assert(offsetof(ABP_GiantWorm_C, BP_DCHitBox1) == 0x001400, "Member 'ABP_GiantWorm_C::BP_DCHitBox1' has a wrong offset!");
static_assert(offsetof(ABP_GiantWorm_C, BP_DCHitBox) == 0x001408, "Member 'ABP_GiantWorm_C::BP_DCHitBox' has a wrong offset!");
static_assert(offsetof(ABP_GiantWorm_C, Buff_MoveSpeed_Effect_Handle) == 0x001410, "Member 'ABP_GiantWorm_C::Buff_MoveSpeed_Effect_Handle' has a wrong offset!");
static_assert(offsetof(ABP_GiantWorm_C, Min) == 0x001420, "Member 'ABP_GiantWorm_C::Min' has a wrong offset!");
static_assert(offsetof(ABP_GiantWorm_C, Max) == 0x001424, "Member 'ABP_GiantWorm_C::Max' has a wrong offset!");

}

