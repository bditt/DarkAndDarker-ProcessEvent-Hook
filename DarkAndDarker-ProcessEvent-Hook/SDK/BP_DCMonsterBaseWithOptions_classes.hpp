#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DCMonsterBaseWithOptions

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_ActionWhileConditionalTopPriorityMode_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "E_ActionWhilePeaceMode_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_BTCheckFloatCondition_structs.hpp"
#include "E_ActivityArea_structs.hpp"
#include "E_NonPlayableTarget_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "BP_DCMonsterBase_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DCMonsterBaseWithOptions.BP_DCMonsterBaseWithOptions_C
// 0x05A0 (0x13E0 - 0x0E40)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_DCMonsterBaseWithOptions_C : public ABP_DCMonsterBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DCMonsterBaseWithOptions_C;      // 0x0E40(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       AI_Recog_Range;                                    // 0x0E48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Non_Player_Character_Overlap_Component;            // 0x0E50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UImpactableComponent*                   Impactable;                                        // 0x0E58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDCGameObjectLinkComponent*             DCGameObjectLink;                                  // 0x0E60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   SpawnLocation;                                     // 0x0E68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_DCMonsterBaseWithOptions_C*         TargetProvider;                                    // 0x0E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ADCCharacterBase*>               EnemiesInCombatArea;                               // 0x0E78(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         EnemiesInRecogArea;                                // 0x0E88(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ADCCharacterBase*>               LostEnemiesInCombatArea;                           // 0x0E98(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         LostEnemiesInRecogArea;                            // 0x0EA8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_DCMonsterBaseWithOptions_C*> LinkedMonstersArray;                               // 0x0EB8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         LinkedMonstersCountTemp;                           // 0x0EC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GotLinkedMonsters;                                 // 0x0ECC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Do_Action_Once_After_Spawn;                        // 0x0ECD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B8A[0x2];                                     // 0x0ECE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                Attach_Effect_While_Action_Once_After_Spawn;       // 0x0ED0(0x0010)(Edit, BlueprintVisible)
	class UBehaviorTree*                          Action_Once_After_Spawn_BehaviorTree;              // 0x0EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Check_Action_Once_After_Spawn_Has_Tag;             // 0x0EE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Check_Action_Once_After_Spawn_Tag_Reverse;         // 0x0EE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B8B[0x6];                                     // 0x0EEA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Set_Action_Once_After_Spawn_Tags;                  // 0x0EF0(0x0020)(Edit, BlueprintVisible)
	TArray<struct FGameplayTag>                   Action_Once_After_Spawn_Trigger_Tag;               // 0x0F10(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 Action_Once_After_Spawn_Ability_Rates;             // 0x0F20(0x0010)(Edit, BlueprintVisible)
	TArray<struct FGameplayTag>                   Action_Once_After_Spawn_Wait_Tag;                  // 0x0F30(0x0010)(Edit, BlueprintVisible)
	bool                                          Do_Conditional_Top_Priority_Action;                // 0x0F40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Do_Once;                                           // 0x0F41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B8C[0x6];                                     // 0x0F42(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                Attach_Effect_While_Conditional_Top_Priority_Action; // 0x0F48(0x0010)(Edit, BlueprintVisible)
	class UBehaviorTree*                          Conditional_Top_Priority_Action_Behavior_Tree;     // 0x0F58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Check_Conditional_Top_Priority_Action_Has_Tag;     // 0x0F60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Check_Conditional_Top_Priority_Action_Tag_Reverse; // 0x0F61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B8D[0x6];                                     // 0x0F62(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Set_Conditional_Top_Priority_Action_Tags;          // 0x0F68(0x0020)(Edit, BlueprintVisible)
	E_ActionWhileConditionalTopPriorityMode       Conditional_Top_Priority_Mode_Action;              // 0x0F88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B8E[0x7];                                     // 0x0F89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_BTCheckFloatCondition>               Conditional_Top_Priority_Action_Check_Type;        // 0x0F90(0x0010)(Edit, BlueprintVisible)
	TArray<double>                                Condition_Float_Value;                             // 0x0FA0(0x0010)(Edit, BlueprintVisible)
	double                                        Flee_Distance;                                     // 0x0FB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FGameplayTag>                   Conditional_Top_Priority_Action_Trigger_Tag;       // 0x0FB8(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 Conditional_Top_Priority_Action_Ability_Rates;     // 0x0FC8(0x0010)(Edit, BlueprintVisible)
	TArray<struct FGameplayTag>                   Conditional_Top_Priority_Action_Wait_Tag;          // 0x0FD8(0x0010)(Edit, BlueprintVisible)
	bool                                          Do_Peace_Action;                                   // 0x0FE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B8F[0x7];                                     // 0x0FE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                Attach_Effect_While_Peace_Action;                  // 0x0FF0(0x0010)(Edit, BlueprintVisible)
	class UBehaviorTree*                          Peace_BehaviorTree;                                // 0x1000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Check_Peace_Action_Has_Tag;                        // 0x1008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Check_Peace_Action_Tag_Reverse;                    // 0x1009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B90[0x6];                                     // 0x100A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Set_Peace_Action_Tags;                             // 0x1010(0x0020)(Edit, BlueprintVisible)
	E_ActionWhilePeaceMode                        Peace_Mode_Action;                                 // 0x1030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B91[0x7];                                     // 0x1031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Peace_Distance;                                    // 0x1038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Do_Ability_While_Peace;                            // 0x1040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B92[0x7];                                     // 0x1041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   Peace_Trigger_Tag;                                 // 0x1048(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 Peace_Ability_Rates;                               // 0x1058(0x0010)(Edit, BlueprintVisible)
	TArray<struct FGameplayTag>                   Peace_Wait_Tag;                                    // 0x1068(0x0010)(Edit, BlueprintVisible)
	double                                        Peace_Check_Distance;                              // 0x1078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Do_Combat_Action;                                  // 0x1080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B93[0x7];                                     // 0x1081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBehaviorTree*                          Combat_BehaviorTree;                               // 0x1088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Check_Combat_Action_Has_Tag;                       // 0x1090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Check_Combat_Action_Tag_Reverse;                   // 0x1091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B94[0x6];                                     // 0x1092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Set_Combat_Action_Tags;                            // 0x1098(0x0020)(Edit, BlueprintVisible)
	bool                                          Do_Conditional_Action_While_Combat;                // 0x10B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B95[0x7];                                     // 0x10B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBehaviorTree*                          Conditional_Action_BehaviorTree_While_Combat;      // 0x10C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPrimaryAssetId>                Attach_Effect_While_Conditional_Action;            // 0x10C8(0x0010)(Edit, BlueprintVisible)
	bool                                          Get_Target_While_Combat;                           // 0x10D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B96[0x7];                                     // 0x10D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                Attach_Effect_While_Get_Target_Action;             // 0x10E0(0x0010)(Edit, BlueprintVisible)
	bool                                          Do_Tracking_While_Combat;                          // 0x10F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B97[0x7];                                     // 0x10F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                Attach_Effect_While_Tracking_Action;               // 0x10F8(0x0010)(Edit, BlueprintVisible)
	double                                        Combat_Acceptance_Radius;                          // 0x1108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Set_Height_While_Tracking;                         // 0x1110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Do_Ability_While_Combat;                           // 0x1111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B98[0x6];                                     // 0x1112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                Attach_Effect_While_Do_Ability_Combat_Action;      // 0x1118(0x0010)(Edit, BlueprintVisible)
	bool                                          Use_Rotate_Before_Ability;                         // 0x1128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B99[0x7];                                     // 0x1129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   Combat_Trigger_Tag;                                // 0x1130(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 Combat_Ability_Rates;                              // 0x1140(0x0010)(Edit, BlueprintVisible)
	TArray<struct FGameplayTag>                   Combat_Wait_Tag;                                   // 0x1150(0x0010)(Edit, BlueprintVisible)
	double                                        Check_Ability_Distance;                            // 0x1160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Do_Wait_While_Combat;                              // 0x1168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9A[0x7];                                     // 0x1169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                Attach_Effect_While_Wait_Combat_Action;            // 0x1170(0x0010)(Edit, BlueprintVisible)
	bool                                          Apply_Wait_Time_By_Distance;                       // 0x1180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9B[0x7];                                     // 0x1181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Combat_Ability_Attack_Delay;                       // 0x1188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Combat_Ability_Attack_Delay_Random_Deviation;      // 0x1190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagQuery                      Object_Link_Request_Param_Dst_Type_Tag_Query;      // 0x1198(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_ActivityArea                                Activity_Area;                                     // 0x11E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Custom_Behavior_Tree;                          // 0x11E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9C[0x6];                                     // 0x11E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBehaviorTree*                          Custom_Behavior_Tree;                              // 0x11E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Spawn_Transform;                                   // 0x11F0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UShapeComponent*                        CombatAreaCollision;                               // 0x1250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UShapeComponent*                        RecognitionAreaCollision;                          // 0x1258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FVector                                CombatArea_Box_Extent;                             // 0x1260(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RecognizeArea_Box_Extent;                          // 0x1278(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Linked_Monsters_Count;                             // 0x1290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9D[0x4];                                     // 0x1294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityAsync_WaitGameplayEffectApplied* Async_Action_For_Fear;                             // 0x1298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Fear_Instigator;                                   // 0x12A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ATriggerBox*                            Combat_Area_Trigger_Box;                           // 0x12A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ATriggerBox*                            Recognize_Area_Trigger_Box;                        // 0x12B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Combat_Area_Check_TimerHandle;                     // 0x12B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Recognition_Area_Check_TimerHandle;                // 0x12C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Move_Fail_Timeout_TimerHandle;                     // 0x12C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Reached_To_Spawn_Location_Monster_Count;           // 0x12D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9E[0x4];                                     // 0x12D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Combat_Activated_Event_Dispatcher;                 // 0x12D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Peace_Activated_Event_Dispatcher;                  // 0x12E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Comeback_Activated_Event_Dispatcher;               // 0x12F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<E_NonPlayableTarget>                   Non_Playable_Target;                               // 0x1308(0x0010)(Edit, BlueprintVisible)
	int32                                         Number_Of_NPT;                                     // 0x1318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9F[0x4];                                     // 0x131C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADCCharacterBase*>               Recieved_Target_Array;                             // 0x1320(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        Default_Sight_Range;                               // 0x1330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sight_Range_Changed;                               // 0x1338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BA0[0x7];                                     // 0x1339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADCCharacterBase*>               Target_Array;                                      // 0x1340(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class AActor*                                 Chaotic_Discord_Instigator;                        // 0x1350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Blackboard_TargetActor;                            // 0x1358(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Spawn_Event_Dipatcher;                             // 0x1360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class ADCMonsterBase*>                 Summonee;                                          // 0x1370(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance, RepNotify)
	bool                                          Stop_Montage_When__Comeback;                       // 0x1380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Off;                                               // 0x1381(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BA1[0x6];                                     // 0x1382(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActiveGameplayEffectHandle>    Buff_MoveSpeed_EffectHandle;                       // 0x1388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                Dash_Goal_Location;                                // 0x1398(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dash_Input_Power;                                  // 0x13B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BA2[0x4];                                     // 0x13B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Doing_Dash_TimerHandle;                            // 0x13B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Dash_Limit_Time_TimerHandle;                       // 0x13C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Draw_Recog_Range;                                  // 0x13C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityAsync_WaitGameplayEvent*        DelayDeath_Async_Action;                           // 0x13D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Add_DelayDeath();
	void Apply_Damage_Immune();
	void Area_Overlap_Check_Event_Bind();
	void BndEvt__BP_DCMonsterBaseWithOptions_Impactable_K2Node_ComponentBoundEvent_0_ImpactEnduranceExhausted__DelegateSignature(float ExhaustedTime, TSubclassOf<class UGameplayEffect> GameplayEffectClass, const struct FDCGameplayEffectContext& EffectContext);
	void BndEvt__BP_Lich_DCGameObjectLink_K2Node_ComponentBoundEvent_3_DCGameObjectLinkComponentUMsgGameLinkerRequest__DelegateSignature(const struct FObjectLinkRequestEvent& RecvEvent, class UObjectLinkMetaDataBlueprint* SendEventParam);
	void Check_Combat_To_Comeback();
	void Check_Peace_To_Combat();
	void Combat_Activated();
	void Combat_Activated_Event_Dispatcher__DelegateSignature();
	void Comeback_Activated();
	void Comeback_Activated_Event_Dispatcher__DelegateSignature();
	void Comeback_Event_End(bool Arrived_SpawnLocation);
	void Comeback_Event_Start();
	void Dash_To_Location(const struct FVector& Target_Location, double Dash_Time, double Distance);
	void Dash_To_Target(class AActor* Target_Actor, float Dash_Time, double Distance);
	void Do_Dash();
	void Do_DelayDeath_Function();
	void EventReceived_F9902F9D42CFF61C17D51EB8BC686108(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_BP_DCMonsterBaseWithOptions(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void GetBBTargetActor(bool* Result, class UObject** Return_Value);
	void GetBBTargetActorToCharacterBase(bool* Result, class ADCCharacterBase** As_DCCharacter_Base);
	void GetBBTargetActorToMonsterBase(bool* Result, class ABP_DCMonsterBaseWithOptions_C** DCMonsterBaseWithOptions);
	void GetLinkedMonsters(const struct FObjectLinkRequestEvent& Recv_Event, class UObjectLinkMetaDataBlueprint* Send_Event_Param);
	void IgnoreSignalFromMe(class UDCGameObjectLinkComponent* DCGame_Link_Object, const struct FObjectLinkRequestEvent& Recv_Event, class UObjectLinkMetaDataBlueprint* Send_Event_Param, bool* Result);
	void LinkEventBase(class UDCGameObjectLinkComponent* DCGame_Link_Object, const struct FObjectLinkRequestEvent& Recv_Event, class UObjectLinkMetaDataBlueprint* Send_Event_Param, bool* Result);
	void Move_Fail_Timeout();
	void OnApplied_227A852046B3B9DACFFBA5ABA7D2A95E(class AActor* Source, const struct FGameplayEffectSpecHandle& SpecHandle, const struct FActiveGameplayEffectHandle& ActiveHandle);
	void OnAsyncInitialized();
	void OnBeforeDeath();
	void OnFail_21CEDD05472CF8AA4A07758D48F80F14(EPathFollowingResult MovementResult);
	void OnFail_801A2F7E484A71F27AD0278F8B82FB99(EPathFollowingResult MovementResult);
	void OnFMsgGASAttributeNotifyBlueprint(const struct FMsgGASAttributeNotify& InMsg);
	void OnNewTarget(class ADCCharacterBase* InTarget);
	void OnRep_Blackboard_TargetActor();
	void Func_Off();
	void OnRep_Spawn_Event_Dipatcher();
	void OnRep_Summon_Event_Transform();
	void OnRep_Summon_Monster();
	void OnRep_Summonee();
	void OnSetAI();
	void OnSuccess_21CEDD05472CF8AA4A07758D48F80F14(EPathFollowingResult MovementResult);
	void OnSuccess_801A2F7E484A71F27AD0278F8B82FB99(EPathFollowingResult MovementResult);
	void Peace_Activated();
	void Peace_Activated_Event_Dispatcher__DelegateSignature();
	void ReceiveBeginPlay();
	void Remove_Damage_Immune();
	void Removed_79DC362441B88BCE54376582AF9184CE();
	void Removed_CE0B13EA482C4B99CB7832A70FAC7611();
	void SetActivityArea();
	void Spawn_Box_for_Area_Check();
	void Spawn_Event_Dipatcher__DelegateSignature();
	void Stop_DelayDeath();
	void Stop_To_Dash();
	void Summon_Slave(const struct FTransform& SpawnTransform, const struct FPrimaryAssetId& Param_MonsterId, class ADCMonsterBase** Target_Summonee, TArray<class ADCMonsterBase*>* Summonees);
	void Trigger_In_Combat_Area(class AActor* OverlappedActor, class AActor* OtherActor);
	void Trigger_In_Overlap_NPT_Area(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Trigger_In_Recog_Area(class AActor* OverlappedActor, class AActor* OtherActor);
	void Trigger_Out_Combat_Area(class AActor* OverlappedActor, class AActor* OtherActor);
	void Trigger_Out_Overlap_NPT_Area(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void Trigger_Out_Recog_Area(class AActor* OverlappedActor, class AActor* OtherActor);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DCMonsterBaseWithOptions_C">();
	}
	static class ABP_DCMonsterBaseWithOptions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DCMonsterBaseWithOptions_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_DCMonsterBaseWithOptions_C) == 0x000010, "Wrong alignment on ABP_DCMonsterBaseWithOptions_C");
static_assert(sizeof(ABP_DCMonsterBaseWithOptions_C) == 0x0013E0, "Wrong size on ABP_DCMonsterBaseWithOptions_C");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, UberGraphFrame_BP_DCMonsterBaseWithOptions_C) == 0x000E40, "Member 'ABP_DCMonsterBaseWithOptions_C::UberGraphFrame_BP_DCMonsterBaseWithOptions_C' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, AI_Recog_Range) == 0x000E48, "Member 'ABP_DCMonsterBaseWithOptions_C::AI_Recog_Range' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Non_Player_Character_Overlap_Component) == 0x000E50, "Member 'ABP_DCMonsterBaseWithOptions_C::Non_Player_Character_Overlap_Component' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Impactable) == 0x000E58, "Member 'ABP_DCMonsterBaseWithOptions_C::Impactable' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, DCGameObjectLink) == 0x000E60, "Member 'ABP_DCMonsterBaseWithOptions_C::DCGameObjectLink' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, SpawnLocation) == 0x000E68, "Member 'ABP_DCMonsterBaseWithOptions_C::SpawnLocation' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, TargetProvider) == 0x000E70, "Member 'ABP_DCMonsterBaseWithOptions_C::TargetProvider' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, EnemiesInCombatArea) == 0x000E78, "Member 'ABP_DCMonsterBaseWithOptions_C::EnemiesInCombatArea' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, EnemiesInRecogArea) == 0x000E88, "Member 'ABP_DCMonsterBaseWithOptions_C::EnemiesInRecogArea' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, LostEnemiesInCombatArea) == 0x000E98, "Member 'ABP_DCMonsterBaseWithOptions_C::LostEnemiesInCombatArea' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, LostEnemiesInRecogArea) == 0x000EA8, "Member 'ABP_DCMonsterBaseWithOptions_C::LostEnemiesInRecogArea' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, LinkedMonstersArray) == 0x000EB8, "Member 'ABP_DCMonsterBaseWithOptions_C::LinkedMonstersArray' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, LinkedMonstersCountTemp) == 0x000EC8, "Member 'ABP_DCMonsterBaseWithOptions_C::LinkedMonstersCountTemp' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, GotLinkedMonsters) == 0x000ECC, "Member 'ABP_DCMonsterBaseWithOptions_C::GotLinkedMonsters' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Do_Action_Once_After_Spawn) == 0x000ECD, "Member 'ABP_DCMonsterBaseWithOptions_C::Do_Action_Once_After_Spawn' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Attach_Effect_While_Action_Once_After_Spawn) == 0x000ED0, "Member 'ABP_DCMonsterBaseWithOptions_C::Attach_Effect_While_Action_Once_After_Spawn' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Action_Once_After_Spawn_BehaviorTree) == 0x000EE0, "Member 'ABP_DCMonsterBaseWithOptions_C::Action_Once_After_Spawn_BehaviorTree' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Check_Action_Once_After_Spawn_Has_Tag) == 0x000EE8, "Member 'ABP_DCMonsterBaseWithOptions_C::Check_Action_Once_After_Spawn_Has_Tag' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Check_Action_Once_After_Spawn_Tag_Reverse) == 0x000EE9, "Member 'ABP_DCMonsterBaseWithOptions_C::Check_Action_Once_After_Spawn_Tag_Reverse' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Set_Action_Once_After_Spawn_Tags) == 0x000EF0, "Member 'ABP_DCMonsterBaseWithOptions_C::Set_Action_Once_After_Spawn_Tags' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Action_Once_After_Spawn_Trigger_Tag) == 0x000F10, "Member 'ABP_DCMonsterBaseWithOptions_C::Action_Once_After_Spawn_Trigger_Tag' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Action_Once_After_Spawn_Ability_Rates) == 0x000F20, "Member 'ABP_DCMonsterBaseWithOptions_C::Action_Once_After_Spawn_Ability_Rates' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Action_Once_After_Spawn_Wait_Tag) == 0x000F30, "Member 'ABP_DCMonsterBaseWithOptions_C::Action_Once_After_Spawn_Wait_Tag' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Do_Conditional_Top_Priority_Action) == 0x000F40, "Member 'ABP_DCMonsterBaseWithOptions_C::Do_Conditional_Top_Priority_Action' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Do_Once) == 0x000F41, "Member 'ABP_DCMonsterBaseWithOptions_C::Do_Once' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Attach_Effect_While_Conditional_Top_Priority_Action) == 0x000F48, "Member 'ABP_DCMonsterBaseWithOptions_C::Attach_Effect_While_Conditional_Top_Priority_Action' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Conditional_Top_Priority_Action_Behavior_Tree) == 0x000F58, "Member 'ABP_DCMonsterBaseWithOptions_C::Conditional_Top_Priority_Action_Behavior_Tree' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Check_Conditional_Top_Priority_Action_Has_Tag) == 0x000F60, "Member 'ABP_DCMonsterBaseWithOptions_C::Check_Conditional_Top_Priority_Action_Has_Tag' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Check_Conditional_Top_Priority_Action_Tag_Reverse) == 0x000F61, "Member 'ABP_DCMonsterBaseWithOptions_C::Check_Conditional_Top_Priority_Action_Tag_Reverse' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Set_Conditional_Top_Priority_Action_Tags) == 0x000F68, "Member 'ABP_DCMonsterBaseWithOptions_C::Set_Conditional_Top_Priority_Action_Tags' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Conditional_Top_Priority_Mode_Action) == 0x000F88, "Member 'ABP_DCMonsterBaseWithOptions_C::Conditional_Top_Priority_Mode_Action' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Conditional_Top_Priority_Action_Check_Type) == 0x000F90, "Member 'ABP_DCMonsterBaseWithOptions_C::Conditional_Top_Priority_Action_Check_Type' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Condition_Float_Value) == 0x000FA0, "Member 'ABP_DCMonsterBaseWithOptions_C::Condition_Float_Value' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Flee_Distance) == 0x000FB0, "Member 'ABP_DCMonsterBaseWithOptions_C::Flee_Distance' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Conditional_Top_Priority_Action_Trigger_Tag) == 0x000FB8, "Member 'ABP_DCMonsterBaseWithOptions_C::Conditional_Top_Priority_Action_Trigger_Tag' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Conditional_Top_Priority_Action_Ability_Rates) == 0x000FC8, "Member 'ABP_DCMonsterBaseWithOptions_C::Conditional_Top_Priority_Action_Ability_Rates' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Conditional_Top_Priority_Action_Wait_Tag) == 0x000FD8, "Member 'ABP_DCMonsterBaseWithOptions_C::Conditional_Top_Priority_Action_Wait_Tag' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Do_Peace_Action) == 0x000FE8, "Member 'ABP_DCMonsterBaseWithOptions_C::Do_Peace_Action' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Attach_Effect_While_Peace_Action) == 0x000FF0, "Member 'ABP_DCMonsterBaseWithOptions_C::Attach_Effect_While_Peace_Action' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Peace_BehaviorTree) == 0x001000, "Member 'ABP_DCMonsterBaseWithOptions_C::Peace_BehaviorTree' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Check_Peace_Action_Has_Tag) == 0x001008, "Member 'ABP_DCMonsterBaseWithOptions_C::Check_Peace_Action_Has_Tag' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Check_Peace_Action_Tag_Reverse) == 0x001009, "Member 'ABP_DCMonsterBaseWithOptions_C::Check_Peace_Action_Tag_Reverse' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Set_Peace_Action_Tags) == 0x001010, "Member 'ABP_DCMonsterBaseWithOptions_C::Set_Peace_Action_Tags' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Peace_Mode_Action) == 0x001030, "Member 'ABP_DCMonsterBaseWithOptions_C::Peace_Mode_Action' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Peace_Distance) == 0x001038, "Member 'ABP_DCMonsterBaseWithOptions_C::Peace_Distance' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Do_Ability_While_Peace) == 0x001040, "Member 'ABP_DCMonsterBaseWithOptions_C::Do_Ability_While_Peace' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Peace_Trigger_Tag) == 0x001048, "Member 'ABP_DCMonsterBaseWithOptions_C::Peace_Trigger_Tag' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Peace_Ability_Rates) == 0x001058, "Member 'ABP_DCMonsterBaseWithOptions_C::Peace_Ability_Rates' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Peace_Wait_Tag) == 0x001068, "Member 'ABP_DCMonsterBaseWithOptions_C::Peace_Wait_Tag' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Peace_Check_Distance) == 0x001078, "Member 'ABP_DCMonsterBaseWithOptions_C::Peace_Check_Distance' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Do_Combat_Action) == 0x001080, "Member 'ABP_DCMonsterBaseWithOptions_C::Do_Combat_Action' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Combat_BehaviorTree) == 0x001088, "Member 'ABP_DCMonsterBaseWithOptions_C::Combat_BehaviorTree' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Check_Combat_Action_Has_Tag) == 0x001090, "Member 'ABP_DCMonsterBaseWithOptions_C::Check_Combat_Action_Has_Tag' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Check_Combat_Action_Tag_Reverse) == 0x001091, "Member 'ABP_DCMonsterBaseWithOptions_C::Check_Combat_Action_Tag_Reverse' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Set_Combat_Action_Tags) == 0x001098, "Member 'ABP_DCMonsterBaseWithOptions_C::Set_Combat_Action_Tags' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Do_Conditional_Action_While_Combat) == 0x0010B8, "Member 'ABP_DCMonsterBaseWithOptions_C::Do_Conditional_Action_While_Combat' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Conditional_Action_BehaviorTree_While_Combat) == 0x0010C0, "Member 'ABP_DCMonsterBaseWithOptions_C::Conditional_Action_BehaviorTree_While_Combat' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Attach_Effect_While_Conditional_Action) == 0x0010C8, "Member 'ABP_DCMonsterBaseWithOptions_C::Attach_Effect_While_Conditional_Action' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Get_Target_While_Combat) == 0x0010D8, "Member 'ABP_DCMonsterBaseWithOptions_C::Get_Target_While_Combat' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Attach_Effect_While_Get_Target_Action) == 0x0010E0, "Member 'ABP_DCMonsterBaseWithOptions_C::Attach_Effect_While_Get_Target_Action' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Do_Tracking_While_Combat) == 0x0010F0, "Member 'ABP_DCMonsterBaseWithOptions_C::Do_Tracking_While_Combat' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Attach_Effect_While_Tracking_Action) == 0x0010F8, "Member 'ABP_DCMonsterBaseWithOptions_C::Attach_Effect_While_Tracking_Action' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Combat_Acceptance_Radius) == 0x001108, "Member 'ABP_DCMonsterBaseWithOptions_C::Combat_Acceptance_Radius' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Set_Height_While_Tracking) == 0x001110, "Member 'ABP_DCMonsterBaseWithOptions_C::Set_Height_While_Tracking' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Do_Ability_While_Combat) == 0x001111, "Member 'ABP_DCMonsterBaseWithOptions_C::Do_Ability_While_Combat' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Attach_Effect_While_Do_Ability_Combat_Action) == 0x001118, "Member 'ABP_DCMonsterBaseWithOptions_C::Attach_Effect_While_Do_Ability_Combat_Action' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Use_Rotate_Before_Ability) == 0x001128, "Member 'ABP_DCMonsterBaseWithOptions_C::Use_Rotate_Before_Ability' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Combat_Trigger_Tag) == 0x001130, "Member 'ABP_DCMonsterBaseWithOptions_C::Combat_Trigger_Tag' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Combat_Ability_Rates) == 0x001140, "Member 'ABP_DCMonsterBaseWithOptions_C::Combat_Ability_Rates' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Combat_Wait_Tag) == 0x001150, "Member 'ABP_DCMonsterBaseWithOptions_C::Combat_Wait_Tag' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Check_Ability_Distance) == 0x001160, "Member 'ABP_DCMonsterBaseWithOptions_C::Check_Ability_Distance' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Do_Wait_While_Combat) == 0x001168, "Member 'ABP_DCMonsterBaseWithOptions_C::Do_Wait_While_Combat' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Attach_Effect_While_Wait_Combat_Action) == 0x001170, "Member 'ABP_DCMonsterBaseWithOptions_C::Attach_Effect_While_Wait_Combat_Action' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Apply_Wait_Time_By_Distance) == 0x001180, "Member 'ABP_DCMonsterBaseWithOptions_C::Apply_Wait_Time_By_Distance' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Combat_Ability_Attack_Delay) == 0x001188, "Member 'ABP_DCMonsterBaseWithOptions_C::Combat_Ability_Attack_Delay' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Combat_Ability_Attack_Delay_Random_Deviation) == 0x001190, "Member 'ABP_DCMonsterBaseWithOptions_C::Combat_Ability_Attack_Delay_Random_Deviation' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Object_Link_Request_Param_Dst_Type_Tag_Query) == 0x001198, "Member 'ABP_DCMonsterBaseWithOptions_C::Object_Link_Request_Param_Dst_Type_Tag_Query' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Activity_Area) == 0x0011E0, "Member 'ABP_DCMonsterBaseWithOptions_C::Activity_Area' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Use_Custom_Behavior_Tree) == 0x0011E1, "Member 'ABP_DCMonsterBaseWithOptions_C::Use_Custom_Behavior_Tree' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Custom_Behavior_Tree) == 0x0011E8, "Member 'ABP_DCMonsterBaseWithOptions_C::Custom_Behavior_Tree' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Spawn_Transform) == 0x0011F0, "Member 'ABP_DCMonsterBaseWithOptions_C::Spawn_Transform' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, CombatAreaCollision) == 0x001250, "Member 'ABP_DCMonsterBaseWithOptions_C::CombatAreaCollision' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, RecognitionAreaCollision) == 0x001258, "Member 'ABP_DCMonsterBaseWithOptions_C::RecognitionAreaCollision' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, CombatArea_Box_Extent) == 0x001260, "Member 'ABP_DCMonsterBaseWithOptions_C::CombatArea_Box_Extent' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, RecognizeArea_Box_Extent) == 0x001278, "Member 'ABP_DCMonsterBaseWithOptions_C::RecognizeArea_Box_Extent' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Linked_Monsters_Count) == 0x001290, "Member 'ABP_DCMonsterBaseWithOptions_C::Linked_Monsters_Count' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Async_Action_For_Fear) == 0x001298, "Member 'ABP_DCMonsterBaseWithOptions_C::Async_Action_For_Fear' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Fear_Instigator) == 0x0012A0, "Member 'ABP_DCMonsterBaseWithOptions_C::Fear_Instigator' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Combat_Area_Trigger_Box) == 0x0012A8, "Member 'ABP_DCMonsterBaseWithOptions_C::Combat_Area_Trigger_Box' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Recognize_Area_Trigger_Box) == 0x0012B0, "Member 'ABP_DCMonsterBaseWithOptions_C::Recognize_Area_Trigger_Box' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Combat_Area_Check_TimerHandle) == 0x0012B8, "Member 'ABP_DCMonsterBaseWithOptions_C::Combat_Area_Check_TimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Recognition_Area_Check_TimerHandle) == 0x0012C0, "Member 'ABP_DCMonsterBaseWithOptions_C::Recognition_Area_Check_TimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Move_Fail_Timeout_TimerHandle) == 0x0012C8, "Member 'ABP_DCMonsterBaseWithOptions_C::Move_Fail_Timeout_TimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Reached_To_Spawn_Location_Monster_Count) == 0x0012D0, "Member 'ABP_DCMonsterBaseWithOptions_C::Reached_To_Spawn_Location_Monster_Count' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Combat_Activated_Event_Dispatcher) == 0x0012D8, "Member 'ABP_DCMonsterBaseWithOptions_C::Combat_Activated_Event_Dispatcher' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Peace_Activated_Event_Dispatcher) == 0x0012E8, "Member 'ABP_DCMonsterBaseWithOptions_C::Peace_Activated_Event_Dispatcher' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Comeback_Activated_Event_Dispatcher) == 0x0012F8, "Member 'ABP_DCMonsterBaseWithOptions_C::Comeback_Activated_Event_Dispatcher' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Non_Playable_Target) == 0x001308, "Member 'ABP_DCMonsterBaseWithOptions_C::Non_Playable_Target' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Number_Of_NPT) == 0x001318, "Member 'ABP_DCMonsterBaseWithOptions_C::Number_Of_NPT' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Recieved_Target_Array) == 0x001320, "Member 'ABP_DCMonsterBaseWithOptions_C::Recieved_Target_Array' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Default_Sight_Range) == 0x001330, "Member 'ABP_DCMonsterBaseWithOptions_C::Default_Sight_Range' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Sight_Range_Changed) == 0x001338, "Member 'ABP_DCMonsterBaseWithOptions_C::Sight_Range_Changed' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Target_Array) == 0x001340, "Member 'ABP_DCMonsterBaseWithOptions_C::Target_Array' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Chaotic_Discord_Instigator) == 0x001350, "Member 'ABP_DCMonsterBaseWithOptions_C::Chaotic_Discord_Instigator' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Blackboard_TargetActor) == 0x001358, "Member 'ABP_DCMonsterBaseWithOptions_C::Blackboard_TargetActor' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Spawn_Event_Dipatcher) == 0x001360, "Member 'ABP_DCMonsterBaseWithOptions_C::Spawn_Event_Dipatcher' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Summonee) == 0x001370, "Member 'ABP_DCMonsterBaseWithOptions_C::Summonee' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Stop_Montage_When__Comeback) == 0x001380, "Member 'ABP_DCMonsterBaseWithOptions_C::Stop_Montage_When__Comeback' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Off) == 0x001381, "Member 'ABP_DCMonsterBaseWithOptions_C::Off' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Buff_MoveSpeed_EffectHandle) == 0x001388, "Member 'ABP_DCMonsterBaseWithOptions_C::Buff_MoveSpeed_EffectHandle' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Dash_Goal_Location) == 0x001398, "Member 'ABP_DCMonsterBaseWithOptions_C::Dash_Goal_Location' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Dash_Input_Power) == 0x0013B0, "Member 'ABP_DCMonsterBaseWithOptions_C::Dash_Input_Power' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Doing_Dash_TimerHandle) == 0x0013B8, "Member 'ABP_DCMonsterBaseWithOptions_C::Doing_Dash_TimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Dash_Limit_Time_TimerHandle) == 0x0013C0, "Member 'ABP_DCMonsterBaseWithOptions_C::Dash_Limit_Time_TimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, Draw_Recog_Range) == 0x0013C8, "Member 'ABP_DCMonsterBaseWithOptions_C::Draw_Recog_Range' has a wrong offset!");
static_assert(offsetof(ABP_DCMonsterBaseWithOptions_C, DelayDeath_Async_Action) == 0x0013D0, "Member 'ABP_DCMonsterBaseWithOptions_C::DelayDeath_Async_Action' has a wrong offset!");

}

