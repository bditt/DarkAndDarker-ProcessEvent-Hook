#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Banshee_Common

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_Banshee_NSWE_structs.hpp"
#include "S_BansheeMPCChangeValue_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_DCMonsterBaseWithOptions_Boss_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Banshee_Common.BP_Banshee_Common_C
// 0x0210 (0x1610 - 0x1400)
class ABP_Banshee_Common_C final : public ABP_DCMonsterBaseWithOptions_Boss_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Banshee_Common_C;                // 0x13F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      FXS_Banshee_Body_001A;                             // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Skirt;                                 // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDCSkeletalMeshComponent*               FogRushVFX;                                        // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Dress_Skirt;                                    // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Old_Hair;                                       // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Young_Hair;                                     // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       AttackSphere_FogRush;                              // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          AttackBox_Pulling_Out;                             // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          AttackBox_Pulling_In;                              // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      AttackCapsule_HideAttack;                          // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Leg6;                                  // 0x1450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Leg5;                                  // 0x1458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Leg4;                                  // 0x1460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Leg3;                                  // 0x1468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Leg2;                                  // 0x1470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox_Leg1;                                  // 0x1478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox8;                                      // 0x1480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox7;                                      // 0x1488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox6;                                      // 0x1490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox5;                                      // 0x1498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox4;                                      // 0x14A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox3;                                      // 0x14A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox2;                                      // 0x14B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox1;                                      // 0x14B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         BP_DCHitBox;                                       // 0x14C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	E_Banshee_NSWE                                NSWE;                                              // 0x14C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AED[0x7];                                     // 0x14C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Banshee_FogMissile1_C*>      Spawned_Fog1;                                      // 0x14D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_Banshee_FogMissile1_C*>      Spawned_Fog2;                                      // 0x14E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FPrimaryAssetId                        Fog_Missile2_Asset_ID;                             // 0x14F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ADCCharacterBase*>               Pulling_Overlapped_Actors;                         // 0x1500(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ADCCharacterBase*>               HideAttack_Overlapped_Actors;                      // 0x1510(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<struct FS_BansheeMPCChangeValue>       MorphDatas;                                        // 0x1520(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FS_BansheeMPCChangeValue>       RemoveMorphDatas;                                  // 0x1530(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ADCCharacterBase*>               FogRush_Overlapped_Actors;                         // 0x1540(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_Specter_C*>                  Specters;                                          // 0x1550(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Max_Specters_Count;                                // 0x1560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        Specter_Asset_ID;                                  // 0x1564(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AEE[0x4];                                     // 0x1574(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_DCHitBox_C*>                 HitBox_Type_Banshee;                               // 0x1578(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UBP_DCHitBox_C*>                 HitBox_Type_Human;                                 // 0x1588(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UBP_DCHitBox_C*>                 HitBox_Type_Common;                                // 0x1598(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FGameplayTag                           Special_Pattern_Trigger_Tag;                       // 0x15A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        FogRush_Timer;                                     // 0x15B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ADCCharacterBase*>               CombatArea_Fog_Players;                            // 0x15B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Is_Banshee_Type;                                   // 0x15C8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AEF[0x7];                                     // 0x15C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         SK_Visible_Mesh;                                   // 0x15D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                FogMissile1_NSWE_Central_Spawn_Location;           // 0x15E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Banshee_CameraShake_Scream_C*       CameraShake_Actor_Scream;                          // 0x15F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_Banshee_CameraShake_Scream_C*       CameraShake_PreShake;                              // 0x1600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Add_CombatArea_Fog(class ADCCharacterBase* TargetActor);
	void AddMPCData(TArray<struct FS_BansheeMPCChangeValue>& Data);
	void Apply_Effect_By_Possession(class AActor* Target_Actor, const struct FPrimaryAssetId& Gameplay_Effect, const struct FGameplayTag& Set_By_Caller_Tag, int32 PossessionCount, double Value_Per_Possession);
	void Attach_Death_FX(class ADCCharacterBase* TargetActor);
	void BndEvt__BP_Banshee_AttackBox_Pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_Banshee_AttackBox_Pulling_Out_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_Banshee_AttackCapsule_HideAttack_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_Banshee_AttackCapsule_HideAttack_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_Banshee_AttackSphere_FogRush_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_Banshee_AttackSphere_FogRush_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void Func_CameraShake_PreShake();
	void CameraShake_Scream();
	void Combat_Activated();
	void Comeback_Activated();
	void Comeback_Event_End(bool Arrived_SpawnLocation);
	void Destroy_CameraShakes();
	void Do_DelayDeath_Function();
	void ExecuteUbergraph_BP_Banshee_Common(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void Get_FogMissile1_Spawn_Location(class ADCCharacterBase* TargetActor, double Spawn_Distance, double Spawn_Distance_Var, int32 Max_Spawn_Count, double Rotation_Angle_Per_Shot, double Rotation_Angle_Var, double Spawn_Height, double Spawn_Height_Var, TArray<struct FVector>* Return_Spawn_Locations);
	struct FVector Get_Location_Of_Target_s_NSWE(double Distance, bool Random_NSWE, E_Banshee_NSWE Param_NSWE, bool NewParam);
	void LaunchEnemyToPull(class ADCCharacterBase* TargetActor, float XY, double Z);
	bool Observe_Hit_Target(class ADCCharacterBase* TargetActor);
	void OnAsyncInitialized();
	void OnBeforeDeath();
	void OnSetAI();
	void Peace_Activated();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Remove_CombatArea_Fog(class ADCCharacterBase* TargetActor);
	void Set_Attack_Collision(bool Enable, class UPrimitiveComponent* Collision_Component);
	void Set_Hit_Box();
	void SetMPCValueInData(const struct FS_BansheeMPCChangeValue& Datas, double Value);
	void SetMPCValues(double DeltaTime);
	void Spawn_Fog_Missile2(class ADCCharacterBase* TargetActor);
	void Spawn_Specters_To_Maximum();
	void Trigger_In_Combat_Area(class AActor* OverlappedActor, class AActor* OtherActor);
	void Trigger_Out_Combat_Area(class AActor* OverlappedActor, class AActor* OtherActor);
	void Turn_Off_Hit_Box();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Banshee_Common_C">();
	}
	static class ABP_Banshee_Common_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Banshee_Common_C>();
	}
};
static_assert(alignof(ABP_Banshee_Common_C) == 0x000010, "Wrong alignment on ABP_Banshee_Common_C");
static_assert(sizeof(ABP_Banshee_Common_C) == 0x001610, "Wrong size on ABP_Banshee_Common_C");
static_assert(offsetof(ABP_Banshee_Common_C, UberGraphFrame_BP_Banshee_Common_C) == 0x0013F8, "Member 'ABP_Banshee_Common_C::UberGraphFrame_BP_Banshee_Common_C' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, FXS_Banshee_Body_001A) == 0x001400, "Member 'ABP_Banshee_Common_C::FXS_Banshee_Body_001A' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, BP_DCHitBox_Skirt) == 0x001408, "Member 'ABP_Banshee_Common_C::BP_DCHitBox_Skirt' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, FogRushVFX) == 0x001410, "Member 'ABP_Banshee_Common_C::FogRushVFX' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, SK_Dress_Skirt) == 0x001418, "Member 'ABP_Banshee_Common_C::SK_Dress_Skirt' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, SK_Old_Hair) == 0x001420, "Member 'ABP_Banshee_Common_C::SK_Old_Hair' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, SK_Young_Hair) == 0x001428, "Member 'ABP_Banshee_Common_C::SK_Young_Hair' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, AttackSphere_FogRush) == 0x001430, "Member 'ABP_Banshee_Common_C::AttackSphere_FogRush' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, AttackBox_Pulling_Out) == 0x001438, "Member 'ABP_Banshee_Common_C::AttackBox_Pulling_Out' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, AttackBox_Pulling_In) == 0x001440, "Member 'ABP_Banshee_Common_C::AttackBox_Pulling_In' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, AttackCapsule_HideAttack) == 0x001448, "Member 'ABP_Banshee_Common_C::AttackCapsule_HideAttack' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, BP_DCHitBox_Leg6) == 0x001450, "Member 'ABP_Banshee_Common_C::BP_DCHitBox_Leg6' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, BP_DCHitBox_Leg5) == 0x001458, "Member 'ABP_Banshee_Common_C::BP_DCHitBox_Leg5' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, BP_DCHitBox_Leg4) == 0x001460, "Member 'ABP_Banshee_Common_C::BP_DCHitBox_Leg4' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, BP_DCHitBox_Leg3) == 0x001468, "Member 'ABP_Banshee_Common_C::BP_DCHitBox_Leg3' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, BP_DCHitBox_Leg2) == 0x001470, "Member 'ABP_Banshee_Common_C::BP_DCHitBox_Leg2' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, BP_DCHitBox_Leg1) == 0x001478, "Member 'ABP_Banshee_Common_C::BP_DCHitBox_Leg1' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, BP_DCHitBox8) == 0x001480, "Member 'ABP_Banshee_Common_C::BP_DCHitBox8' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, BP_DCHitBox7) == 0x001488, "Member 'ABP_Banshee_Common_C::BP_DCHitBox7' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, BP_DCHitBox6) == 0x001490, "Member 'ABP_Banshee_Common_C::BP_DCHitBox6' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, BP_DCHitBox5) == 0x001498, "Member 'ABP_Banshee_Common_C::BP_DCHitBox5' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, BP_DCHitBox4) == 0x0014A0, "Member 'ABP_Banshee_Common_C::BP_DCHitBox4' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, BP_DCHitBox3) == 0x0014A8, "Member 'ABP_Banshee_Common_C::BP_DCHitBox3' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, BP_DCHitBox2) == 0x0014B0, "Member 'ABP_Banshee_Common_C::BP_DCHitBox2' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, BP_DCHitBox1) == 0x0014B8, "Member 'ABP_Banshee_Common_C::BP_DCHitBox1' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, BP_DCHitBox) == 0x0014C0, "Member 'ABP_Banshee_Common_C::BP_DCHitBox' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, NSWE) == 0x0014C8, "Member 'ABP_Banshee_Common_C::NSWE' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, Spawned_Fog1) == 0x0014D0, "Member 'ABP_Banshee_Common_C::Spawned_Fog1' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, Spawned_Fog2) == 0x0014E0, "Member 'ABP_Banshee_Common_C::Spawned_Fog2' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, Fog_Missile2_Asset_ID) == 0x0014F0, "Member 'ABP_Banshee_Common_C::Fog_Missile2_Asset_ID' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, Pulling_Overlapped_Actors) == 0x001500, "Member 'ABP_Banshee_Common_C::Pulling_Overlapped_Actors' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, HideAttack_Overlapped_Actors) == 0x001510, "Member 'ABP_Banshee_Common_C::HideAttack_Overlapped_Actors' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, MorphDatas) == 0x001520, "Member 'ABP_Banshee_Common_C::MorphDatas' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, RemoveMorphDatas) == 0x001530, "Member 'ABP_Banshee_Common_C::RemoveMorphDatas' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, FogRush_Overlapped_Actors) == 0x001540, "Member 'ABP_Banshee_Common_C::FogRush_Overlapped_Actors' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, Specters) == 0x001550, "Member 'ABP_Banshee_Common_C::Specters' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, Max_Specters_Count) == 0x001560, "Member 'ABP_Banshee_Common_C::Max_Specters_Count' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, Specter_Asset_ID) == 0x001564, "Member 'ABP_Banshee_Common_C::Specter_Asset_ID' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, HitBox_Type_Banshee) == 0x001578, "Member 'ABP_Banshee_Common_C::HitBox_Type_Banshee' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, HitBox_Type_Human) == 0x001588, "Member 'ABP_Banshee_Common_C::HitBox_Type_Human' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, HitBox_Type_Common) == 0x001598, "Member 'ABP_Banshee_Common_C::HitBox_Type_Common' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, Special_Pattern_Trigger_Tag) == 0x0015A8, "Member 'ABP_Banshee_Common_C::Special_Pattern_Trigger_Tag' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, FogRush_Timer) == 0x0015B0, "Member 'ABP_Banshee_Common_C::FogRush_Timer' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, CombatArea_Fog_Players) == 0x0015B8, "Member 'ABP_Banshee_Common_C::CombatArea_Fog_Players' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, Is_Banshee_Type) == 0x0015C8, "Member 'ABP_Banshee_Common_C::Is_Banshee_Type' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, SK_Visible_Mesh) == 0x0015D0, "Member 'ABP_Banshee_Common_C::SK_Visible_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, FogMissile1_NSWE_Central_Spawn_Location) == 0x0015E0, "Member 'ABP_Banshee_Common_C::FogMissile1_NSWE_Central_Spawn_Location' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, CameraShake_Actor_Scream) == 0x0015F8, "Member 'ABP_Banshee_Common_C::CameraShake_Actor_Scream' has a wrong offset!");
static_assert(offsetof(ABP_Banshee_Common_C, CameraShake_PreShake) == 0x001600, "Member 'ABP_Banshee_Common_C::CameraShake_PreShake' has a wrong offset!");

}

