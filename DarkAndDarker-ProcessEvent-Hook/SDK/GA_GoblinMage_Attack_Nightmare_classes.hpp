#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_GoblinMage_Attack_Nightmare

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GA_GoblinMage_Attack_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_GoblinMage_Attack_Nightmare.GA_GoblinMage_Attack_Nightmare_C
// 0x0030 (0x0888 - 0x0858)
class UGA_GoblinMage_Attack_Nightmare_C final : public UGA_GoblinMage_Attack_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_GoblinMage_Attack_Nightmare_C;   // 0x0858(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         Fire_Count;                                        // 0x0860(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5038[0x4];                                     // 0x0864(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Channeling_TimerHandle;                            // 0x0868(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Out_Socket_Location_0;                             // 0x0870(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AbilityActivated(const struct FGameplayEventData& TriggerEventData);
	void Channeling();
	void CreateProjectiles(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData, float FirePower, const struct FVector& StartLocation);
	void ExecuteUbergraph_GA_GoblinMage_Attack_Nightmare(int32 EntryPoint);
	void K2_OnEndAbility(bool bWasCancelled);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_GoblinMage_Attack_Nightmare_C">();
	}
	static class UGA_GoblinMage_Attack_Nightmare_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_GoblinMage_Attack_Nightmare_C>();
	}
};
static_assert(alignof(UGA_GoblinMage_Attack_Nightmare_C) == 0x000008, "Wrong alignment on UGA_GoblinMage_Attack_Nightmare_C");
static_assert(sizeof(UGA_GoblinMage_Attack_Nightmare_C) == 0x000888, "Wrong size on UGA_GoblinMage_Attack_Nightmare_C");
static_assert(offsetof(UGA_GoblinMage_Attack_Nightmare_C, UberGraphFrame_GA_GoblinMage_Attack_Nightmare_C) == 0x000858, "Member 'UGA_GoblinMage_Attack_Nightmare_C::UberGraphFrame_GA_GoblinMage_Attack_Nightmare_C' has a wrong offset!");
static_assert(offsetof(UGA_GoblinMage_Attack_Nightmare_C, Fire_Count) == 0x000860, "Member 'UGA_GoblinMage_Attack_Nightmare_C::Fire_Count' has a wrong offset!");
static_assert(offsetof(UGA_GoblinMage_Attack_Nightmare_C, Channeling_TimerHandle) == 0x000868, "Member 'UGA_GoblinMage_Attack_Nightmare_C::Channeling_TimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_GoblinMage_Attack_Nightmare_C, Out_Socket_Location_0) == 0x000870, "Member 'UGA_GoblinMage_Attack_Nightmare_C::Out_Socket_Location_0' has a wrong offset!");

}

