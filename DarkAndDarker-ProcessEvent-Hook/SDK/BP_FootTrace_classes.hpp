#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FootTrace

#include "Basic.hpp"

#include "DungeonCrawler_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FootTrace.BP_FootTrace_C
// 0x0148 (0x03E8 - 0x02A0)
class ABP_FootTrace_C final : public ADecalActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDCTagCollisionDetectorComponent*       DCTagCollisionDetector;                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<int32, class UMaterialInstance*>         FootTraceMaterialMap;                              // 0x02B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bLeftFoot;                                         // 0x0300(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3B32[0x7];                                     // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               InRotator;                                         // 0x0308(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	class UMaterialInstanceDynamic*               DecalMaterialInstance;                             // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        FootTraceDuration;                                 // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentDuration;                                   // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAccountDataReplication                OwnerAccountDataReplication;                       // 0x0338(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn)
	struct FLinearColor                           Colour_A;                                          // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Colour_B;                                          // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_Footprint_DCTagCollisionDetector_K2Node_ComponentBoundEvent_0_GameplayTagCollisionDetectedSignature__DelegateSignature(bool bDetected, const struct FAccountDataReplication& AccountDataReplication);
	void ExecuteUbergraph_BP_FootTrace(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FootTrace_C">();
	}
	static class ABP_FootTrace_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FootTrace_C>();
	}
};
static_assert(alignof(ABP_FootTrace_C) == 0x000008, "Wrong alignment on ABP_FootTrace_C");
static_assert(sizeof(ABP_FootTrace_C) == 0x0003E8, "Wrong size on ABP_FootTrace_C");
static_assert(offsetof(ABP_FootTrace_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_FootTrace_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FootTrace_C, DCTagCollisionDetector) == 0x0002A8, "Member 'ABP_FootTrace_C::DCTagCollisionDetector' has a wrong offset!");
static_assert(offsetof(ABP_FootTrace_C, FootTraceMaterialMap) == 0x0002B0, "Member 'ABP_FootTrace_C::FootTraceMaterialMap' has a wrong offset!");
static_assert(offsetof(ABP_FootTrace_C, bLeftFoot) == 0x000300, "Member 'ABP_FootTrace_C::bLeftFoot' has a wrong offset!");
static_assert(offsetof(ABP_FootTrace_C, InRotator) == 0x000308, "Member 'ABP_FootTrace_C::InRotator' has a wrong offset!");
static_assert(offsetof(ABP_FootTrace_C, DecalMaterialInstance) == 0x000320, "Member 'ABP_FootTrace_C::DecalMaterialInstance' has a wrong offset!");
static_assert(offsetof(ABP_FootTrace_C, FootTraceDuration) == 0x000328, "Member 'ABP_FootTrace_C::FootTraceDuration' has a wrong offset!");
static_assert(offsetof(ABP_FootTrace_C, CurrentDuration) == 0x000330, "Member 'ABP_FootTrace_C::CurrentDuration' has a wrong offset!");
static_assert(offsetof(ABP_FootTrace_C, OwnerAccountDataReplication) == 0x000338, "Member 'ABP_FootTrace_C::OwnerAccountDataReplication' has a wrong offset!");
static_assert(offsetof(ABP_FootTrace_C, Colour_A) == 0x0003C8, "Member 'ABP_FootTrace_C::Colour_A' has a wrong offset!");
static_assert(offsetof(ABP_FootTrace_C, Colour_B) == 0x0003D8, "Member 'ABP_FootTrace_C::Colour_B' has a wrong offset!");

}

