#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LobbySelectCharacter

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_LobbySelectCharacter.BP_LobbySelectCharacter_C.ExecuteUbergraph_BP_LobbySelectCharacter
// 0x0048 (0x0048 - 0x0000)
struct BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53E7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UAnimationAsset*                  K2Node_Event_ItemStandIdle;                        // 0x0010(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_ItemHandType;                         // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_ItemSlotType;                         // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UABP_PlayerCharacterCapture_C*          K2Node_DynamicCast_AsABP_Player_Character_Capture; // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53E8[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_DynamicCast_As______;                       // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter) == 0x000008, "Wrong alignment on BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter");
static_assert(sizeof(BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter) == 0x000048, "Wrong size on BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter");
static_assert(offsetof(BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter, EntryPoint) == 0x000000, "Member 'BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter, K2Node_Event_ItemStandIdle) == 0x000010, "Member 'BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter::K2Node_Event_ItemStandIdle' has a wrong offset!");
static_assert(offsetof(BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter, K2Node_Event_ItemHandType) == 0x000018, "Member 'BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter::K2Node_Event_ItemHandType' has a wrong offset!");
static_assert(offsetof(BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter, K2Node_Event_ItemSlotType) == 0x000020, "Member 'BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter::K2Node_Event_ItemSlotType' has a wrong offset!");
static_assert(offsetof(BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter, K2Node_DynamicCast_AsABP_Player_Character_Capture) == 0x000028, "Member 'BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter::K2Node_DynamicCast_AsABP_Player_Character_Capture' has a wrong offset!");
static_assert(offsetof(BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter, K2Node_DynamicCast_As______) == 0x000038, "Member 'BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter::K2Node_DynamicCast_As______' has a wrong offset!");
static_assert(offsetof(BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_LobbySelectCharacter_C_ExecuteUbergraph_BP_LobbySelectCharacter::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_LobbySelectCharacter.BP_LobbySelectCharacter_C.CustomEvent
// 0x0018 (0x0018 - 0x0000)
struct BP_LobbySelectCharacter_C_CustomEvent final
{
public:
	const class UAnimationAsset*                  ItemStandIdle;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ItemHandType;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ItemSlotType;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LobbySelectCharacter_C_CustomEvent) == 0x000008, "Wrong alignment on BP_LobbySelectCharacter_C_CustomEvent");
static_assert(sizeof(BP_LobbySelectCharacter_C_CustomEvent) == 0x000018, "Wrong size on BP_LobbySelectCharacter_C_CustomEvent");
static_assert(offsetof(BP_LobbySelectCharacter_C_CustomEvent, ItemStandIdle) == 0x000000, "Member 'BP_LobbySelectCharacter_C_CustomEvent::ItemStandIdle' has a wrong offset!");
static_assert(offsetof(BP_LobbySelectCharacter_C_CustomEvent, ItemHandType) == 0x000008, "Member 'BP_LobbySelectCharacter_C_CustomEvent::ItemHandType' has a wrong offset!");
static_assert(offsetof(BP_LobbySelectCharacter_C_CustomEvent, ItemSlotType) == 0x000010, "Member 'BP_LobbySelectCharacter_C_CustomEvent::ItemSlotType' has a wrong offset!");

}

