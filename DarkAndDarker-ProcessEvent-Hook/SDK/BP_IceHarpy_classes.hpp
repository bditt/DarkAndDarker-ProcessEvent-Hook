#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IceHarpy

#include "Basic.hpp"

#include "BP_DCMonsterBaseWithOptions_classes.hpp"
#include "Engine_structs.hpp"
#include "DungeonCrawler_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_IceHarpy.BP_IceHarpy_C
// 0x0810 (0x1BF0 - 0x13E0)
class ABP_IceHarpy_C : public ABP_DCMonsterBaseWithOptions_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_IceHarpy_C;                      // 0x13D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_DCHitBox_C*                         HitBox_Foot_R;                                     // 0x13E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Foot_L;                                     // 0x13E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Calf_2_L;                                   // 0x13F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Calf_2_R;                                   // 0x13F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Thigh_R;                                    // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Calf_1_L;                                   // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Calf_1_R;                                   // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Hand_R;                                     // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Hand_L;                                     // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Thigh_L;                                    // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Upper_Arm_R;                                // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Upper_Arm_L;                                // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Low_Arm_L;                                  // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Low_Arm_R;                                  // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Body;                                       // 0x1450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Head;                                       // 0x1458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FMsgGASAttributeNotify                 In_Msg;                                            // 0x1460(0x0720)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        ModeChage;                                         // 0x1B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Phase_Count;                                       // 0x1B88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max;                                               // 0x1B8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Min;                                               // 0x1B90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LandingState;                                      // 0x1B94(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FD8[0x3];                                     // 0x1B95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Whirlwind_Circle_Direction_From_Self;              // 0x1B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Whirlwind_Circle_Distance_From_Self;               // 0x1BA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Whirlwind_Circle_Radius;                           // 0x1BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Whirlwind_Tick_Speed;                              // 0x1BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Whirlwind_Tick_Total_Count;                        // 0x1BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Whirlwind_Rotation_Angle_By_Tick;                  // 0x1BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_IceHarpy_C*                         As_BP_Ice_Harpy;                                   // 0x1BC8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_IceHarpy_Nightmare_C*               As_BP_Ice_Harpy_Nightmare;                         // 0x1BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 IceHarpy_Class;                                    // 0x1BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	ESpawnActorScaleMethod                        Transform_Scale_Method;                            // 0x1BE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_IceHarpy(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void OnSetAI();
	void Phase_Count_Function();
	void Phase_Count_Reset();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_IceHarpy_C">();
	}
	static class ABP_IceHarpy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_IceHarpy_C>();
	}
};
static_assert(alignof(ABP_IceHarpy_C) == 0x000010, "Wrong alignment on ABP_IceHarpy_C");
static_assert(sizeof(ABP_IceHarpy_C) == 0x001BF0, "Wrong size on ABP_IceHarpy_C");
static_assert(offsetof(ABP_IceHarpy_C, UberGraphFrame_BP_IceHarpy_C) == 0x0013D8, "Member 'ABP_IceHarpy_C::UberGraphFrame_BP_IceHarpy_C' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, HitBox_Foot_R) == 0x0013E0, "Member 'ABP_IceHarpy_C::HitBox_Foot_R' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, HitBox_Foot_L) == 0x0013E8, "Member 'ABP_IceHarpy_C::HitBox_Foot_L' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, HitBox_Calf_2_L) == 0x0013F0, "Member 'ABP_IceHarpy_C::HitBox_Calf_2_L' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, HitBox_Calf_2_R) == 0x0013F8, "Member 'ABP_IceHarpy_C::HitBox_Calf_2_R' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, HitBox_Thigh_R) == 0x001400, "Member 'ABP_IceHarpy_C::HitBox_Thigh_R' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, HitBox_Calf_1_L) == 0x001408, "Member 'ABP_IceHarpy_C::HitBox_Calf_1_L' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, HitBox_Calf_1_R) == 0x001410, "Member 'ABP_IceHarpy_C::HitBox_Calf_1_R' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, HitBox_Hand_R) == 0x001418, "Member 'ABP_IceHarpy_C::HitBox_Hand_R' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, HitBox_Hand_L) == 0x001420, "Member 'ABP_IceHarpy_C::HitBox_Hand_L' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, HitBox_Thigh_L) == 0x001428, "Member 'ABP_IceHarpy_C::HitBox_Thigh_L' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, HitBox_Upper_Arm_R) == 0x001430, "Member 'ABP_IceHarpy_C::HitBox_Upper_Arm_R' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, HitBox_Upper_Arm_L) == 0x001438, "Member 'ABP_IceHarpy_C::HitBox_Upper_Arm_L' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, HitBox_Low_Arm_L) == 0x001440, "Member 'ABP_IceHarpy_C::HitBox_Low_Arm_L' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, HitBox_Low_Arm_R) == 0x001448, "Member 'ABP_IceHarpy_C::HitBox_Low_Arm_R' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, HitBox_Body) == 0x001450, "Member 'ABP_IceHarpy_C::HitBox_Body' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, HitBox_Head) == 0x001458, "Member 'ABP_IceHarpy_C::HitBox_Head' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, In_Msg) == 0x001460, "Member 'ABP_IceHarpy_C::In_Msg' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, ModeChage) == 0x001B80, "Member 'ABP_IceHarpy_C::ModeChage' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, Phase_Count) == 0x001B88, "Member 'ABP_IceHarpy_C::Phase_Count' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, Max) == 0x001B8C, "Member 'ABP_IceHarpy_C::Max' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, Min) == 0x001B90, "Member 'ABP_IceHarpy_C::Min' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, LandingState) == 0x001B94, "Member 'ABP_IceHarpy_C::LandingState' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, Whirlwind_Circle_Direction_From_Self) == 0x001B98, "Member 'ABP_IceHarpy_C::Whirlwind_Circle_Direction_From_Self' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, Whirlwind_Circle_Distance_From_Self) == 0x001BA0, "Member 'ABP_IceHarpy_C::Whirlwind_Circle_Distance_From_Self' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, Whirlwind_Circle_Radius) == 0x001BA8, "Member 'ABP_IceHarpy_C::Whirlwind_Circle_Radius' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, Whirlwind_Tick_Speed) == 0x001BB0, "Member 'ABP_IceHarpy_C::Whirlwind_Tick_Speed' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, Whirlwind_Tick_Total_Count) == 0x001BB8, "Member 'ABP_IceHarpy_C::Whirlwind_Tick_Total_Count' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, Whirlwind_Rotation_Angle_By_Tick) == 0x001BC0, "Member 'ABP_IceHarpy_C::Whirlwind_Rotation_Angle_By_Tick' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, As_BP_Ice_Harpy) == 0x001BC8, "Member 'ABP_IceHarpy_C::As_BP_Ice_Harpy' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, As_BP_Ice_Harpy_Nightmare) == 0x001BD0, "Member 'ABP_IceHarpy_C::As_BP_Ice_Harpy_Nightmare' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, IceHarpy_Class) == 0x001BD8, "Member 'ABP_IceHarpy_C::IceHarpy_Class' has a wrong offset!");
static_assert(offsetof(ABP_IceHarpy_C, Transform_Scale_Method) == 0x001BE0, "Member 'ABP_IceHarpy_C::Transform_Scale_Method' has a wrong offset!");

}

