#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_ExploitationStrike

#include "Basic.hpp"

#include "GA_PlayerSkillInstantAndWaitForEnd_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_ExploitationStrike.GA_ExploitationStrike_C
// 0x0028 (0x0708 - 0x06E0)
class UGA_ExploitationStrike_C final : public UGA_PlayerSkillInstantAndWaitForEnd_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FPrimaryAssetId                        HealPercentConstant;                               // 0x06E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        MaxHealConstant;                                   // 0x06F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void EventReceived_64C5EE844099EC7CADD4DF8ED69BCE32(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void ExecuteUbergraph_GA_ExploitationStrike(int32 EntryPoint);
	void ServerOnSkillActivate(const struct FGameplayTag& SkillTag, const struct FGameplayTag& CooldownTag);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_ExploitationStrike_C">();
	}
	static class UGA_ExploitationStrike_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_ExploitationStrike_C>();
	}
};
static_assert(alignof(UGA_ExploitationStrike_C) == 0x000008, "Wrong alignment on UGA_ExploitationStrike_C");
static_assert(sizeof(UGA_ExploitationStrike_C) == 0x000708, "Wrong size on UGA_ExploitationStrike_C");
static_assert(offsetof(UGA_ExploitationStrike_C, UberGraphFrame) == 0x0006E0, "Member 'UGA_ExploitationStrike_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_ExploitationStrike_C, HealPercentConstant) == 0x0006E8, "Member 'UGA_ExploitationStrike_C::HealPercentConstant' has a wrong offset!");
static_assert(offsetof(UGA_ExploitationStrike_C, MaxHealConstant) == 0x0006F8, "Member 'UGA_ExploitationStrike_C::MaxHealConstant' has a wrong offset!");

}

