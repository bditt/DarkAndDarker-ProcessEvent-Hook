#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_CountingTargetNumber

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "E_CompareNumber_structs.hpp"
#include "E_ActivityArea_structs.hpp"
#include "E_DistanceFromVariables_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTD_CountingTargetNumber.BTD_CountingTargetNumber_C
// 0x00C8 (0x0168 - 0x00A0)
class UBTD_CountingTargetNumber_C final : public UBTDecorator_BlueprintBase
{
public:
	class ABP_DCMonsterBaseWithOptions_C*         ControlledPawn;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAIPerceptionComponent*                 AIPerception;                                      // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class ADCCharacterBase*>               TargetArray;                                       // 0x00B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         Sphere_Radius;                                     // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Player;                                            // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Monster;                                           // 0x00C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1E[0x2];                                     // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   Tags;                                              // 0x00C8(0x0010)(Edit, BlueprintVisible)
	TArray<struct FGameplayTag>                   Untags;                                            // 0x00D8(0x0010)(Edit, BlueprintVisible)
	E_ActivityArea                                Activity_Area;                                     // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DistanceFromVariables                       DistanceFrom;                                      // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1F[0x6];                                     // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Distance;                                          // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Angle;                                             // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Direction;                                         // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CompareNumber                               Compare;                                           // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C20[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Player_Count;                                      // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 BlackboardKey;                                     // 0x0118(0x0028)(Edit, BlueprintVisible)
	TArray<struct FPrimaryAssetId>                Monster_ID;                                        // 0x0140(0x0010)(Edit, BlueprintVisible)
	int32                                         Final_Player_Count;                                // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C21[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADCCharacterBase*>               TempTargetArray;                                   // 0x0158(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void FilterRange(bool* Bool);
	void FilterTags(bool* Bool);
	void GetTargetArray(bool* Bool);
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* Param_ControlledPawn);
	void TargetingType(bool* Bool);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTD_CountingTargetNumber_C">();
	}
	static class UBTD_CountingTargetNumber_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTD_CountingTargetNumber_C>();
	}
};
static_assert(alignof(UBTD_CountingTargetNumber_C) == 0x000008, "Wrong alignment on UBTD_CountingTargetNumber_C");
static_assert(sizeof(UBTD_CountingTargetNumber_C) == 0x000168, "Wrong size on UBTD_CountingTargetNumber_C");
static_assert(offsetof(UBTD_CountingTargetNumber_C, ControlledPawn) == 0x0000A0, "Member 'UBTD_CountingTargetNumber_C::ControlledPawn' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, AIPerception) == 0x0000A8, "Member 'UBTD_CountingTargetNumber_C::AIPerception' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, TargetArray) == 0x0000B0, "Member 'UBTD_CountingTargetNumber_C::TargetArray' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, Sphere_Radius) == 0x0000C0, "Member 'UBTD_CountingTargetNumber_C::Sphere_Radius' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, Player) == 0x0000C4, "Member 'UBTD_CountingTargetNumber_C::Player' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, Monster) == 0x0000C5, "Member 'UBTD_CountingTargetNumber_C::Monster' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, Tags) == 0x0000C8, "Member 'UBTD_CountingTargetNumber_C::Tags' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, Untags) == 0x0000D8, "Member 'UBTD_CountingTargetNumber_C::Untags' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, Activity_Area) == 0x0000E8, "Member 'UBTD_CountingTargetNumber_C::Activity_Area' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, DistanceFrom) == 0x0000E9, "Member 'UBTD_CountingTargetNumber_C::DistanceFrom' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, Distance) == 0x0000F0, "Member 'UBTD_CountingTargetNumber_C::Distance' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, Angle) == 0x0000F8, "Member 'UBTD_CountingTargetNumber_C::Angle' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, Direction) == 0x000100, "Member 'UBTD_CountingTargetNumber_C::Direction' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, Compare) == 0x000108, "Member 'UBTD_CountingTargetNumber_C::Compare' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, Player_Count) == 0x000110, "Member 'UBTD_CountingTargetNumber_C::Player_Count' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, BlackboardKey) == 0x000118, "Member 'UBTD_CountingTargetNumber_C::BlackboardKey' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, Monster_ID) == 0x000140, "Member 'UBTD_CountingTargetNumber_C::Monster_ID' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, Final_Player_Count) == 0x000150, "Member 'UBTD_CountingTargetNumber_C::Final_Player_Count' has a wrong offset!");
static_assert(offsetof(UBTD_CountingTargetNumber_C, TempTargetArray) == 0x000158, "Member 'UBTD_CountingTargetNumber_C::TempTargetArray' has a wrong offset!");

}

