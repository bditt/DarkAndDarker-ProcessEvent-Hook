#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_FrostSkeletonAxeman

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ABP_FrostSkeletonAxeman_structs.hpp"
#include "DungeonCrawler_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_FrostSkeletonAxeman.ABP_FrostSkeletonAxeman_C
// 0x0C90 (0x11C0 - 0x0530)
class UABP_FrostSkeletonAxeman_C final : public UDCMonsterAnimInstanceBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_FrostSkeletonAxeman::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0538(0x0010)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0548(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0550(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0558(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x0578(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x05A0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x05C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x05F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0618(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0640(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x0688(0x0028)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x06B0(0x00C8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x0778(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_2;                  // 0x07A0(0x00F0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0890(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x08B0(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x08D8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0900(0x0048)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x0948(0x00C8)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x0A10(0x00F0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0B00(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0B20(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0B48(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x0B68(0x00C8)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0C30(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0C58(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0C80(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0CA8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0CD0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0CF8(0x0028)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_2;                  // 0x0D20(0x0070)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0D90(0x00F0)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x0E80(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0EF0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0F10(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0F58(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0F78(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0FE8(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x1008(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x10D0(0x0080)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x1150(0x0048)()
	bool                                          Should_Play_Hit_Start_Reaction;                    // 0x1198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5927[0x7];                                     // 0x1199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IKHandRWeight;                                     // 0x11A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IKHandLWeaponPosition;                             // 0x11A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttackWalk;                                      // 0x11B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5928[0x7];                                     // 0x11B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Find_Stance_TimerHandle;                           // 0x11B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void ExecuteUbergraph_ABP_FrostSkeletonAxeman(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_FrostSkeletonAxeman_C">();
	}
	static class UABP_FrostSkeletonAxeman_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_FrostSkeletonAxeman_C>();
	}
};
static_assert(alignof(UABP_FrostSkeletonAxeman_C) == 0x000010, "Wrong alignment on UABP_FrostSkeletonAxeman_C");
static_assert(sizeof(UABP_FrostSkeletonAxeman_C) == 0x0011C0, "Wrong size on UABP_FrostSkeletonAxeman_C");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, UberGraphFrame) == 0x000530, "Member 'UABP_FrostSkeletonAxeman_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, __AnimBlueprintMutables) == 0x000538, "Member 'UABP_FrostSkeletonAxeman_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimBlueprintExtension_PropertyAccess) == 0x000548, "Member 'UABP_FrostSkeletonAxeman_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimBlueprintExtension_Base) == 0x000550, "Member 'UABP_FrostSkeletonAxeman_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_Root) == 0x000558, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_TransitionResult_10) == 0x000578, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_TransitionResult_9) == 0x0005A0, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_TransitionResult_8) == 0x0005C8, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_TransitionResult_7) == 0x0005F0, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_TransitionResult_6) == 0x000618, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_SequencePlayer_2) == 0x000640, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_UseCachedPose_4) == 0x000688, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_ApplyAdditive_1) == 0x0006B0, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_UseCachedPose_3) == 0x000778, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_LayeredBoneBlend_2) == 0x0007A0, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_LayeredBoneBlend_2' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_StateResult_5) == 0x000890, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_UseCachedPose_2) == 0x0008B0, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_UseCachedPose_1) == 0x0008D8, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_SequencePlayer_1) == 0x000900, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_ApplyAdditive) == 0x000948, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_LayeredBoneBlend_1) == 0x000A10, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_StateResult_4) == 0x000B00, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_UseCachedPose) == 0x000B20, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_StateResult_3) == 0x000B48, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_StateMachine_1) == 0x000B68, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_TransitionResult_5) == 0x000C30, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_TransitionResult_4) == 0x000C58, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_TransitionResult_3) == 0x000C80, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_TransitionResult_2) == 0x000CA8, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_TransitionResult_1) == 0x000CD0, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_TransitionResult) == 0x000CF8, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_BlendSpacePlayer_2) == 0x000D20, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_BlendSpacePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_LayeredBoneBlend) == 0x000D90, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_BlendSpacePlayer_1) == 0x000E80, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_StateResult_2) == 0x000EF0, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_SequencePlayer) == 0x000F10, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_StateResult_1) == 0x000F58, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_BlendSpacePlayer) == 0x000F78, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_StateResult) == 0x000FE8, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_StateMachine) == 0x001008, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_SaveCachedPose) == 0x0010D0, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, AnimGraphNode_Slot) == 0x001150, "Member 'UABP_FrostSkeletonAxeman_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, Should_Play_Hit_Start_Reaction) == 0x001198, "Member 'UABP_FrostSkeletonAxeman_C::Should_Play_Hit_Start_Reaction' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, IKHandRWeight) == 0x0011A0, "Member 'UABP_FrostSkeletonAxeman_C::IKHandRWeight' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, IKHandLWeaponPosition) == 0x0011A8, "Member 'UABP_FrostSkeletonAxeman_C::IKHandLWeaponPosition' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, IsAttackWalk) == 0x0011B0, "Member 'UABP_FrostSkeletonAxeman_C::IsAttackWalk' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonAxeman_C, Find_Stance_TimerHandle) == 0x0011B8, "Member 'UABP_FrostSkeletonAxeman_C::Find_Stance_TimerHandle' has a wrong offset!");

}

