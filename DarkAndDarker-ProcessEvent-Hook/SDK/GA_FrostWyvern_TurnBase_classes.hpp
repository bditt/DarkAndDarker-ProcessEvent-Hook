#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_FrostWyvern_TurnBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GA_PlayMontageAndWaitForEventBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_FrostWyvern_TurnBase.GA_FrostWyvern_TurnBase_C
// 0x0038 (0x06B0 - 0x0678)
class UGA_FrostWyvern_TurnBase_C : public UGA_PlayMontageAndWaitForEventBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_FrostWyvern_TurnBase_C;          // 0x0678(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        Angle_To_Look_Target;                              // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_FrostWyvern_C*                      As_BP_Frost_Wyvern;                                // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Angle_To_Target;                                   // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADCCharacterBase*                       As_DCCharacter_Base;                               // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Renew_Angle_TimerHandle;                           // 0x06A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Rotation_TimerHandle;                              // 0x06A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AbilityActivated(const struct FGameplayEventData& TriggerEventData);
	void ExecuteUbergraph_GA_FrostWyvern_TurnBase(int32 EntryPoint);
	void K2_OnEndAbility(bool bWasCancelled);
	void Renew_Find_Look_Rotation();
	void Rotate_To_Target();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_FrostWyvern_TurnBase_C">();
	}
	static class UGA_FrostWyvern_TurnBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_FrostWyvern_TurnBase_C>();
	}
};
static_assert(alignof(UGA_FrostWyvern_TurnBase_C) == 0x000008, "Wrong alignment on UGA_FrostWyvern_TurnBase_C");
static_assert(sizeof(UGA_FrostWyvern_TurnBase_C) == 0x0006B0, "Wrong size on UGA_FrostWyvern_TurnBase_C");
static_assert(offsetof(UGA_FrostWyvern_TurnBase_C, UberGraphFrame_GA_FrostWyvern_TurnBase_C) == 0x000678, "Member 'UGA_FrostWyvern_TurnBase_C::UberGraphFrame_GA_FrostWyvern_TurnBase_C' has a wrong offset!");
static_assert(offsetof(UGA_FrostWyvern_TurnBase_C, Angle_To_Look_Target) == 0x000680, "Member 'UGA_FrostWyvern_TurnBase_C::Angle_To_Look_Target' has a wrong offset!");
static_assert(offsetof(UGA_FrostWyvern_TurnBase_C, As_BP_Frost_Wyvern) == 0x000688, "Member 'UGA_FrostWyvern_TurnBase_C::As_BP_Frost_Wyvern' has a wrong offset!");
static_assert(offsetof(UGA_FrostWyvern_TurnBase_C, Angle_To_Target) == 0x000690, "Member 'UGA_FrostWyvern_TurnBase_C::Angle_To_Target' has a wrong offset!");
static_assert(offsetof(UGA_FrostWyvern_TurnBase_C, As_DCCharacter_Base) == 0x000698, "Member 'UGA_FrostWyvern_TurnBase_C::As_DCCharacter_Base' has a wrong offset!");
static_assert(offsetof(UGA_FrostWyvern_TurnBase_C, Renew_Angle_TimerHandle) == 0x0006A0, "Member 'UGA_FrostWyvern_TurnBase_C::Renew_Angle_TimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_FrostWyvern_TurnBase_C, Rotation_TimerHandle) == 0x0006A8, "Member 'UGA_FrostWyvern_TurnBase_C::Rotation_TimerHandle' has a wrong offset!");

}

