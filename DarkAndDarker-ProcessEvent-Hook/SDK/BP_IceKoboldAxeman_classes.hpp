#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IceKoboldAxeman

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "BP_Kobold_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_IceKoboldAxeman.BP_IceKoboldAxeman_C
// 0x0090 (0x14A0 - 0x1410)
class ABP_IceKoboldAxeman_C : public ABP_Kobold_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_IceKoboldAxeman_C;               // 0x1410(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_DCHitBox_C*                         Foot_r;                                            // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Foot_l;                                            // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Leg_L;                                             // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Leg_R;                                             // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Thigh_l;                                           // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Thigh_r;                                           // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Lownarm_L;                                         // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Lownarm_R;                                         // 0x1450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Upperarm_l;                                        // 0x1458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Upperarm_r;                                        // 0x1460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Head;                                              // 0x1468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Body;                                              // 0x1470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FActiveGameplayEffectHandle>    Buff_MoveSpeed_Handle;                             // 0x1478(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Target_Recieved;                                   // 0x1488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_464E[0x7];                                     // 0x1489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Shield_Class;                                      // 0x1490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Count_Attack_on_Cooltime;                          // 0x1498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_IceKoboldAxeman(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void OnAsyncInitialized();
	void OnSetAI();
	void OnStuckByShield(class ADCCharacterBase* InInstigator, class AActor* InEffectCauser);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_IceKoboldAxeman_C">();
	}
	static class ABP_IceKoboldAxeman_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_IceKoboldAxeman_C>();
	}
};
static_assert(alignof(ABP_IceKoboldAxeman_C) == 0x000010, "Wrong alignment on ABP_IceKoboldAxeman_C");
static_assert(sizeof(ABP_IceKoboldAxeman_C) == 0x0014A0, "Wrong size on ABP_IceKoboldAxeman_C");
static_assert(offsetof(ABP_IceKoboldAxeman_C, UberGraphFrame_BP_IceKoboldAxeman_C) == 0x001410, "Member 'ABP_IceKoboldAxeman_C::UberGraphFrame_BP_IceKoboldAxeman_C' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldAxeman_C, Foot_r) == 0x001418, "Member 'ABP_IceKoboldAxeman_C::Foot_r' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldAxeman_C, Foot_l) == 0x001420, "Member 'ABP_IceKoboldAxeman_C::Foot_l' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldAxeman_C, Leg_L) == 0x001428, "Member 'ABP_IceKoboldAxeman_C::Leg_L' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldAxeman_C, Leg_R) == 0x001430, "Member 'ABP_IceKoboldAxeman_C::Leg_R' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldAxeman_C, Thigh_l) == 0x001438, "Member 'ABP_IceKoboldAxeman_C::Thigh_l' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldAxeman_C, Thigh_r) == 0x001440, "Member 'ABP_IceKoboldAxeman_C::Thigh_r' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldAxeman_C, Lownarm_L) == 0x001448, "Member 'ABP_IceKoboldAxeman_C::Lownarm_L' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldAxeman_C, Lownarm_R) == 0x001450, "Member 'ABP_IceKoboldAxeman_C::Lownarm_R' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldAxeman_C, Upperarm_l) == 0x001458, "Member 'ABP_IceKoboldAxeman_C::Upperarm_l' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldAxeman_C, Upperarm_r) == 0x001460, "Member 'ABP_IceKoboldAxeman_C::Upperarm_r' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldAxeman_C, Head) == 0x001468, "Member 'ABP_IceKoboldAxeman_C::Head' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldAxeman_C, Body) == 0x001470, "Member 'ABP_IceKoboldAxeman_C::Body' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldAxeman_C, Buff_MoveSpeed_Handle) == 0x001478, "Member 'ABP_IceKoboldAxeman_C::Buff_MoveSpeed_Handle' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldAxeman_C, Target_Recieved) == 0x001488, "Member 'ABP_IceKoboldAxeman_C::Target_Recieved' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldAxeman_C, Shield_Class) == 0x001490, "Member 'ABP_IceKoboldAxeman_C::Shield_Class' has a wrong offset!");
static_assert(offsetof(ABP_IceKoboldAxeman_C, Count_Attack_on_Cooltime) == 0x001498, "Member 'ABP_IceKoboldAxeman_C::Count_Attack_on_Cooltime' has a wrong offset!");

}

