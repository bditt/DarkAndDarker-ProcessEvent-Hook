#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IceGolem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_DCMonsterBaseWithOptions_SubBoss_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_IceGolem.BP_IceGolem_C
// 0x00A0 (0x1480 - 0x13E0)
class ABP_IceGolem_C final : public ABP_DCMonsterBaseWithOptions_SubBoss_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_IceGolem_C;                      // 0x13D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Lazer;                                             // 0x13E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_IceGolem_Body_Low;                          // 0x13E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_IceGolem_Foot_L;                            // 0x13F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_IceGolem_Foot_R;                            // 0x13F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_IceGolem_Calf_L;                            // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_IceGolem_Calf_R;                            // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_IceGolem_Hand_R;                            // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_IceGolem_Hand_L;                            // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_IceGolem_Thigh_L;                           // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_IceGolem_Thigh_R;                           // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_IceGolem_LowArm_L;                          // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_IceGolem_LowArm_R;                          // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_IceGolem_Head;                              // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_IceGolem_Body_Upper;                        // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_IceGolem_UpperArm_R;                        // 0x1450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_IceGolem_UpperArm_L;                        // 0x1458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Phase_Count;                                       // 0x1460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Min;                                               // 0x1464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max;                                               // 0x1468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FEE[0x4];                                     // 0x146C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Overlapped_Enemies;                                // 0x1470(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_IceGolem(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void OnSetAI();
	void Phase_Count_Function();
	void Phase_Count_Reset();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorEndOverlap(class AActor* OtherActor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_IceGolem_C">();
	}
	static class ABP_IceGolem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_IceGolem_C>();
	}
};
static_assert(alignof(ABP_IceGolem_C) == 0x000010, "Wrong alignment on ABP_IceGolem_C");
static_assert(sizeof(ABP_IceGolem_C) == 0x001480, "Wrong size on ABP_IceGolem_C");
static_assert(offsetof(ABP_IceGolem_C, UberGraphFrame_BP_IceGolem_C) == 0x0013D8, "Member 'ABP_IceGolem_C::UberGraphFrame_BP_IceGolem_C' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, Lazer) == 0x0013E0, "Member 'ABP_IceGolem_C::Lazer' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, HitBox_IceGolem_Body_Low) == 0x0013E8, "Member 'ABP_IceGolem_C::HitBox_IceGolem_Body_Low' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, HitBox_IceGolem_Foot_L) == 0x0013F0, "Member 'ABP_IceGolem_C::HitBox_IceGolem_Foot_L' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, HitBox_IceGolem_Foot_R) == 0x0013F8, "Member 'ABP_IceGolem_C::HitBox_IceGolem_Foot_R' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, HitBox_IceGolem_Calf_L) == 0x001400, "Member 'ABP_IceGolem_C::HitBox_IceGolem_Calf_L' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, HitBox_IceGolem_Calf_R) == 0x001408, "Member 'ABP_IceGolem_C::HitBox_IceGolem_Calf_R' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, HitBox_IceGolem_Hand_R) == 0x001410, "Member 'ABP_IceGolem_C::HitBox_IceGolem_Hand_R' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, HitBox_IceGolem_Hand_L) == 0x001418, "Member 'ABP_IceGolem_C::HitBox_IceGolem_Hand_L' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, HitBox_IceGolem_Thigh_L) == 0x001420, "Member 'ABP_IceGolem_C::HitBox_IceGolem_Thigh_L' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, HitBox_IceGolem_Thigh_R) == 0x001428, "Member 'ABP_IceGolem_C::HitBox_IceGolem_Thigh_R' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, HitBox_IceGolem_LowArm_L) == 0x001430, "Member 'ABP_IceGolem_C::HitBox_IceGolem_LowArm_L' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, HitBox_IceGolem_LowArm_R) == 0x001438, "Member 'ABP_IceGolem_C::HitBox_IceGolem_LowArm_R' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, HitBox_IceGolem_Head) == 0x001440, "Member 'ABP_IceGolem_C::HitBox_IceGolem_Head' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, HitBox_IceGolem_Body_Upper) == 0x001448, "Member 'ABP_IceGolem_C::HitBox_IceGolem_Body_Upper' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, HitBox_IceGolem_UpperArm_R) == 0x001450, "Member 'ABP_IceGolem_C::HitBox_IceGolem_UpperArm_R' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, HitBox_IceGolem_UpperArm_L) == 0x001458, "Member 'ABP_IceGolem_C::HitBox_IceGolem_UpperArm_L' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, Phase_Count) == 0x001460, "Member 'ABP_IceGolem_C::Phase_Count' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, Min) == 0x001464, "Member 'ABP_IceGolem_C::Min' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, Max) == 0x001468, "Member 'ABP_IceGolem_C::Max' has a wrong offset!");
static_assert(offsetof(ABP_IceGolem_C, Overlapped_Enemies) == 0x001470, "Member 'ABP_IceGolem_C::Overlapped_Enemies' has a wrong offset!");

}

