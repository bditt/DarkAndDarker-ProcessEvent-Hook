#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IceSpider

#include "Basic.hpp"

#include "BP_DCMonsterBaseWithOptions_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_IceSpider.BP_IceSpider_C
// 0x00A0 (0x1480 - 0x13E0)
class ABP_IceSpider_C : public ABP_DCMonsterBaseWithOptions_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_IceSpider_C;                     // 0x13D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_DCHitBox_C*                         HitBox_Leg_D_R_4;                                  // 0x13E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_D_R_3;                                  // 0x13E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_D_R_2;                                  // 0x13F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_D_R_1;                                  // 0x13F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_D_L_4;                                  // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_D_L_3;                                  // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_D_L_2;                                  // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_D_L_1;                                  // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_L_04;                                   // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_L_03;                                   // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_L_02;                                   // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_L_01;                                   // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_R_03;                                   // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_R_01;                                   // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Tail_0;                                     // 0x1450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_R_04;                                   // 0x1458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Leg_R_02;                                   // 0x1460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Head;                                       // 0x1468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        SelfDestuct_Radius;                                // 0x1470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SelfDestuct_OmenTime;                              // 0x1478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_IceSpider(int32 EntryPoint);
	void OnFMsgGASAttributeNotifyBlueprint(const struct FMsgGASAttributeNotify& InMsg);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_IceSpider_C">();
	}
	static class ABP_IceSpider_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_IceSpider_C>();
	}
};
static_assert(alignof(ABP_IceSpider_C) == 0x000010, "Wrong alignment on ABP_IceSpider_C");
static_assert(sizeof(ABP_IceSpider_C) == 0x001480, "Wrong size on ABP_IceSpider_C");
static_assert(offsetof(ABP_IceSpider_C, UberGraphFrame_BP_IceSpider_C) == 0x0013D8, "Member 'ABP_IceSpider_C::UberGraphFrame_BP_IceSpider_C' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Leg_D_R_4) == 0x0013E0, "Member 'ABP_IceSpider_C::HitBox_Leg_D_R_4' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Leg_D_R_3) == 0x0013E8, "Member 'ABP_IceSpider_C::HitBox_Leg_D_R_3' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Leg_D_R_2) == 0x0013F0, "Member 'ABP_IceSpider_C::HitBox_Leg_D_R_2' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Leg_D_R_1) == 0x0013F8, "Member 'ABP_IceSpider_C::HitBox_Leg_D_R_1' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Leg_D_L_4) == 0x001400, "Member 'ABP_IceSpider_C::HitBox_Leg_D_L_4' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Leg_D_L_3) == 0x001408, "Member 'ABP_IceSpider_C::HitBox_Leg_D_L_3' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Leg_D_L_2) == 0x001410, "Member 'ABP_IceSpider_C::HitBox_Leg_D_L_2' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Leg_D_L_1) == 0x001418, "Member 'ABP_IceSpider_C::HitBox_Leg_D_L_1' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Leg_L_04) == 0x001420, "Member 'ABP_IceSpider_C::HitBox_Leg_L_04' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Leg_L_03) == 0x001428, "Member 'ABP_IceSpider_C::HitBox_Leg_L_03' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Leg_L_02) == 0x001430, "Member 'ABP_IceSpider_C::HitBox_Leg_L_02' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Leg_L_01) == 0x001438, "Member 'ABP_IceSpider_C::HitBox_Leg_L_01' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Leg_R_03) == 0x001440, "Member 'ABP_IceSpider_C::HitBox_Leg_R_03' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Leg_R_01) == 0x001448, "Member 'ABP_IceSpider_C::HitBox_Leg_R_01' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Tail_0) == 0x001450, "Member 'ABP_IceSpider_C::HitBox_Tail_0' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Leg_R_04) == 0x001458, "Member 'ABP_IceSpider_C::HitBox_Leg_R_04' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Leg_R_02) == 0x001460, "Member 'ABP_IceSpider_C::HitBox_Leg_R_02' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, HitBox_Head) == 0x001468, "Member 'ABP_IceSpider_C::HitBox_Head' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, SelfDestuct_Radius) == 0x001470, "Member 'ABP_IceSpider_C::SelfDestuct_Radius' has a wrong offset!");
static_assert(offsetof(ABP_IceSpider_C, SelfDestuct_OmenTime) == 0x001478, "Member 'ABP_IceSpider_C::SelfDestuct_OmenTime' has a wrong offset!");

}

