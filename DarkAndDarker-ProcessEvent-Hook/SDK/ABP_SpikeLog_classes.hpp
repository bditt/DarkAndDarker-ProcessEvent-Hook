#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_SpikeLog

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "DungeonCrawler_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_SpikeLog.ABP_SpikeLog_C
// 0x1030 (0x1460 - 0x0430)
class UABP_SpikeLog_C final : public UDCAnimInstanceBase
{
public:
	uint8                                         Pad_4242[0x8];                                     // 0x0428(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0430(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0438(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0440(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0448(0x0020)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_7;                              // 0x0468(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x04B0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x04D8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0500(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0548(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0568(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x05B0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x05D0(0x00C8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_6;                              // 0x0698(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x06E0(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_9;                     // 0x0760(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_8;                     // 0x0788(0x0028)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_2;                       // 0x07B0(0x00C8)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0878(0x0128)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x09A0(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x09C0(0x0020)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_5;                              // 0x09E0(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_4;                              // 0x0A28(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_3;                              // 0x0A70(0x0048)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_1;                       // 0x0AB8(0x00C8)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x0B80(0x00C8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x0C48(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x0C90(0x00F0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_7;                     // 0x0D80(0x0028)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_3;                     // 0x0DA8(0x00C8)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_2;                     // 0x0E70(0x00C8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0F38(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0F80(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_6;                     // 0x1000(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x1028(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x1050(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x1078(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x10A0(0x00F0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x1190(0x0048)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x11D8(0x00C8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x12A0(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x12C8(0x0048)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x1310(0x00C8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x13D8(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x1400(0x0028)()
	double                                        AttackDistanceValue;                               // 0x1428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AttackRotationValue;                               // 0x1430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AttackPlayRateValue;                               // 0x1438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LaunchDistanceValue;                               // 0x1440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LaunchHeightValue;                                 // 0x1448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IsHorizontalLaunch;                                // 0x1450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IsVerticalLaunch;                                  // 0x1458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void BlueprintBeginPlay();
	void BlueprintInitializeAnimation();
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SpikeLog_AnimGraphNode_TransitionResult_E19464F34FDCCC84B0068D95C3A1BFB5();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SpikeLog_AnimGraphNode_TransitionResult_F3ED430940A8AA4F4136F5A98F09F530();
	void ExecuteUbergraph_ABP_SpikeLog(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_SpikeLog_C">();
	}
	static class UABP_SpikeLog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_SpikeLog_C>();
	}
};
static_assert(alignof(UABP_SpikeLog_C) == 0x000010, "Wrong alignment on UABP_SpikeLog_C");
static_assert(sizeof(UABP_SpikeLog_C) == 0x001460, "Wrong size on UABP_SpikeLog_C");
static_assert(offsetof(UABP_SpikeLog_C, UberGraphFrame) == 0x000430, "Member 'UABP_SpikeLog_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimBlueprintExtension_PropertyAccess) == 0x000438, "Member 'UABP_SpikeLog_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimBlueprintExtension_Base) == 0x000440, "Member 'UABP_SpikeLog_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_Root) == 0x000448, "Member 'UABP_SpikeLog_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_Slot_7) == 0x000468, "Member 'UABP_SpikeLog_C::AnimGraphNode_Slot_7' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_TransitionResult_1) == 0x0004B0, "Member 'UABP_SpikeLog_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_TransitionResult) == 0x0004D8, "Member 'UABP_SpikeLog_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_SequencePlayer_2) == 0x000500, "Member 'UABP_SpikeLog_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_StateResult_1) == 0x000548, "Member 'UABP_SpikeLog_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_SequencePlayer_1) == 0x000568, "Member 'UABP_SpikeLog_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_StateResult) == 0x0005B0, "Member 'UABP_SpikeLog_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_StateMachine) == 0x0005D0, "Member 'UABP_SpikeLog_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_Slot_6) == 0x000698, "Member 'UABP_SpikeLog_C::AnimGraphNode_Slot_6' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_SaveCachedPose_1) == 0x0006E0, "Member 'UABP_SpikeLog_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_UseCachedPose_9) == 0x000760, "Member 'UABP_SpikeLog_C::AnimGraphNode_UseCachedPose_9' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_UseCachedPose_8) == 0x000788, "Member 'UABP_SpikeLog_C::AnimGraphNode_UseCachedPose_8' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_TwoWayBlend_2) == 0x0007B0, "Member 'UABP_SpikeLog_C::AnimGraphNode_TwoWayBlend_2' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_ModifyBone) == 0x000878, "Member 'UABP_SpikeLog_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_LocalToComponentSpace) == 0x0009A0, "Member 'UABP_SpikeLog_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_ComponentToLocalSpace) == 0x0009C0, "Member 'UABP_SpikeLog_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_Slot_5) == 0x0009E0, "Member 'UABP_SpikeLog_C::AnimGraphNode_Slot_5' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_Slot_4) == 0x000A28, "Member 'UABP_SpikeLog_C::AnimGraphNode_Slot_4' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_Slot_3) == 0x000A70, "Member 'UABP_SpikeLog_C::AnimGraphNode_Slot_3' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_TwoWayBlend_1) == 0x000AB8, "Member 'UABP_SpikeLog_C::AnimGraphNode_TwoWayBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_TwoWayBlend) == 0x000B80, "Member 'UABP_SpikeLog_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_Slot_2) == 0x000C48, "Member 'UABP_SpikeLog_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_LayeredBoneBlend_1) == 0x000C90, "Member 'UABP_SpikeLog_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_UseCachedPose_7) == 0x000D80, "Member 'UABP_SpikeLog_C::AnimGraphNode_UseCachedPose_7' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_ApplyAdditive_3) == 0x000DA8, "Member 'UABP_SpikeLog_C::AnimGraphNode_ApplyAdditive_3' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_ApplyAdditive_2) == 0x000E70, "Member 'UABP_SpikeLog_C::AnimGraphNode_ApplyAdditive_2' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_SequencePlayer) == 0x000F38, "Member 'UABP_SpikeLog_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_SaveCachedPose) == 0x000F80, "Member 'UABP_SpikeLog_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_UseCachedPose_6) == 0x001000, "Member 'UABP_SpikeLog_C::AnimGraphNode_UseCachedPose_6' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_UseCachedPose_5) == 0x001028, "Member 'UABP_SpikeLog_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_UseCachedPose_4) == 0x001050, "Member 'UABP_SpikeLog_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_UseCachedPose_3) == 0x001078, "Member 'UABP_SpikeLog_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_LayeredBoneBlend) == 0x0010A0, "Member 'UABP_SpikeLog_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_Slot_1) == 0x001190, "Member 'UABP_SpikeLog_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_ApplyAdditive_1) == 0x0011D8, "Member 'UABP_SpikeLog_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_UseCachedPose_2) == 0x0012A0, "Member 'UABP_SpikeLog_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_Slot) == 0x0012C8, "Member 'UABP_SpikeLog_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_ApplyAdditive) == 0x001310, "Member 'UABP_SpikeLog_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_UseCachedPose_1) == 0x0013D8, "Member 'UABP_SpikeLog_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AnimGraphNode_UseCachedPose) == 0x001400, "Member 'UABP_SpikeLog_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AttackDistanceValue) == 0x001428, "Member 'UABP_SpikeLog_C::AttackDistanceValue' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AttackRotationValue) == 0x001430, "Member 'UABP_SpikeLog_C::AttackRotationValue' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, AttackPlayRateValue) == 0x001438, "Member 'UABP_SpikeLog_C::AttackPlayRateValue' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, LaunchDistanceValue) == 0x001440, "Member 'UABP_SpikeLog_C::LaunchDistanceValue' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, LaunchHeightValue) == 0x001448, "Member 'UABP_SpikeLog_C::LaunchHeightValue' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, IsHorizontalLaunch) == 0x001450, "Member 'UABP_SpikeLog_C::IsHorizontalLaunch' has a wrong offset!");
static_assert(offsetof(UABP_SpikeLog_C, IsVerticalLaunch) == 0x001458, "Member 'UABP_SpikeLog_C::IsVerticalLaunch' has a wrong offset!");

}

