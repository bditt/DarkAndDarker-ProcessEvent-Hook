#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Mimic_Large

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ABP_Mimic_Large_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "DungeonCrawler_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Mimic_Large.ABP_Mimic_Large_C
// 0x0B30 (0x1060 - 0x0530)
class UABP_Mimic_Large_C final : public UDCMonsterAnimInstanceBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_Mimic_Large::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0538(0x0008)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0540(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0548(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0550(0x0020)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0570(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x05B8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x05E0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x0608(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0630(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0658(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x06A0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x06C0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0708(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0728(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0798(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x07B8(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0880(0x0080)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0900(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0928(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0950(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0978(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x09A0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x09C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x09F0(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x0A18(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0A40(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x0A60(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x0A88(0x0028)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x0AB0(0x00C8)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x0B78(0x00F0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0C68(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0CB0(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x0CD0(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0CF8(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0D18(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0D40(0x0028)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x0D68(0x00C8)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0E30(0x00F0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0F20(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0F68(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0F88(0x00C8)()
	bool                                          Opened;                                            // 0x1050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLocked;                                           // 0x1051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldPlayHitReactionNotBlocked;                   // 0x1052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldPlayStaggeredNotBlocked;                     // 0x1053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldPlayHitReactionFlipFlopNotBlocked;           // 0x1054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void ExecuteUbergraph_ABP_Mimic_Large(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Mimic_Large_C">();
	}
	static class UABP_Mimic_Large_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Mimic_Large_C>();
	}
};
static_assert(alignof(UABP_Mimic_Large_C) == 0x000010, "Wrong alignment on UABP_Mimic_Large_C");
static_assert(sizeof(UABP_Mimic_Large_C) == 0x001060, "Wrong size on UABP_Mimic_Large_C");
static_assert(offsetof(UABP_Mimic_Large_C, UberGraphFrame) == 0x000530, "Member 'UABP_Mimic_Large_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, __AnimBlueprintMutables) == 0x000538, "Member 'UABP_Mimic_Large_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimBlueprintExtension_PropertyAccess) == 0x000540, "Member 'UABP_Mimic_Large_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimBlueprintExtension_Base) == 0x000548, "Member 'UABP_Mimic_Large_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_Root) == 0x000550, "Member 'UABP_Mimic_Large_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_Slot) == 0x000570, "Member 'UABP_Mimic_Large_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_TransitionResult_10) == 0x0005B8, "Member 'UABP_Mimic_Large_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_TransitionResult_9) == 0x0005E0, "Member 'UABP_Mimic_Large_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_TransitionResult_8) == 0x000608, "Member 'UABP_Mimic_Large_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_TransitionResult_7) == 0x000630, "Member 'UABP_Mimic_Large_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_SequencePlayer_3) == 0x000658, "Member 'UABP_Mimic_Large_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_StateResult_6) == 0x0006A0, "Member 'UABP_Mimic_Large_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_SequencePlayer_2) == 0x0006C0, "Member 'UABP_Mimic_Large_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_StateResult_5) == 0x000708, "Member 'UABP_Mimic_Large_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_BlendSpacePlayer) == 0x000728, "Member 'UABP_Mimic_Large_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_StateResult_4) == 0x000798, "Member 'UABP_Mimic_Large_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_StateMachine_1) == 0x0007B8, "Member 'UABP_Mimic_Large_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_SaveCachedPose) == 0x000880, "Member 'UABP_Mimic_Large_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_TransitionResult_6) == 0x000900, "Member 'UABP_Mimic_Large_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_TransitionResult_5) == 0x000928, "Member 'UABP_Mimic_Large_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_TransitionResult_4) == 0x000950, "Member 'UABP_Mimic_Large_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_TransitionResult_3) == 0x000978, "Member 'UABP_Mimic_Large_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_TransitionResult_2) == 0x0009A0, "Member 'UABP_Mimic_Large_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_TransitionResult_1) == 0x0009C8, "Member 'UABP_Mimic_Large_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_TransitionResult) == 0x0009F0, "Member 'UABP_Mimic_Large_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_UseCachedPose_5) == 0x000A18, "Member 'UABP_Mimic_Large_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_StateResult_3) == 0x000A40, "Member 'UABP_Mimic_Large_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_UseCachedPose_4) == 0x000A60, "Member 'UABP_Mimic_Large_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_UseCachedPose_3) == 0x000A88, "Member 'UABP_Mimic_Large_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_ApplyAdditive_1) == 0x000AB0, "Member 'UABP_Mimic_Large_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_LayeredBoneBlend_1) == 0x000B78, "Member 'UABP_Mimic_Large_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_SequencePlayer_1) == 0x000C68, "Member 'UABP_Mimic_Large_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_StateResult_2) == 0x000CB0, "Member 'UABP_Mimic_Large_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_UseCachedPose_2) == 0x000CD0, "Member 'UABP_Mimic_Large_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_StateResult_1) == 0x000CF8, "Member 'UABP_Mimic_Large_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_UseCachedPose_1) == 0x000D18, "Member 'UABP_Mimic_Large_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_UseCachedPose) == 0x000D40, "Member 'UABP_Mimic_Large_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_ApplyAdditive) == 0x000D68, "Member 'UABP_Mimic_Large_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_LayeredBoneBlend) == 0x000E30, "Member 'UABP_Mimic_Large_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_SequencePlayer) == 0x000F20, "Member 'UABP_Mimic_Large_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_StateResult) == 0x000F68, "Member 'UABP_Mimic_Large_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, AnimGraphNode_StateMachine) == 0x000F88, "Member 'UABP_Mimic_Large_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, Opened) == 0x001050, "Member 'UABP_Mimic_Large_C::Opened' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, bLocked) == 0x001051, "Member 'UABP_Mimic_Large_C::bLocked' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, ShouldPlayHitReactionNotBlocked) == 0x001052, "Member 'UABP_Mimic_Large_C::ShouldPlayHitReactionNotBlocked' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, ShouldPlayStaggeredNotBlocked) == 0x001053, "Member 'UABP_Mimic_Large_C::ShouldPlayStaggeredNotBlocked' has a wrong offset!");
static_assert(offsetof(UABP_Mimic_Large_C, ShouldPlayHitReactionFlipFlopNotBlocked) == 0x001054, "Member 'UABP_Mimic_Large_C::ShouldPlayHitReactionFlipFlopNotBlocked' has a wrong offset!");

}

