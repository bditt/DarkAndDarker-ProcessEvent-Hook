#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_IceHarpy_Attack_Whirlwind

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GA_IceHarpy_Attack_Whirlwind.GA_IceHarpy_Attack_Whirlwind_C.AbilityActivated
// 0x00B0 (0x00B0 - 0x0000)
struct GA_IceHarpy_Attack_Whirlwind_C_AbilityActivated final
{
public:
	struct FGameplayEventData                     TriggerEventData;                                  // 0x0000(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_IceHarpy_Attack_Whirlwind_C_AbilityActivated) == 0x000008, "Wrong alignment on GA_IceHarpy_Attack_Whirlwind_C_AbilityActivated");
static_assert(sizeof(GA_IceHarpy_Attack_Whirlwind_C_AbilityActivated) == 0x0000B0, "Wrong size on GA_IceHarpy_Attack_Whirlwind_C_AbilityActivated");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_AbilityActivated, TriggerEventData) == 0x000000, "Member 'GA_IceHarpy_Attack_Whirlwind_C_AbilityActivated::TriggerEventData' has a wrong offset!");

// Function GA_IceHarpy_Attack_Whirlwind.GA_IceHarpy_Attack_Whirlwind_C.Draw Whirlwind
// 0x0678 (0x0678 - 0x0000)
struct GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind final
{
public:
	bool                                          Left_Side;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50AF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50B0[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0028(0x0010)(ConstParm, ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50B1[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_MakeStruct_GameplayEventData;               // 0x0048(0x00B0)()
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50B2[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActiveGameplayEffectHandle>    CallFunc_ApplyEffectContainer_ReturnValue;         // 0x0100(0x0010)(ReferenceParm)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50B3[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADCPlayerCharacterBase*                 K2Node_DynamicCast_AsDCPlayer_Character_Base;      // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50B4[0x7];                                     // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50B5[0x7];                                     // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0148(0x0010)(ConstParm, ReferenceParm)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0160(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50B6[0x7];                                     // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 CallFunc_MakeGameplayCueParameters_ReturnValue;    // 0x0250(0x00D8)(ContainsInstancedReference)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0328(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0340(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0358(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50B7[0x4];                                     // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0380(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x03A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x03B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                         Temp_object_Variable_2;                            // 0x03D0(0x0010)(ConstParm, ReferenceParm)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1; // 0x03E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit_1;       // 0x03E8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue_1;  // 0x04D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50B8[0x7];                                     // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_MakeStruct_GameplayEventData_1;             // 0x04D8(0x00B0)()
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0588(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x058C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50B9[0x3];                                     // 0x058D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0590(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         CallFunc_BoxOverlapActors_OutActors;               // 0x05A0(0x0010)(ReferenceParm)
	bool                                          CallFunc_BoxOverlapActors_ReturnValue;             // 0x05B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50BA[0x7];                                     // 0x05B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x05B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x05D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x05E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x05EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x05F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50BB[0x4];                                     // 0x05F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x05F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0610(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0618(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                         Temp_object_Variable_3;                            // 0x0630(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         CallFunc_BoxOverlapActors_OutActors_1;             // 0x0640(0x0010)(ReferenceParm)
	bool                                          CallFunc_BoxOverlapActors_ReturnValue_1;           // 0x0650(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50BC[0x7];                                     // 0x0651(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0660(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50BD[0x4];                                     // 0x0664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0668(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_1;           // 0x0670(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind) == 0x000008, "Wrong alignment on GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind");
static_assert(sizeof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind) == 0x000678, "Wrong size on GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, Left_Side) == 0x000000, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::Left_Side' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, Temp_object_Variable) == 0x000008, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Subtract_IntInt_ReturnValue) == 0x00001C, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000020, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, Temp_int_Array_Index_Variable) == 0x000024, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, Temp_object_Variable_1) == 0x000028, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Array_Get_Item) == 0x000038, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, K2Node_MakeStruct_GameplayEventData) == 0x000048, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::K2Node_MakeStruct_GameplayEventData' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000F8, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_ApplyEffectContainer_ReturnValue) == 0x000100, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_ApplyEffectContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Max_ReturnValue) == 0x000110, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, K2Node_DynamicCast_AsDCPlayer_Character_Base) == 0x000118, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::K2Node_DynamicCast_AsDCPlayer_Character_Base' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, K2Node_DynamicCast_bSuccess) == 0x000120, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000128, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_IsValid_ReturnValue) == 0x000140, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, K2Node_MakeArray_Array) == 0x000148, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000158, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000160, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000248, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_MakeGameplayCueParameters_ReturnValue) == 0x000250, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_MakeGameplayCueParameters_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000328, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000340, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_GetForwardVector_ReturnValue) == 0x000358, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_BreakRotator_Roll) == 0x000370, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_BreakRotator_Pitch) == 0x000374, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_BreakRotator_Yaw) == 0x000378, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000380, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000398, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Add_VectorVector_ReturnValue) == 0x0003A0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_MakeRotator_ReturnValue) == 0x0003B8, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, Temp_object_Variable_2) == 0x0003D0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1) == 0x0003E0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_LineTraceSingleForObjects_OutHit_1) == 0x0003E8, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_LineTraceSingleForObjects_OutHit_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_LineTraceSingleForObjects_ReturnValue_1) == 0x0004D0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_LineTraceSingleForObjects_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, K2Node_MakeStruct_GameplayEventData_1) == 0x0004D8, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::K2Node_MakeStruct_GameplayEventData_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Array_AddUnique_ReturnValue) == 0x000588, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Array_Contains_ReturnValue) == 0x00058C, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, K2Node_MakeArray_Array_1) == 0x000590, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_BoxOverlapActors_OutActors) == 0x0005A0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_BoxOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_BoxOverlapActors_ReturnValue) == 0x0005B0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_BoxOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_GetForwardVector_ReturnValue_1) == 0x0005B8, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0005D0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_BreakRotator_Roll_1) == 0x0005E8, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_BreakRotator_Pitch_1) == 0x0005EC, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_BreakRotator_Yaw_1) == 0x0005F0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0005F8, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000610, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_MakeRotator_ReturnValue_1) == 0x000618, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, Temp_object_Variable_3) == 0x000630, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_BoxOverlapActors_OutActors_1) == 0x000640, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_BoxOverlapActors_OutActors_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_BoxOverlapActors_ReturnValue_1) == 0x000650, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_BoxOverlapActors_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000658, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000660, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000668, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind, CallFunc_MakeRotator_Yaw_ImplicitCast_1) == 0x000670, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Draw_Whirlwind::CallFunc_MakeRotator_Yaw_ImplicitCast_1' has a wrong offset!");

// Function GA_IceHarpy_Attack_Whirlwind.GA_IceHarpy_Attack_Whirlwind_C.EventReceived_8A926ED049483123053938B1308043C1
// 0x00B0 (0x00B0 - 0x0000)
struct GA_IceHarpy_Attack_Whirlwind_C_EventReceived_8A926ED049483123053938B1308043C1 final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_IceHarpy_Attack_Whirlwind_C_EventReceived_8A926ED049483123053938B1308043C1) == 0x000008, "Wrong alignment on GA_IceHarpy_Attack_Whirlwind_C_EventReceived_8A926ED049483123053938B1308043C1");
static_assert(sizeof(GA_IceHarpy_Attack_Whirlwind_C_EventReceived_8A926ED049483123053938B1308043C1) == 0x0000B0, "Wrong size on GA_IceHarpy_Attack_Whirlwind_C_EventReceived_8A926ED049483123053938B1308043C1");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_EventReceived_8A926ED049483123053938B1308043C1, Payload) == 0x000000, "Member 'GA_IceHarpy_Attack_Whirlwind_C_EventReceived_8A926ED049483123053938B1308043C1::Payload' has a wrong offset!");

// Function GA_IceHarpy_Attack_Whirlwind.GA_IceHarpy_Attack_Whirlwind_C.ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind
// 0x0368 (0x0368 - 0x0000)
struct GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayEventData& Payload)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50BE[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_CustomEvent_Payload;                        // 0x0018(0x00B0)()
	struct FGameplayEventData                     Temp_struct_Variable;                              // 0x00C8(0x00B0)()
	class UAbilityTask_WaitGameplayEvent*         CallFunc_WaitGameplayEvent_ReturnValue;            // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50BF[0x7];                                     // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_Event_TriggerEventData;                     // 0x0188(0x00B0)(ConstParm)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0238(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_IceHarpy_C*                         K2Node_DynamicCast_AsBP_Ice_Harpy;                 // 0x0240(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C0[0x2];                                     // 0x024A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x024C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C1[0x4];                                     // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1; // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 CallFunc_MakeGameplayCueParameters_ReturnValue;    // 0x0268(0x00D8)(ContainsInstancedReference)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0340(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0348(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0358(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1;  // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind) == 0x000008, "Wrong alignment on GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind");
static_assert(sizeof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind) == 0x000368, "Wrong size on GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, EntryPoint) == 0x000000, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, K2Node_CustomEvent_Payload) == 0x000018, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::K2Node_CustomEvent_Payload' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, Temp_struct_Variable) == 0x0000C8, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, CallFunc_WaitGameplayEvent_ReturnValue) == 0x000178, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::CallFunc_WaitGameplayEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, CallFunc_IsValid_ReturnValue) == 0x000180, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, K2Node_Event_TriggerEventData) == 0x000188, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::K2Node_Event_TriggerEventData' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000238, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, K2Node_DynamicCast_AsBP_Ice_Harpy) == 0x000240, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::K2Node_DynamicCast_AsBP_Ice_Harpy' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, K2Node_DynamicCast_bSuccess) == 0x000248, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, K2Node_Event_bWasCancelled) == 0x000249, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, K2Node_CreateDelegate_OutputDelegate_1) == 0x00024C, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1) == 0x000260, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, CallFunc_MakeGameplayCueParameters_ReturnValue) == 0x000268, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::CallFunc_MakeGameplayCueParameters_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000340, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, K2Node_CreateDelegate_OutputDelegate_2) == 0x000348, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000358, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000360, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1) == 0x000364, "Member 'GA_IceHarpy_Attack_Whirlwind_C_ExecuteUbergraph_GA_IceHarpy_Attack_Whirlwind::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1' has a wrong offset!");

// Function GA_IceHarpy_Attack_Whirlwind.GA_IceHarpy_Attack_Whirlwind_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_IceHarpy_Attack_Whirlwind_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_IceHarpy_Attack_Whirlwind_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_IceHarpy_Attack_Whirlwind_C_K2_OnEndAbility");
static_assert(sizeof(GA_IceHarpy_Attack_Whirlwind_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_IceHarpy_Attack_Whirlwind_C_K2_OnEndAbility");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_IceHarpy_Attack_Whirlwind_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_IceHarpy_Attack_Whirlwind.GA_IceHarpy_Attack_Whirlwind_C.NewFunction
// 0x0008 (0x0008 - 0x0000)
struct GA_IceHarpy_Attack_Whirlwind_C_NewFunction final
{
public:
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_IceHarpy_Attack_Whirlwind_C_NewFunction) == 0x000008, "Wrong alignment on GA_IceHarpy_Attack_Whirlwind_C_NewFunction");
static_assert(sizeof(GA_IceHarpy_Attack_Whirlwind_C_NewFunction) == 0x000008, "Wrong size on GA_IceHarpy_Attack_Whirlwind_C_NewFunction");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_NewFunction, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000000, "Member 'GA_IceHarpy_Attack_Whirlwind_C_NewFunction::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function GA_IceHarpy_Attack_Whirlwind.GA_IceHarpy_Attack_Whirlwind_C.Set Initial Variables
// 0x0450 (0x0450 - 0x0000)
struct GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables final
{
public:
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0070(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0160(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x0268(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x0280(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C2[0x4];                                     // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x02B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0328(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue_1;         // 0x0340(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0358(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_5;                // 0x0370(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_5;                // 0x0388(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_5;                   // 0x03A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C3[0x4];                                     // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x03D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x03E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0400(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0418(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0430(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C4[0x4];                                     // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_1;           // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables) == 0x000010, "Wrong alignment on GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables");
static_assert(sizeof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables) == 0x000450, "Wrong size on GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000000, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1) == 0x000008, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_GetTransform_ReturnValue_1) == 0x000070, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Location) == 0x0000D0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Rotation) == 0x0000E8, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Scale) == 0x000100, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Location_1) == 0x000118, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Rotation_1) == 0x000130, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Scale_1) == 0x000148, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_MakeTransform_ReturnValue) == 0x000160, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x0001C0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x0001D8, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Location_2) == 0x0001F0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Rotation_2) == 0x000208, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Scale_2) == 0x000220, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_FindLookAtRotation_ReturnValue) == 0x000238, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Location_3) == 0x000250, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Rotation_3) == 0x000268, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Scale_3) == 0x000280, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakRotator_Roll) == 0x000298, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakRotator_Pitch) == 0x00029C, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakRotator_Yaw) == 0x0002A0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0002A8, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_MakeRotator_ReturnValue) == 0x0002B0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Location_4) == 0x0002C8, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Rotation_4) == 0x0002E0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Scale_4) == 0x0002F8, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_GetForwardVector_ReturnValue) == 0x000310, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000328, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_FindLookAtRotation_ReturnValue_1) == 0x000340, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_FindLookAtRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_Add_VectorVector_ReturnValue) == 0x000358, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Location_5) == 0x000370, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Location_5' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Rotation_5) == 0x000388, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Rotation_5' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakTransform_Scale_5) == 0x0003A0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakTransform_Scale_5' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakRotator_Roll_1) == 0x0003B8, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakRotator_Pitch_1) == 0x0003BC, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_BreakRotator_Yaw_1) == 0x0003C0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0003C8, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_MakeRotator_ReturnValue_1) == 0x0003D0, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_GetForwardVector_ReturnValue_1) == 0x0003E8, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000400, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000418, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000430, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000438, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000440, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables, CallFunc_MakeRotator_Yaw_ImplicitCast_1) == 0x000448, "Member 'GA_IceHarpy_Attack_Whirlwind_C_Set_Initial_Variables::CallFunc_MakeRotator_Yaw_ImplicitCast_1' has a wrong offset!");

}

