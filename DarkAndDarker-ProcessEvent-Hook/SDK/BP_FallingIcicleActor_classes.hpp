#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FallingIcicleActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_PropsActorBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FallingIcicleActor.BP_FallingIcicleActor_C
// 0x00A0 (0x0558 - 0x04B8)
class ABP_FallingIcicleActor_C final : public ABP_PropsActorBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_FallingIcicleActor_C;            // 0x04B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_CaveFormations03;                               // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_fr_icicleG1;                                    // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_HangingSnow_03;                                 // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_HangingSnow_02;                                 // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_HangingSnow_01;                                 // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_fr_icicleA;                                     // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_fr_icicleG;                                     // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_CaveFormations02;                               // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_CaveFormations05;                               // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Falling_icicle_Mesh;                               // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDCGameObjectLinkComponent*             DCGameObjectLink;                                  // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Min_ReSpawnTime;                                   // 0x0528(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_ReSpawnTime;                                   // 0x0530(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Min_FireProjectile_DelayTime;                      // 0x0538(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_FireProjectile_DelayTime;                      // 0x0540(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Mesh_StandIcicle;                                  // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Mesh_FallingIcicle;                                // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FallingIcicleActor(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FallingIcicleActor_C">();
	}
	static class ABP_FallingIcicleActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FallingIcicleActor_C>();
	}
};
static_assert(alignof(ABP_FallingIcicleActor_C) == 0x000008, "Wrong alignment on ABP_FallingIcicleActor_C");
static_assert(sizeof(ABP_FallingIcicleActor_C) == 0x000558, "Wrong size on ABP_FallingIcicleActor_C");
static_assert(offsetof(ABP_FallingIcicleActor_C, UberGraphFrame_BP_FallingIcicleActor_C) == 0x0004B8, "Member 'ABP_FallingIcicleActor_C::UberGraphFrame_BP_FallingIcicleActor_C' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, SM_CaveFormations03) == 0x0004C0, "Member 'ABP_FallingIcicleActor_C::SM_CaveFormations03' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, SM_fr_icicleG1) == 0x0004C8, "Member 'ABP_FallingIcicleActor_C::SM_fr_icicleG1' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, SM_HangingSnow_03) == 0x0004D0, "Member 'ABP_FallingIcicleActor_C::SM_HangingSnow_03' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, SM_HangingSnow_02) == 0x0004D8, "Member 'ABP_FallingIcicleActor_C::SM_HangingSnow_02' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, SM_HangingSnow_01) == 0x0004E0, "Member 'ABP_FallingIcicleActor_C::SM_HangingSnow_01' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, SM_fr_icicleA) == 0x0004E8, "Member 'ABP_FallingIcicleActor_C::SM_fr_icicleA' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, SM_fr_icicleG) == 0x0004F0, "Member 'ABP_FallingIcicleActor_C::SM_fr_icicleG' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, PointLight) == 0x0004F8, "Member 'ABP_FallingIcicleActor_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, SM_CaveFormations02) == 0x000500, "Member 'ABP_FallingIcicleActor_C::SM_CaveFormations02' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, SM_CaveFormations05) == 0x000508, "Member 'ABP_FallingIcicleActor_C::SM_CaveFormations05' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, Falling_icicle_Mesh) == 0x000510, "Member 'ABP_FallingIcicleActor_C::Falling_icicle_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, DCGameObjectLink) == 0x000518, "Member 'ABP_FallingIcicleActor_C::DCGameObjectLink' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, Box) == 0x000520, "Member 'ABP_FallingIcicleActor_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, Min_ReSpawnTime) == 0x000528, "Member 'ABP_FallingIcicleActor_C::Min_ReSpawnTime' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, Max_ReSpawnTime) == 0x000530, "Member 'ABP_FallingIcicleActor_C::Max_ReSpawnTime' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, Min_FireProjectile_DelayTime) == 0x000538, "Member 'ABP_FallingIcicleActor_C::Min_FireProjectile_DelayTime' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, Max_FireProjectile_DelayTime) == 0x000540, "Member 'ABP_FallingIcicleActor_C::Max_FireProjectile_DelayTime' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, Mesh_StandIcicle) == 0x000548, "Member 'ABP_FallingIcicleActor_C::Mesh_StandIcicle' has a wrong offset!");
static_assert(offsetof(ABP_FallingIcicleActor_C, Mesh_FallingIcicle) == 0x000550, "Member 'ABP_FallingIcicleActor_C::Mesh_FallingIcicle' has a wrong offset!");

}

