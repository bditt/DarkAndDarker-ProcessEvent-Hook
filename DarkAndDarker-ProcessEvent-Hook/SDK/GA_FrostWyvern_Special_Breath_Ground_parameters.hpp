#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_FrostWyvern_Special_Breath_Ground

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.AbilityActivated
// 0x00B0 (0x00B0 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_AbilityActivated final
{
public:
	struct FGameplayEventData                     TriggerEventData;                                  // 0x0000(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_AbilityActivated) == 0x000008, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_AbilityActivated");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_AbilityActivated) == 0x0000B0, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_AbilityActivated");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_AbilityActivated, TriggerEventData) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_AbilityActivated::TriggerEventData' has a wrong offset!");

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.Apply Windforce
// 0x0110 (0x0110 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C16[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C17[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ADCPlayerCharacterBase*                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADCPlayerCharacterBase*                 CallFunc_Array_Get_Item_1;                         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C18[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1;  // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C19[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C1A[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue_1;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C1B[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce) == 0x000008, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce) == 0x000110, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, Temp_int_Array_Index_Variable) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000C, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, Temp_int_Loop_Counter_Variable_1) == 0x000014, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000018, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x00001C, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_Array_Get_Item) == 0x000020, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_Array_Get_Item_1) == 0x000028, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000030, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000040, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000048, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x000058, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_Not_PreBool_ReturnValue) == 0x000059, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000060, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_BooleanAND_ReturnValue) == 0x000078, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_Array_Length_ReturnValue) == 0x00007C, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000080, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_Array_Length_ReturnValue_1) == 0x000084, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_Max_ReturnValue) == 0x000088, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x00008C, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_Max_ReturnValue_1) == 0x000090, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_Max_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000098, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000B0, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_FindLookAtRotation_ReturnValue) == 0x0000C8, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_GetForwardVector_ReturnValue) == 0x0000E0, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000F8, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Apply_Windforce::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.Clear Damage TimerHandle
// 0x0001 (0x0001 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_Clear_Damage_TimerHandle final
{
public:
	bool                                          CallFunc_RemoveGameplayTag_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Damage_TimerHandle) == 0x000001, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_Clear_Damage_TimerHandle");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Damage_TimerHandle) == 0x000001, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_Clear_Damage_TimerHandle");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Damage_TimerHandle, CallFunc_RemoveGameplayTag_ReturnValue) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Damage_TimerHandle::CallFunc_RemoveGameplayTag_ReturnValue' has a wrong offset!");

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.Clear Rotate Tasks - Unused
// 0x0001 (0x0001 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_Clear_Rotate_Tasks_Minus_Unused final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Rotate_Tasks_Minus_Unused) == 0x000001, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_Clear_Rotate_Tasks_Minus_Unused");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Rotate_Tasks_Minus_Unused) == 0x000001, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_Clear_Rotate_Tasks_Minus_Unused");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Rotate_Tasks_Minus_Unused, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Rotate_Tasks_Minus_Unused::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.Clear Target - Unused
// 0x0001 (0x0001 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_Clear_Target_Minus_Unused final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Target_Minus_Unused) == 0x000001, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_Clear_Target_Minus_Unused");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Target_Minus_Unused) == 0x000001, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_Clear_Target_Minus_Unused");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Target_Minus_Unused, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Target_Minus_Unused::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.Clear Windforce All
// 0x0048 (0x0048 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C1C[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C1D[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ADCPlayerCharacterBase*                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADCPlayerCharacterBase*                 CallFunc_Array_Get_Item_1;                         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue_1;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All) == 0x000008, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All) == 0x000048, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All, Temp_int_Array_Index_Variable) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000C, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All, Temp_int_Loop_Counter_Variable_1) == 0x000014, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000018, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x00001C, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All, CallFunc_Array_Get_Item) == 0x000020, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All, CallFunc_Array_Get_Item_1) == 0x000028, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000034, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All, CallFunc_Array_Length_ReturnValue_1) == 0x000038, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All, CallFunc_Max_ReturnValue) == 0x00003C, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x000040, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All, CallFunc_Max_ReturnValue_1) == 0x000044, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Clear_Windforce_All::CallFunc_Max_ReturnValue_1' has a wrong offset!");

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.EventReceived_2538F3FC4C0590DD2D5F50858CFB1AF9
// 0x00B0 (0x00B0 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_2538F3FC4C0590DD2D5F50858CFB1AF9 final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_2538F3FC4C0590DD2D5F50858CFB1AF9) == 0x000008, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_2538F3FC4C0590DD2D5F50858CFB1AF9");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_2538F3FC4C0590DD2D5F50858CFB1AF9) == 0x0000B0, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_2538F3FC4C0590DD2D5F50858CFB1AF9");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_2538F3FC4C0590DD2D5F50858CFB1AF9, Payload) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_2538F3FC4C0590DD2D5F50858CFB1AF9::Payload' has a wrong offset!");

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.EventReceived_4A13B0FA478E9FB8061AE48DD7C4020B
// 0x00B0 (0x00B0 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_4A13B0FA478E9FB8061AE48DD7C4020B final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_4A13B0FA478E9FB8061AE48DD7C4020B) == 0x000008, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_4A13B0FA478E9FB8061AE48DD7C4020B");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_4A13B0FA478E9FB8061AE48DD7C4020B) == 0x0000B0, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_4A13B0FA478E9FB8061AE48DD7C4020B");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_4A13B0FA478E9FB8061AE48DD7C4020B, Payload) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_4A13B0FA478E9FB8061AE48DD7C4020B::Payload' has a wrong offset!");

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.EventReceived_4EF8A20F497BAB21CFFC6382AFA34D74
// 0x00B0 (0x00B0 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_4EF8A20F497BAB21CFFC6382AFA34D74 final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_4EF8A20F497BAB21CFFC6382AFA34D74) == 0x000008, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_4EF8A20F497BAB21CFFC6382AFA34D74");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_4EF8A20F497BAB21CFFC6382AFA34D74) == 0x0000B0, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_4EF8A20F497BAB21CFFC6382AFA34D74");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_4EF8A20F497BAB21CFFC6382AFA34D74, Payload) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_4EF8A20F497BAB21CFFC6382AFA34D74::Payload' has a wrong offset!");

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.EventReceived_B16513274F6928BFAC5813BBE6D63739
// 0x00B0 (0x00B0 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_B16513274F6928BFAC5813BBE6D63739 final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_B16513274F6928BFAC5813BBE6D63739) == 0x000008, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_B16513274F6928BFAC5813BBE6D63739");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_B16513274F6928BFAC5813BBE6D63739) == 0x0000B0, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_B16513274F6928BFAC5813BBE6D63739");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_B16513274F6928BFAC5813BBE6D63739, Payload) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_B16513274F6928BFAC5813BBE6D63739::Payload' has a wrong offset!");

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.EventReceived_FC4AA6884628A8C3C6DBC0995C5A4F39
// 0x00B0 (0x00B0 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_FC4AA6884628A8C3C6DBC0995C5A4F39 final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_FC4AA6884628A8C3C6DBC0995C5A4F39) == 0x000008, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_FC4AA6884628A8C3C6DBC0995C5A4F39");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_FC4AA6884628A8C3C6DBC0995C5A4F39) == 0x0000B0, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_FC4AA6884628A8C3C6DBC0995C5A4F39");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_FC4AA6884628A8C3C6DBC0995C5A4F39, Payload) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_EventReceived_FC4AA6884628A8C3C6DBC0995C5A4F39::Payload' has a wrong offset!");

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground
// 0x09D8 (0x09D8 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C1E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     Temp_struct_Variable;                              // 0x0008(0x00B0)()
	class UAbilityTask_WaitGameplayEvent*         CallFunc_WaitGameplayEvent_ReturnValue;            // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayEventData& Payload)> K2Node_CreateDelegate_OutputDelegate;              // 0x00C0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C1F[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_CustomEvent_Payload_3;                      // 0x00D8(0x00B0)()
	struct FGameplayEventData                     Temp_struct_Variable_1;                            // 0x0188(0x00B0)()
	class UAbilityTask_WaitGameplayEvent*         CallFunc_WaitGameplayEvent_ReturnValue_1;          // 0x0238(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C20[0x3];                                     // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGameplayEventData& Payload)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0244(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C21[0x4];                                     // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_CustomEvent_Payload_2;                      // 0x0258(0x00B0)()
	struct FGameplayEventData                     Temp_struct_Variable_2;                            // 0x0308(0x00B0)()
	class UAbilityTask_WaitGameplayEvent*         CallFunc_WaitGameplayEvent_ReturnValue_2;          // 0x03B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C22[0x3];                                     // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGameplayEventData& Payload)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x03C4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C23[0x4];                                     // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_CustomEvent_Payload_1;                      // 0x03D8(0x00B0)()
	struct FGameplayEventData                     Temp_struct_Variable_3;                            // 0x0488(0x00B0)()
	class UAbilityTask_WaitGameplayEvent*         CallFunc_WaitGameplayEvent_ReturnValue_3;          // 0x0538(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C24[0x3];                                     // 0x0541(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGameplayEventData& Payload)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0544(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C25[0x4];                                     // 0x0554(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_CustomEvent_Payload;                        // 0x0558(0x00B0)()
	struct FGameplayEventData                     Temp_struct_Variable_4;                            // 0x0608(0x00B0)()
	class UAbilityTask_WaitGameplayEvent*         CallFunc_WaitGameplayEvent_ReturnValue_4;          // 0x06B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x06C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x06C1(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C26[0x6];                                     // 0x06C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_CustomEvent_Payload_4;                      // 0x06C8(0x00B0)()
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0778(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0790(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0794(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0798(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C27[0x4];                                     // 0x079C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x07A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x07A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGameplayEventData                     K2Node_Event_TriggerEventData;                     // 0x07C0(0x00B0)(ConstParm)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0870(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C28[0x3];                                     // 0x0871(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0874(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x0884(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C29[0x3];                                     // 0x0885(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0888(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x0890(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x08A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x08A8(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue;                   // 0x08B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddGameplayTag_ReturnValue;               // 0x08B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C2A[0x6];                                     // 0x08B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x08B8(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 CallFunc_MakeGameplayCueParameters_ReturnValue;    // 0x08C0(0x00D8)(ContainsInstancedReference)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0998(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayEventData& Payload)> K2Node_CreateDelegate_OutputDelegate_6;            // 0x09A0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x09B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_FrostWyvern_C*                      K2Node_DynamicCast_AsBP_Frost_Wyvern;              // 0x09B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x09C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C2B[0x7];                                     // 0x09C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x09C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x09D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x09D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground) == 0x000008, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground) == 0x0009D8, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, EntryPoint) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, Temp_struct_Variable) == 0x000008, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_WaitGameplayEvent_ReturnValue) == 0x0000B8, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_WaitGameplayEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, K2Node_CreateDelegate_OutputDelegate) == 0x0000C0, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_IsValid_ReturnValue) == 0x0000D0, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, K2Node_CustomEvent_Payload_3) == 0x0000D8, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::K2Node_CustomEvent_Payload_3' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, Temp_struct_Variable_1) == 0x000188, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_WaitGameplayEvent_ReturnValue_1) == 0x000238, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_WaitGameplayEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_IsValid_ReturnValue_1) == 0x000240, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, K2Node_CreateDelegate_OutputDelegate_1) == 0x000244, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, K2Node_CustomEvent_Payload_2) == 0x000258, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::K2Node_CustomEvent_Payload_2' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, Temp_struct_Variable_2) == 0x000308, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_WaitGameplayEvent_ReturnValue_2) == 0x0003B8, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_WaitGameplayEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_IsValid_ReturnValue_2) == 0x0003C0, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, K2Node_CreateDelegate_OutputDelegate_2) == 0x0003C4, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, K2Node_CustomEvent_Payload_1) == 0x0003D8, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::K2Node_CustomEvent_Payload_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, Temp_struct_Variable_3) == 0x000488, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_WaitGameplayEvent_ReturnValue_3) == 0x000538, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_WaitGameplayEvent_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_IsValid_ReturnValue_3) == 0x000540, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, K2Node_CreateDelegate_OutputDelegate_3) == 0x000544, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, K2Node_CustomEvent_Payload) == 0x000558, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::K2Node_CustomEvent_Payload' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, Temp_struct_Variable_4) == 0x000608, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_WaitGameplayEvent_ReturnValue_4) == 0x0006B8, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_WaitGameplayEvent_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_IsValid_ReturnValue_4) == 0x0006C0, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, Temp_bool_Variable) == 0x0006C1, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, K2Node_CustomEvent_Payload_4) == 0x0006C8, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::K2Node_CustomEvent_Payload_4' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000778, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_BreakRotator_Roll) == 0x000790, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_BreakRotator_Pitch) == 0x000794, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_BreakRotator_Yaw) == 0x000798, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0007A0, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_MakeRotator_ReturnValue) == 0x0007A8, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, K2Node_Event_TriggerEventData) == 0x0007C0, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::K2Node_Event_TriggerEventData' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000870, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, K2Node_CreateDelegate_OutputDelegate_4) == 0x000874, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, K2Node_Event_bWasCancelled) == 0x000884, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000888, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, K2Node_CreateDelegate_OutputDelegate_5) == 0x000890, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0008A0, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x0008A8, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_RandomBool_ReturnValue) == 0x0008B0, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_RandomBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_AddGameplayTag_ReturnValue) == 0x0008B1, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_AddGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_K2_SetTimer_ReturnValue) == 0x0008B8, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_MakeGameplayCueParameters_ReturnValue) == 0x0008C0, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_MakeGameplayCueParameters_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_Abs_ReturnValue) == 0x000998, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, K2Node_CreateDelegate_OutputDelegate_6) == 0x0009A0, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x0009B0, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, K2Node_DynamicCast_AsBP_Frost_Wyvern) == 0x0009B8, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::K2Node_DynamicCast_AsBP_Frost_Wyvern' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, K2Node_DynamicCast_bSuccess) == 0x0009C0, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x0009C8, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0009D0, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x0009D4, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_ExecuteUbergraph_GA_FrostWyvern_Special_Breath_Ground::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.Find Marked Target - Unused
// 0x0040 (0x0040 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused final
{
public:
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C2C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C2D[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADCCharacterBase*                       CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C2E[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused) == 0x000008, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused) == 0x000040, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused, Temp_bool_True_if_break_was_hit_Variable) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused, Temp_int_Array_Index_Variable) == 0x000004, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused, CallFunc_Array_Get_Item) == 0x000018, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused, CallFunc_BooleanAND_ReturnValue) == 0x000021, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000028, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000038, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Find_Marked_Target_Minus_Unused::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_K2_OnEndAbility");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_K2_OnEndAbility");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.Remove Mark To Target - Unused
// 0x0058 (0x0058 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C2F[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C30[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADCCharacterBase*                       K2Node_DynamicCast_AsDCCharacter_Base;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C31[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_As_________________;            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C32[0x1];                                     // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            CallFunc_Array_Get_Item;                           // 0x003C(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveActiveGameplayEffect_ReturnValue;   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C33[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused) == 0x000008, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused) == 0x000058, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000008, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused, Temp_bool_Variable) == 0x000010, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused, K2Node_DynamicCast_AsDCCharacter_Base) == 0x000018, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused::K2Node_DynamicCast_AsDCCharacter_Base' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused, K2Node_DynamicCast_As_________________) == 0x000028, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused::K2Node_DynamicCast_As_________________' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000039, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused, CallFunc_IsValid_ReturnValue) == 0x00003A, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused, CallFunc_Array_Get_Item) == 0x00003C, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused, CallFunc_RemoveActiveGameplayEffect_ReturnValue) == 0x000048, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused::CallFunc_RemoveActiveGameplayEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00004C, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused, CallFunc_Max_ReturnValue) == 0x000050, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Remove_Mark_To_Target_Minus_Unused::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.Set Mark To Target - Unused
// 0x0010 (0x0010 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_Set_Mark_To_Target_Minus_Unused final
{
public:
	TArray<struct FActiveGameplayEffectHandle>    CallFunc_ApplyEffectContainer_ReturnValue;         // 0x0000(0x0010)(ReferenceParm)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_Set_Mark_To_Target_Minus_Unused) == 0x000008, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_Set_Mark_To_Target_Minus_Unused");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_Set_Mark_To_Target_Minus_Unused) == 0x000010, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_Set_Mark_To_Target_Minus_Unused");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Set_Mark_To_Target_Minus_Unused, CallFunc_ApplyEffectContainer_ReturnValue) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Set_Mark_To_Target_Minus_Unused::CallFunc_ApplyEffectContainer_ReturnValue' has a wrong offset!");

// Function GA_FrostWyvern_Special_Breath_Ground.GA_FrostWyvern_Special_Breath_Ground_C.Update Target -Unused
// 0x0010 (0x0010 - 0x0000)
struct GA_FrostWyvern_Special_Breath_Ground_C_Update_Target_MinusUnused final
{
public:
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C34[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ADCCharacterBase*                       CallFunc_PickRandomTarget_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_FrostWyvern_Special_Breath_Ground_C_Update_Target_MinusUnused) == 0x000008, "Wrong alignment on GA_FrostWyvern_Special_Breath_Ground_C_Update_Target_MinusUnused");
static_assert(sizeof(GA_FrostWyvern_Special_Breath_Ground_C_Update_Target_MinusUnused) == 0x000010, "Wrong size on GA_FrostWyvern_Special_Breath_Ground_C_Update_Target_MinusUnused");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Update_Target_MinusUnused, CallFunc_Array_Length_ReturnValue) == 0x000000, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Update_Target_MinusUnused::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Update_Target_MinusUnused, CallFunc_Greater_IntInt_ReturnValue) == 0x000004, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Update_Target_MinusUnused::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FrostWyvern_Special_Breath_Ground_C_Update_Target_MinusUnused, CallFunc_PickRandomTarget_ReturnValue) == 0x000008, "Member 'GA_FrostWyvern_Special_Breath_Ground_C_Update_Target_MinusUnused::CallFunc_PickRandomTarget_ReturnValue' has a wrong offset!");

}

