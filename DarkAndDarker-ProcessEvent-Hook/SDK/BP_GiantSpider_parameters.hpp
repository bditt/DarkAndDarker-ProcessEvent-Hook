#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GiantSpider

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_GiantSpider.BP_GiantSpider_C.ExecuteUbergraph_BP_GiantSpider
// 0x0038 (0x0038 - 0x0000)
struct BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_InGameplayTag;                        // 0x0004(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InCount;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1; // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_421C[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Get_BB_Probability_Probability;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Get_BB_Probability_Probability_1;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider) == 0x000008, "Wrong alignment on BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider");
static_assert(sizeof(BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider) == 0x000038, "Wrong size on BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider");
static_assert(offsetof(BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider, EntryPoint) == 0x000000, "Member 'BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider, K2Node_Event_InGameplayTag) == 0x000004, "Member 'BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider::K2Node_Event_InGameplayTag' has a wrong offset!");
static_assert(offsetof(BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider, K2Node_Event_InCount) == 0x00000C, "Member 'BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider::K2Node_Event_InCount' has a wrong offset!");
static_assert(offsetof(BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000011, "Member 'BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1) == 0x000012, "Member 'BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider, CallFunc_HasAuthority_ReturnValue) == 0x000013, "Member 'BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider, CallFunc_Get_BB_Probability_Probability) == 0x000018, "Member 'BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider::CallFunc_Get_BB_Probability_Probability' has a wrong offset!");
static_assert(offsetof(BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider, CallFunc_Get_BB_Probability_Probability_1) == 0x000028, "Member 'BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider::CallFunc_Get_BB_Probability_Probability_1' has a wrong offset!");
static_assert(offsetof(BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_GiantSpider_C_ExecuteUbergraph_BP_GiantSpider::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_GiantSpider.BP_GiantSpider_C.GameplayTagUpdated
// 0x000C (0x000C - 0x0000)
struct BP_GiantSpider_C_GameplayTagUpdated final
{
public:
	struct FGameplayTag                           InGameplayTag;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         InCount;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiantSpider_C_GameplayTagUpdated) == 0x000004, "Wrong alignment on BP_GiantSpider_C_GameplayTagUpdated");
static_assert(sizeof(BP_GiantSpider_C_GameplayTagUpdated) == 0x00000C, "Wrong size on BP_GiantSpider_C_GameplayTagUpdated");
static_assert(offsetof(BP_GiantSpider_C_GameplayTagUpdated, InGameplayTag) == 0x000000, "Member 'BP_GiantSpider_C_GameplayTagUpdated::InGameplayTag' has a wrong offset!");
static_assert(offsetof(BP_GiantSpider_C_GameplayTagUpdated, InCount) == 0x000008, "Member 'BP_GiantSpider_C_GameplayTagUpdated::InCount' has a wrong offset!");

}

