#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_MoveWithOptions_Fly

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_TargetTypeToMove_structs.hpp"
#include "DungeonCrawler_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_MoveWithOptions_Fly.BTT_MoveWithOptions_Fly_C
// 0x0108 (0x01B0 - 0x00A8)
class UBTT_MoveWithOptions_Fly_C final : public UBTT_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          CheckedDistance3D;                                 // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TargetTypeToMove                            DestinationType;                                   // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38DC[0x6];                                     // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Acceptance_Radius;                                 // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StopTime;                                          // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Slope_Angle;                                       // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CheckEnemyTick;                                    // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CheckEnemyDistance;                                // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RemainDistance;                                    // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveDirection;                                     // 0x00E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DestDistance;                                      // 0x0100(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxDistance_RandomMove;                            // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Random_Z_Min;                                      // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Random_Z_Max;                                      // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Destination;                                       // 0x0130(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          Owner_Controller;                                  // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Controlled_Pawn;                                   // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBlackboardComponent*                   Blackboard;                                        // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_DCMonsterBaseWithOptions_C*         As_BP_DCMonster_Base;                              // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   Distance;                                          // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetLocation;                                    // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetActor;                                       // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated;                                           // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reached;                                           // 0x0181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38DD[0x6];                                     // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADCCharacterBase*>               TargetArray;                                       // 0x0188(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FTimerHandle                           TimerHandle;                                       // 0x0198(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandleInvisibleTarget;                        // 0x01A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ADCCharacterBase*                       TargetEnemy;                                       // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Check_Invisible_Target();
	void Check_Remain_Distance_3D(class APawn* OwnerActor, double DeltaTime, double* ResultDistance);
	void CheckEnemies();
	void CheckObjects(class APawn* OwnerActor, bool* Result);
	void CheckStopTime();
	void ClearVariables();
	void EventReceived_DFF4174A4768D303B7BF7C8C1C1E69D4(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_BTT_MoveWithOptions_Fly(int32 EntryPoint);
	void OnTaskFinished(class AAIController* OwnerController, class APawn* ControlledPawn, EBTNodeResult TaskResult);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void SetDestination();
	void SetRemainDistance();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_MoveWithOptions_Fly_C">();
	}
	static class UBTT_MoveWithOptions_Fly_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_MoveWithOptions_Fly_C>();
	}
};
static_assert(alignof(UBTT_MoveWithOptions_Fly_C) == 0x000008, "Wrong alignment on UBTT_MoveWithOptions_Fly_C");
static_assert(sizeof(UBTT_MoveWithOptions_Fly_C) == 0x0001B0, "Wrong size on UBTT_MoveWithOptions_Fly_C");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, UberGraphFrame) == 0x0000A8, "Member 'UBTT_MoveWithOptions_Fly_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, CheckedDistance3D) == 0x0000B0, "Member 'UBTT_MoveWithOptions_Fly_C::CheckedDistance3D' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, DestinationType) == 0x0000B1, "Member 'UBTT_MoveWithOptions_Fly_C::DestinationType' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, Acceptance_Radius) == 0x0000B8, "Member 'UBTT_MoveWithOptions_Fly_C::Acceptance_Radius' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, StopTime) == 0x0000C0, "Member 'UBTT_MoveWithOptions_Fly_C::StopTime' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, Slope_Angle) == 0x0000C8, "Member 'UBTT_MoveWithOptions_Fly_C::Slope_Angle' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, CheckEnemyTick) == 0x0000D0, "Member 'UBTT_MoveWithOptions_Fly_C::CheckEnemyTick' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, CheckEnemyDistance) == 0x0000D8, "Member 'UBTT_MoveWithOptions_Fly_C::CheckEnemyDistance' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, RemainDistance) == 0x0000E0, "Member 'UBTT_MoveWithOptions_Fly_C::RemainDistance' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, MoveDirection) == 0x0000E8, "Member 'UBTT_MoveWithOptions_Fly_C::MoveDirection' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, DestDistance) == 0x000100, "Member 'UBTT_MoveWithOptions_Fly_C::DestDistance' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, MaxDistance_RandomMove) == 0x000118, "Member 'UBTT_MoveWithOptions_Fly_C::MaxDistance_RandomMove' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, Random_Z_Min) == 0x000120, "Member 'UBTT_MoveWithOptions_Fly_C::Random_Z_Min' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, Random_Z_Max) == 0x000128, "Member 'UBTT_MoveWithOptions_Fly_C::Random_Z_Max' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, Destination) == 0x000130, "Member 'UBTT_MoveWithOptions_Fly_C::Destination' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, Owner_Controller) == 0x000148, "Member 'UBTT_MoveWithOptions_Fly_C::Owner_Controller' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, Controlled_Pawn) == 0x000150, "Member 'UBTT_MoveWithOptions_Fly_C::Controlled_Pawn' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, Blackboard) == 0x000158, "Member 'UBTT_MoveWithOptions_Fly_C::Blackboard' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, As_BP_DCMonster_Base) == 0x000160, "Member 'UBTT_MoveWithOptions_Fly_C::As_BP_DCMonster_Base' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, Distance) == 0x000168, "Member 'UBTT_MoveWithOptions_Fly_C::Distance' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, TargetLocation) == 0x000170, "Member 'UBTT_MoveWithOptions_Fly_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, TargetActor) == 0x000178, "Member 'UBTT_MoveWithOptions_Fly_C::TargetActor' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, Rotated) == 0x000180, "Member 'UBTT_MoveWithOptions_Fly_C::Rotated' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, Reached) == 0x000181, "Member 'UBTT_MoveWithOptions_Fly_C::Reached' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, TargetArray) == 0x000188, "Member 'UBTT_MoveWithOptions_Fly_C::TargetArray' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, TimerHandle) == 0x000198, "Member 'UBTT_MoveWithOptions_Fly_C::TimerHandle' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, TimerHandleInvisibleTarget) == 0x0001A0, "Member 'UBTT_MoveWithOptions_Fly_C::TimerHandleInvisibleTarget' has a wrong offset!");
static_assert(offsetof(UBTT_MoveWithOptions_Fly_C, TargetEnemy) == 0x0001A8, "Member 'UBTT_MoveWithOptions_Fly_C::TargetEnemy' has a wrong offset!");

}

