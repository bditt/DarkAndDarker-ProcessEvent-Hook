#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpiderPot

#include "Basic.hpp"

#include "BP_SimpleDestructableActorBase_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SpiderPot.BP_SpiderPot_C
// 0x0078 (0x0548 - 0x04D0)
class ABP_SpiderPot_C : public ABP_SimpleDestructableActorBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_SpiderPot_C;                     // 0x04D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNavModifierComponent*                  NavModifier;                                       // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDCGeometryCollectionComponent*         GC_SpiderPot_Default;                              // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      Object_Types;                                      // 0x04F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsDead;                                            // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4430[0x7];                                     // 0x0501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SpawnTimerHandle;                                  // 0x0508(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSpiderSpawnCount;                               // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentSpiderCount;                                // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spawn_Interval;                                    // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4431[0x4];                                     // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Spawn_Interval_Random_Duration;                    // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        In_Monster_Id;                                     // 0x0528(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_GameSpawner_C*                      Spawner;                                           // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ADCMonsterBase*                         Monster;                                           // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SpiderPot(int32 EntryPoint);
	void OnImpactEnduranceExhausted(float ExhaustedTime, TSubclassOf<class UGameplayEffect> GameplayEffectClass, const struct FDCGameplayEffectContext& EffectContext);
	void OnMessageReceived_72CC1EC34A59F6F630B6F4A7FF85942F(class UMsgBaseNode* ProxyObject);
	void ReceiveBeginPlay();
	void ReceivePreInitializeComponents();
	void Spawn();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SpiderPot_C">();
	}
	static class ABP_SpiderPot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SpiderPot_C>();
	}
};
static_assert(alignof(ABP_SpiderPot_C) == 0x000008, "Wrong alignment on ABP_SpiderPot_C");
static_assert(sizeof(ABP_SpiderPot_C) == 0x000548, "Wrong size on ABP_SpiderPot_C");
static_assert(offsetof(ABP_SpiderPot_C, UberGraphFrame_BP_SpiderPot_C) == 0x0004D0, "Member 'ABP_SpiderPot_C::UberGraphFrame_BP_SpiderPot_C' has a wrong offset!");
static_assert(offsetof(ABP_SpiderPot_C, NavModifier) == 0x0004D8, "Member 'ABP_SpiderPot_C::NavModifier' has a wrong offset!");
static_assert(offsetof(ABP_SpiderPot_C, GC_SpiderPot_Default) == 0x0004E0, "Member 'ABP_SpiderPot_C::GC_SpiderPot_Default' has a wrong offset!");
static_assert(offsetof(ABP_SpiderPot_C, StaticMesh) == 0x0004E8, "Member 'ABP_SpiderPot_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_SpiderPot_C, Object_Types) == 0x0004F0, "Member 'ABP_SpiderPot_C::Object_Types' has a wrong offset!");
static_assert(offsetof(ABP_SpiderPot_C, IsDead) == 0x000500, "Member 'ABP_SpiderPot_C::IsDead' has a wrong offset!");
static_assert(offsetof(ABP_SpiderPot_C, SpawnTimerHandle) == 0x000508, "Member 'ABP_SpiderPot_C::SpawnTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_SpiderPot_C, MaxSpiderSpawnCount) == 0x000510, "Member 'ABP_SpiderPot_C::MaxSpiderSpawnCount' has a wrong offset!");
static_assert(offsetof(ABP_SpiderPot_C, CurrentSpiderCount) == 0x000514, "Member 'ABP_SpiderPot_C::CurrentSpiderCount' has a wrong offset!");
static_assert(offsetof(ABP_SpiderPot_C, Spawn_Interval) == 0x000518, "Member 'ABP_SpiderPot_C::Spawn_Interval' has a wrong offset!");
static_assert(offsetof(ABP_SpiderPot_C, Spawn_Interval_Random_Duration) == 0x000520, "Member 'ABP_SpiderPot_C::Spawn_Interval_Random_Duration' has a wrong offset!");
static_assert(offsetof(ABP_SpiderPot_C, In_Monster_Id) == 0x000528, "Member 'ABP_SpiderPot_C::In_Monster_Id' has a wrong offset!");
static_assert(offsetof(ABP_SpiderPot_C, Spawner) == 0x000538, "Member 'ABP_SpiderPot_C::Spawner' has a wrong offset!");
static_assert(offsetof(ABP_SpiderPot_C, Monster) == 0x000540, "Member 'ABP_SpiderPot_C::Monster' has a wrong offset!");

}

