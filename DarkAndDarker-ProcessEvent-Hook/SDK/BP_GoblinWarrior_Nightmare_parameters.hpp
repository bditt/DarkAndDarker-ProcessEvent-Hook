#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GoblinWarrior_Nightmare

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function BP_GoblinWarrior_Nightmare.BP_GoblinWarrior_Nightmare_C.ExecuteUbergraph_BP_GoblinWarrior_Nightmare
// 0x0130 (0x0130 - 0x0000)
struct BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC7[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_InGameplayTag;                        // 0x0008(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InCount;                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1; // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC8[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_GoblinWarrior_C*                   K2Node_DynamicCast_AsABP_Goblin_Warrior;           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC9[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_GoblinWarrior_C*                   K2Node_DynamicCast_AsABP_Goblin_Warrior_1;         // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CCA[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADCCharacterBase*                       K2Node_Event_InInstigator;                         // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InEffectCauser;                       // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_ProjectileActor_C*                  K2Node_DynamicCast_AsBP_Projectile_Actor;          // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CCB[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_MakeStruct_GameplayEventData;               // 0x0068(0x00B0)()
	bool                                          CallFunc_GetFloatAttribute_bSuccessfullyFoundAttribute; // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CCC[0x3];                                     // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatAttribute_ReturnValue;            // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CCD[0x7];                                     // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare) == 0x000008, "Wrong alignment on BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare");
static_assert(sizeof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare) == 0x000130, "Wrong size on BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, EntryPoint) == 0x000000, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000004, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, K2Node_Event_InGameplayTag) == 0x000008, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::K2Node_Event_InGameplayTag' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, K2Node_Event_InCount) == 0x000010, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::K2Node_Event_InCount' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, CallFunc_Greater_IntInt_ReturnValue) == 0x000014, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000015, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1) == 0x000016, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, CallFunc_GetAnimInstance_ReturnValue) == 0x000018, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, K2Node_DynamicCast_AsABP_Goblin_Warrior) == 0x000020, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::K2Node_DynamicCast_AsABP_Goblin_Warrior' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000030, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, K2Node_DynamicCast_AsABP_Goblin_Warrior_1) == 0x000038, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::K2Node_DynamicCast_AsABP_Goblin_Warrior_1' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, K2Node_Event_InInstigator) == 0x000048, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::K2Node_Event_InInstigator' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, K2Node_Event_InEffectCauser) == 0x000050, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::K2Node_Event_InEffectCauser' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, K2Node_DynamicCast_AsBP_Projectile_Actor) == 0x000058, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::K2Node_DynamicCast_AsBP_Projectile_Actor' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, K2Node_DynamicCast_bSuccess_2) == 0x000060, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, K2Node_MakeStruct_GameplayEventData) == 0x000068, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::K2Node_MakeStruct_GameplayEventData' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, CallFunc_GetFloatAttribute_bSuccessfullyFoundAttribute) == 0x000118, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::CallFunc_GetFloatAttribute_bSuccessfullyFoundAttribute' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, CallFunc_GetFloatAttribute_ReturnValue) == 0x00011C, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::CallFunc_GetFloatAttribute_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000120, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000128, "Member 'BP_GoblinWarrior_Nightmare_C_ExecuteUbergraph_BP_GoblinWarrior_Nightmare::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_GoblinWarrior_Nightmare.BP_GoblinWarrior_Nightmare_C.OnStuckByShield
// 0x0010 (0x0010 - 0x0000)
struct BP_GoblinWarrior_Nightmare_C_OnStuckByShield final
{
public:
	class ADCCharacterBase*                       InInstigator;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InEffectCauser;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GoblinWarrior_Nightmare_C_OnStuckByShield) == 0x000008, "Wrong alignment on BP_GoblinWarrior_Nightmare_C_OnStuckByShield");
static_assert(sizeof(BP_GoblinWarrior_Nightmare_C_OnStuckByShield) == 0x000010, "Wrong size on BP_GoblinWarrior_Nightmare_C_OnStuckByShield");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_OnStuckByShield, InInstigator) == 0x000000, "Member 'BP_GoblinWarrior_Nightmare_C_OnStuckByShield::InInstigator' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_OnStuckByShield, InEffectCauser) == 0x000008, "Member 'BP_GoblinWarrior_Nightmare_C_OnStuckByShield::InEffectCauser' has a wrong offset!");

// Function BP_GoblinWarrior_Nightmare.BP_GoblinWarrior_Nightmare_C.GameplayTagUpdated
// 0x000C (0x000C - 0x0000)
struct BP_GoblinWarrior_Nightmare_C_GameplayTagUpdated final
{
public:
	struct FGameplayTag                           InGameplayTag;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         InCount;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GoblinWarrior_Nightmare_C_GameplayTagUpdated) == 0x000004, "Wrong alignment on BP_GoblinWarrior_Nightmare_C_GameplayTagUpdated");
static_assert(sizeof(BP_GoblinWarrior_Nightmare_C_GameplayTagUpdated) == 0x00000C, "Wrong size on BP_GoblinWarrior_Nightmare_C_GameplayTagUpdated");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_GameplayTagUpdated, InGameplayTag) == 0x000000, "Member 'BP_GoblinWarrior_Nightmare_C_GameplayTagUpdated::InGameplayTag' has a wrong offset!");
static_assert(offsetof(BP_GoblinWarrior_Nightmare_C_GameplayTagUpdated, InCount) == 0x000008, "Member 'BP_GoblinWarrior_Nightmare_C_GameplayTagUpdated::InCount' has a wrong offset!");

}

