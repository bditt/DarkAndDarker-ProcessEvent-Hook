#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_CheckTarget

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "E_SensorType_structs.hpp"
#include "E_ActivityArea_structs.hpp"
#include "E_DistanceFromVariables_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTD_CheckTarget.BTD_CheckTarget_C
// 0x00A0 (0x0140 - 0x00A0)
class UBTD_CheckTarget_C final : public UBTDecorator_BlueprintBase
{
public:
	class ABP_DCMonsterBaseWithOptions_C*         ControlledPawn;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAIPerceptionComponent*                 AIPerception;                                      // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBlackboardComponent*                   Blackboard;                                        // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class ADCCharacterBase*>               TargetArray;                                       // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class FName                                   TargetActor;                                       // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Find_BlackBoard_TargetActor;                       // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SensorType                                  Get_List_From;                                     // 0x00D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Player;                                            // 0x00D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Monster;                                           // 0x00D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Get_from_Combat_Area;                              // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FilterSpawnLocation;                               // 0x00D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AF4[0x2];                                     // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Filter_Distance_from_Spawn_Location;               // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FGameplayTag>                   Tags;                                              // 0x00E0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FGameplayTag>                   Untags;                                            // 0x00F0(0x0010)(Edit, BlueprintVisible)
	bool                                          Get_ActivityArea_From_Monster_BP;                  // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ActivityArea                                Activity_Area;                                     // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AF5[0x6];                                     // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinDistance;                                       // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DistanceFromVariables                       MaxDistanceFrom;                                   // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AF6[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxDistance;                                       // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Angle;                                             // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Direction;                                         // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinHP;                                             // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxHP;                                             // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ClearVariables();
	void FilterHP(bool* Bool);
	void FilterRange(bool* Bool);
	void FilterTags(bool* Bool);
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* Param_ControlledPawn);
	void TargetingType(bool* Bool);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTD_CheckTarget_C">();
	}
	static class UBTD_CheckTarget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTD_CheckTarget_C>();
	}
};
static_assert(alignof(UBTD_CheckTarget_C) == 0x000008, "Wrong alignment on UBTD_CheckTarget_C");
static_assert(sizeof(UBTD_CheckTarget_C) == 0x000140, "Wrong size on UBTD_CheckTarget_C");
static_assert(offsetof(UBTD_CheckTarget_C, ControlledPawn) == 0x0000A0, "Member 'UBTD_CheckTarget_C::ControlledPawn' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, AIPerception) == 0x0000A8, "Member 'UBTD_CheckTarget_C::AIPerception' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, Blackboard) == 0x0000B0, "Member 'UBTD_CheckTarget_C::Blackboard' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, TargetArray) == 0x0000B8, "Member 'UBTD_CheckTarget_C::TargetArray' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, TargetActor) == 0x0000C8, "Member 'UBTD_CheckTarget_C::TargetActor' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, Find_BlackBoard_TargetActor) == 0x0000D0, "Member 'UBTD_CheckTarget_C::Find_BlackBoard_TargetActor' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, Get_List_From) == 0x0000D1, "Member 'UBTD_CheckTarget_C::Get_List_From' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, Player) == 0x0000D2, "Member 'UBTD_CheckTarget_C::Player' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, Monster) == 0x0000D3, "Member 'UBTD_CheckTarget_C::Monster' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, Get_from_Combat_Area) == 0x0000D4, "Member 'UBTD_CheckTarget_C::Get_from_Combat_Area' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, FilterSpawnLocation) == 0x0000D5, "Member 'UBTD_CheckTarget_C::FilterSpawnLocation' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, Filter_Distance_from_Spawn_Location) == 0x0000D8, "Member 'UBTD_CheckTarget_C::Filter_Distance_from_Spawn_Location' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, Tags) == 0x0000E0, "Member 'UBTD_CheckTarget_C::Tags' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, Untags) == 0x0000F0, "Member 'UBTD_CheckTarget_C::Untags' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, Get_ActivityArea_From_Monster_BP) == 0x000100, "Member 'UBTD_CheckTarget_C::Get_ActivityArea_From_Monster_BP' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, Activity_Area) == 0x000101, "Member 'UBTD_CheckTarget_C::Activity_Area' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, MinDistance) == 0x000108, "Member 'UBTD_CheckTarget_C::MinDistance' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, MaxDistanceFrom) == 0x000110, "Member 'UBTD_CheckTarget_C::MaxDistanceFrom' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, MaxDistance) == 0x000118, "Member 'UBTD_CheckTarget_C::MaxDistance' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, Angle) == 0x000120, "Member 'UBTD_CheckTarget_C::Angle' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, Direction) == 0x000128, "Member 'UBTD_CheckTarget_C::Direction' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, MinHP) == 0x000130, "Member 'UBTD_CheckTarget_C::MinHP' has a wrong offset!");
static_assert(offsetof(UBTD_CheckTarget_C, MaxHP) == 0x000138, "Member 'UBTD_CheckTarget_C::MaxHP' has a wrong offset!");

}

