#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_WaitWithOptions

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_WaitWithOptions.BTT_WaitWithOptions_C
// 0x0028 (0x00D0 - 0x00A8)
class UBTT_WaitWithOptions_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FName                                   FloatValue;                                        // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Float_From_BlackBoard;                         // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Float_From_Monster_BP;                         // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A0D[0x6];                                     // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ManualWaitTime1;                                   // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ManualWaitTime2;                                   // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTT_WaitWithOptions(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_WaitWithOptions_C">();
	}
	static class UBTT_WaitWithOptions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_WaitWithOptions_C>();
	}
};
static_assert(alignof(UBTT_WaitWithOptions_C) == 0x000008, "Wrong alignment on UBTT_WaitWithOptions_C");
static_assert(sizeof(UBTT_WaitWithOptions_C) == 0x0000D0, "Wrong size on UBTT_WaitWithOptions_C");
static_assert(offsetof(UBTT_WaitWithOptions_C, UberGraphFrame) == 0x0000A8, "Member 'UBTT_WaitWithOptions_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_WaitWithOptions_C, FloatValue) == 0x0000B0, "Member 'UBTT_WaitWithOptions_C::FloatValue' has a wrong offset!");
static_assert(offsetof(UBTT_WaitWithOptions_C, Use_Float_From_BlackBoard) == 0x0000B8, "Member 'UBTT_WaitWithOptions_C::Use_Float_From_BlackBoard' has a wrong offset!");
static_assert(offsetof(UBTT_WaitWithOptions_C, Use_Float_From_Monster_BP) == 0x0000B9, "Member 'UBTT_WaitWithOptions_C::Use_Float_From_Monster_BP' has a wrong offset!");
static_assert(offsetof(UBTT_WaitWithOptions_C, ManualWaitTime1) == 0x0000C0, "Member 'UBTT_WaitWithOptions_C::ManualWaitTime1' has a wrong offset!");
static_assert(offsetof(UBTT_WaitWithOptions_C, ManualWaitTime2) == 0x0000C8, "Member 'UBTT_WaitWithOptions_C::ManualWaitTime2' has a wrong offset!");

}

