#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_FrozenGhost_Flee_Loop

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GA_MonsterGameplayAbilityBase_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_FrozenGhost_Flee_Loop.GA_FrozenGhost_Flee_Loop_C
// 0x00F8 (0x06C0 - 0x05C8)
class UGA_FrozenGhost_Flee_Loop_C final : public UGA_MonsterGameplayAbilityBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_DCMonsterBaseWithOptions_C*         As_BP_DCMonster_Base_With_Options;                 // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     Gameplay_Event_Data;                               // 0x05D8(0x00B0)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Reached;                                           // 0x0688(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C1[0x7];                                     // 0x0689(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           MoveFleeTimerHandle;                               // 0x0690(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MoveFailTimeOutTimerrHandle;                       // 0x0698(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Limit_Flee_Time;                                   // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MoveFailUnbleTimerHandle;                          // 0x06A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SpawnAoeTimerHandle;                               // 0x06B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceFromEnemy;                                 // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AbilityActivated(const struct FGameplayEventData& TriggerEventData);
	void ExecuteUbergraph_GA_FrozenGhost_Flee_Loop(int32 EntryPoint);
	void K2_OnEndAbility(bool bWasCancelled);
	void MoveFailTimerOut();
	void MoveFailUnable();
	void MoveFlee();
	void OnFail_20D7C4594E8C0ED14F6487A65017A670(EPathFollowingResult MovementResult);
	void OnSuccess_20D7C4594E8C0ED14F6487A65017A670(EPathFollowingResult MovementResult);
	void SpawnAoe();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_FrozenGhost_Flee_Loop_C">();
	}
	static class UGA_FrozenGhost_Flee_Loop_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_FrozenGhost_Flee_Loop_C>();
	}
};
static_assert(alignof(UGA_FrozenGhost_Flee_Loop_C) == 0x000008, "Wrong alignment on UGA_FrozenGhost_Flee_Loop_C");
static_assert(sizeof(UGA_FrozenGhost_Flee_Loop_C) == 0x0006C0, "Wrong size on UGA_FrozenGhost_Flee_Loop_C");
static_assert(offsetof(UGA_FrozenGhost_Flee_Loop_C, UberGraphFrame) == 0x0005C8, "Member 'UGA_FrozenGhost_Flee_Loop_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_FrozenGhost_Flee_Loop_C, As_BP_DCMonster_Base_With_Options) == 0x0005D0, "Member 'UGA_FrozenGhost_Flee_Loop_C::As_BP_DCMonster_Base_With_Options' has a wrong offset!");
static_assert(offsetof(UGA_FrozenGhost_Flee_Loop_C, Gameplay_Event_Data) == 0x0005D8, "Member 'UGA_FrozenGhost_Flee_Loop_C::Gameplay_Event_Data' has a wrong offset!");
static_assert(offsetof(UGA_FrozenGhost_Flee_Loop_C, Reached) == 0x000688, "Member 'UGA_FrozenGhost_Flee_Loop_C::Reached' has a wrong offset!");
static_assert(offsetof(UGA_FrozenGhost_Flee_Loop_C, MoveFleeTimerHandle) == 0x000690, "Member 'UGA_FrozenGhost_Flee_Loop_C::MoveFleeTimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_FrozenGhost_Flee_Loop_C, MoveFailTimeOutTimerrHandle) == 0x000698, "Member 'UGA_FrozenGhost_Flee_Loop_C::MoveFailTimeOutTimerrHandle' has a wrong offset!");
static_assert(offsetof(UGA_FrozenGhost_Flee_Loop_C, Limit_Flee_Time) == 0x0006A0, "Member 'UGA_FrozenGhost_Flee_Loop_C::Limit_Flee_Time' has a wrong offset!");
static_assert(offsetof(UGA_FrozenGhost_Flee_Loop_C, MoveFailUnbleTimerHandle) == 0x0006A8, "Member 'UGA_FrozenGhost_Flee_Loop_C::MoveFailUnbleTimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_FrozenGhost_Flee_Loop_C, SpawnAoeTimerHandle) == 0x0006B0, "Member 'UGA_FrozenGhost_Flee_Loop_C::SpawnAoeTimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_FrozenGhost_Flee_Loop_C, DistanceFromEnemy) == 0x0006B8, "Member 'UGA_FrozenGhost_Flee_Loop_C::DistanceFromEnemy' has a wrong offset!");

}

