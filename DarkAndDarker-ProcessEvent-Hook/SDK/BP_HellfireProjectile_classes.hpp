#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HellfireProjectile

#include "Basic.hpp"

#include "BP_ProjectileActor_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HellfireProjectile.BP_HellfireProjectile_C
// 0x0060 (0x07F0 - 0x0790)
class ABP_HellfireProjectile_C final : public ABP_ProjectileActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_HellfireProjectile_C;            // 0x0788(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_Volume;                                         // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_ProjectileCollision;                            // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Ex_Niagara;                                        // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DefaultProjectileSize;                             // 0x07A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MaxProjectileSize;                                 // 0x07C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FireProjectileTime;                                // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DestroyDelayTime;                                  // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_HellfireProjectile(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void InitNiagaraEffect();
	void OnDelayDestroy();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void TimelineFinishedEvent();
	void TimelineUpdateEvent(float Value, float TimelinePosition);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HellfireProjectile_C">();
	}
	static class ABP_HellfireProjectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HellfireProjectile_C>();
	}
};
static_assert(alignof(ABP_HellfireProjectile_C) == 0x000010, "Wrong alignment on ABP_HellfireProjectile_C");
static_assert(sizeof(ABP_HellfireProjectile_C) == 0x0007F0, "Wrong size on ABP_HellfireProjectile_C");
static_assert(offsetof(ABP_HellfireProjectile_C, UberGraphFrame_BP_HellfireProjectile_C) == 0x000788, "Member 'ABP_HellfireProjectile_C::UberGraphFrame_BP_HellfireProjectile_C' has a wrong offset!");
static_assert(offsetof(ABP_HellfireProjectile_C, SM_Volume) == 0x000790, "Member 'ABP_HellfireProjectile_C::SM_Volume' has a wrong offset!");
static_assert(offsetof(ABP_HellfireProjectile_C, SM_ProjectileCollision) == 0x000798, "Member 'ABP_HellfireProjectile_C::SM_ProjectileCollision' has a wrong offset!");
static_assert(offsetof(ABP_HellfireProjectile_C, Ex_Niagara) == 0x0007A0, "Member 'ABP_HellfireProjectile_C::Ex_Niagara' has a wrong offset!");
static_assert(offsetof(ABP_HellfireProjectile_C, DefaultProjectileSize) == 0x0007A8, "Member 'ABP_HellfireProjectile_C::DefaultProjectileSize' has a wrong offset!");
static_assert(offsetof(ABP_HellfireProjectile_C, MaxProjectileSize) == 0x0007C0, "Member 'ABP_HellfireProjectile_C::MaxProjectileSize' has a wrong offset!");
static_assert(offsetof(ABP_HellfireProjectile_C, FireProjectileTime) == 0x0007D8, "Member 'ABP_HellfireProjectile_C::FireProjectileTime' has a wrong offset!");
static_assert(offsetof(ABP_HellfireProjectile_C, DestroyDelayTime) == 0x0007E0, "Member 'ABP_HellfireProjectile_C::DestroyDelayTime' has a wrong offset!");

}

