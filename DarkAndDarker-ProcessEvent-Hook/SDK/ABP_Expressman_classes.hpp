#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Expressman

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "KawaiiPhysics_structs.hpp"
#include "ABP_Expressman_structs.hpp"
#include "DungeonCrawler_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Expressman.ABP_Expressman_C
// 0x1C60 (0x2090 - 0x0430)
class UABP_Expressman_C final : public UDCAnimInstanceBase
{
public:
	uint8                                         Pad_458B[0x8];                                     // 0x0428(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0430(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_Expressman::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0438(0x0002)(HasGetValueTypeHash)
	uint8                                         Pad_458C[0x6];                                     // 0x043A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0440(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0448(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0450(0x0020)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_2;                     // 0x0470(0x07A0)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0C10(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0C30(0x0020)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_1;                     // 0x0C50(0x07A0)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x13F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x1418(0x0028)()
	struct FAnimNode_RandomPlayer                 AnimGraphNode_RandomPlayer;                        // 0x1440(0x0078)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x14B8(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x14D8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x1500(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x1548(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x1568(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x15B0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x15D0(0x00C8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x1698(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x16B8(0x00C8)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics;                       // 0x1780(0x07A0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x1F20(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x1FA0(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x1FC8(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x2010(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x2038(0x0048)()
	bool                                          IdleTranistion;                                    // 0x2080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void AnimNotify_BeginIdleDelay();
	void AnimNotify_EndIdleAnimation();
	void ExecuteUbergraph_ABP_Expressman(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Expressman_C">();
	}
	static class UABP_Expressman_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Expressman_C>();
	}
};
static_assert(alignof(UABP_Expressman_C) == 0x000010, "Wrong alignment on UABP_Expressman_C");
static_assert(sizeof(UABP_Expressman_C) == 0x002090, "Wrong size on UABP_Expressman_C");
static_assert(offsetof(UABP_Expressman_C, UberGraphFrame) == 0x000430, "Member 'UABP_Expressman_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, __AnimBlueprintMutables) == 0x000438, "Member 'UABP_Expressman_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimBlueprintExtension_PropertyAccess) == 0x000440, "Member 'UABP_Expressman_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimBlueprintExtension_Base) == 0x000448, "Member 'UABP_Expressman_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_Root) == 0x000450, "Member 'UABP_Expressman_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_KawaiiPhysics_2) == 0x000470, "Member 'UABP_Expressman_C::AnimGraphNode_KawaiiPhysics_2' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_LocalToComponentSpace) == 0x000C10, "Member 'UABP_Expressman_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_ComponentToLocalSpace) == 0x000C30, "Member 'UABP_Expressman_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_KawaiiPhysics_1) == 0x000C50, "Member 'UABP_Expressman_C::AnimGraphNode_KawaiiPhysics_1' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_TransitionResult_2) == 0x0013F0, "Member 'UABP_Expressman_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_TransitionResult_1) == 0x001418, "Member 'UABP_Expressman_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_RandomPlayer) == 0x001440, "Member 'UABP_Expressman_C::AnimGraphNode_RandomPlayer' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_StateResult_3) == 0x0014B8, "Member 'UABP_Expressman_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_TransitionResult) == 0x0014D8, "Member 'UABP_Expressman_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_SequencePlayer_1) == 0x001500, "Member 'UABP_Expressman_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_StateResult_2) == 0x001548, "Member 'UABP_Expressman_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_SequencePlayer) == 0x001568, "Member 'UABP_Expressman_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_StateResult_1) == 0x0015B0, "Member 'UABP_Expressman_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_StateMachine_1) == 0x0015D0, "Member 'UABP_Expressman_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_StateResult) == 0x001698, "Member 'UABP_Expressman_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_StateMachine) == 0x0016B8, "Member 'UABP_Expressman_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_KawaiiPhysics) == 0x001780, "Member 'UABP_Expressman_C::AnimGraphNode_KawaiiPhysics' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_SaveCachedPose) == 0x001F20, "Member 'UABP_Expressman_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_UseCachedPose_1) == 0x001FA0, "Member 'UABP_Expressman_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_BlendListByBool) == 0x001FC8, "Member 'UABP_Expressman_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_UseCachedPose) == 0x002010, "Member 'UABP_Expressman_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, AnimGraphNode_Slot) == 0x002038, "Member 'UABP_Expressman_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_Expressman_C, IdleTranistion) == 0x002080, "Member 'UABP_Expressman_C::IdleTranistion' has a wrong offset!");

}

