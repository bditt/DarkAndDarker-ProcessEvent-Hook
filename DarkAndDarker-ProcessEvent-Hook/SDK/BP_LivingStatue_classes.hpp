#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LivingStatue

#include "Basic.hpp"

#include "BP_DCMonsterBaseWithOptions_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LivingStatue.BP_LivingStatue_C
// 0x01C0 (0x15A0 - 0x13E0)
class ABP_LivingStatue_C : public ABP_DCMonsterBaseWithOptions_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_LivingStatue_C;                  // 0x13D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box_Recog2_;                                       // 0x13E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule_Recog1_;                                   // 0x13E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule_DashSmash_;                                // 0x13F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 BrokenMesh;                                        // 0x13F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Tail_01;                                    // 0x1400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Tail_02;                                    // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Tail_03;                                    // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Back;                                       // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Wing_R05;                                   // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Wing_L06;                                   // 0x1428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Wing_R06;                                   // 0x1430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Wing_L08;                                   // 0x1438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Wing_R07;                                   // 0x1440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Wing_L09;                                   // 0x1448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Wing_R08;                                   // 0x1450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Wing_L07;                                   // 0x1458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Wing_R04;                                   // 0x1460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Wing_L04;                                   // 0x1468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Wing_R01;                                   // 0x1470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Wing_L01;                                   // 0x1478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Wing_R02;                                   // 0x1480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Wing_L02;                                   // 0x1488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Wing_R03;                                   // 0x1490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Wing_L03;                                   // 0x1498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Foot_R;                                     // 0x14A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Foot_L;                                     // 0x14A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_Calf_R;                                     // 0x14B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_Calf_L;                                     // 0x14B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Thigh_R;                                    // 0x14C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Thigh_L;                                    // 0x14C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Hand_R;                                     // 0x14D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Hand_L;                                     // 0x14D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_LowerArm_R;                                 // 0x14E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_LowerArm_L;                                 // 0x14E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_UpperArm_R;                                 // 0x14F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         Hitbox_UpperArm_L;                                 // 0x14F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Pelvis_02;                                  // 0x1500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Pelvis_01;                                  // 0x1508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DCHitBox_C*                         HitBox_Head;                                       // 0x1510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          HP_To_Use_Silence;                                 // 0x1518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSilence;                                        // 0x1519(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A3E[0x6];                                     // 0x151A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADCPlayerCharacterBase*>         Correct_Targets_To_Recog;                          // 0x1520(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         Dash_Damage_Overlap_Targets;                       // 0x1530(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ADCPlayerCharacterBase*>         Recog1_Capsule_Overlapped_Targets;                 // 0x1540(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ADCPlayerCharacterBase*>         Recog2_Box_Overlapped_Targets;                     // 0x1550(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          AI_Set;                                            // 0x1560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanDash;                                           // 0x1561(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A3F[0x6];                                     // 0x1562(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADCCharacterBase*>               Combat_Target_Array;                               // 0x1568(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          AI_Set_Can_Dash;                                   // 0x1578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A40[0x7];                                     // 0x1579(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Watch_Target_TimerHandle;                          // 0x1580(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_DCHitBox_C*>                 HitBoxArray;                                       // 0x1588(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          IsMeshChanged;                                     // 0x1598(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_LivingStatue_Box_Jump2__K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_LivingStatue_Box_Jump2__K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_LivingStatue_Capsule_DashSmash__K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_LivingStatue_Capsule_DashSmash__K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_LivingStatue_Capsule_Recognize__K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_LivingStatue_Capsule_Recognize__K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ChangeMesh();
	void ChangeMeshDefer();
	bool Check_Distance_2D__To_Target(class ADCPlayerCharacterBase* Target_Actor);
	bool Check_Path_Valid(class ADCPlayerCharacterBase* Target_Actor);
	bool Check_Z_Location(class ADCPlayerCharacterBase* Target_Actor);
	void ExecuteUbergraph_BP_LivingStatue(int32 EntryPoint);
	void GameplayTagUpdated(const struct FGameplayTag& InGameplayTag, int32 InCount);
	void OnAsyncInitialized();
	void OnFMsgGASAttributeNotifyBlueprint(const struct FMsgGASAttributeNotify& InMsg);
	void OnSetAI();
	void ReceiveBeginPlay();
	void Set_Dash_Goal_Location(const struct FVector& Goal_Location);
	void UserConstructionScript();
	void Watch_Target();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LivingStatue_C">();
	}
	static class ABP_LivingStatue_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LivingStatue_C>();
	}
};
static_assert(alignof(ABP_LivingStatue_C) == 0x000010, "Wrong alignment on ABP_LivingStatue_C");
static_assert(sizeof(ABP_LivingStatue_C) == 0x0015A0, "Wrong size on ABP_LivingStatue_C");
static_assert(offsetof(ABP_LivingStatue_C, UberGraphFrame_BP_LivingStatue_C) == 0x0013D8, "Member 'ABP_LivingStatue_C::UberGraphFrame_BP_LivingStatue_C' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, Box_Recog2_) == 0x0013E0, "Member 'ABP_LivingStatue_C::Box_Recog2_' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, Capsule_Recog1_) == 0x0013E8, "Member 'ABP_LivingStatue_C::Capsule_Recog1_' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, Capsule_DashSmash_) == 0x0013F0, "Member 'ABP_LivingStatue_C::Capsule_DashSmash_' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, BrokenMesh) == 0x0013F8, "Member 'ABP_LivingStatue_C::BrokenMesh' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Tail_01) == 0x001400, "Member 'ABP_LivingStatue_C::HitBox_Tail_01' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Tail_02) == 0x001408, "Member 'ABP_LivingStatue_C::HitBox_Tail_02' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Tail_03) == 0x001410, "Member 'ABP_LivingStatue_C::HitBox_Tail_03' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Back) == 0x001418, "Member 'ABP_LivingStatue_C::HitBox_Back' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Wing_R05) == 0x001420, "Member 'ABP_LivingStatue_C::HitBox_Wing_R05' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Wing_L06) == 0x001428, "Member 'ABP_LivingStatue_C::HitBox_Wing_L06' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Wing_R06) == 0x001430, "Member 'ABP_LivingStatue_C::HitBox_Wing_R06' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Wing_L08) == 0x001438, "Member 'ABP_LivingStatue_C::HitBox_Wing_L08' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Wing_R07) == 0x001440, "Member 'ABP_LivingStatue_C::HitBox_Wing_R07' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Wing_L09) == 0x001448, "Member 'ABP_LivingStatue_C::HitBox_Wing_L09' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Wing_R08) == 0x001450, "Member 'ABP_LivingStatue_C::HitBox_Wing_R08' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Wing_L07) == 0x001458, "Member 'ABP_LivingStatue_C::HitBox_Wing_L07' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Wing_R04) == 0x001460, "Member 'ABP_LivingStatue_C::HitBox_Wing_R04' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Wing_L04) == 0x001468, "Member 'ABP_LivingStatue_C::HitBox_Wing_L04' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Wing_R01) == 0x001470, "Member 'ABP_LivingStatue_C::HitBox_Wing_R01' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Wing_L01) == 0x001478, "Member 'ABP_LivingStatue_C::HitBox_Wing_L01' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Wing_R02) == 0x001480, "Member 'ABP_LivingStatue_C::HitBox_Wing_R02' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Wing_L02) == 0x001488, "Member 'ABP_LivingStatue_C::HitBox_Wing_L02' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Wing_R03) == 0x001490, "Member 'ABP_LivingStatue_C::HitBox_Wing_R03' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Wing_L03) == 0x001498, "Member 'ABP_LivingStatue_C::HitBox_Wing_L03' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Foot_R) == 0x0014A0, "Member 'ABP_LivingStatue_C::HitBox_Foot_R' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Foot_L) == 0x0014A8, "Member 'ABP_LivingStatue_C::HitBox_Foot_L' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, Hitbox_Calf_R) == 0x0014B0, "Member 'ABP_LivingStatue_C::Hitbox_Calf_R' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, Hitbox_Calf_L) == 0x0014B8, "Member 'ABP_LivingStatue_C::Hitbox_Calf_L' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Thigh_R) == 0x0014C0, "Member 'ABP_LivingStatue_C::HitBox_Thigh_R' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Thigh_L) == 0x0014C8, "Member 'ABP_LivingStatue_C::HitBox_Thigh_L' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Hand_R) == 0x0014D0, "Member 'ABP_LivingStatue_C::HitBox_Hand_R' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Hand_L) == 0x0014D8, "Member 'ABP_LivingStatue_C::HitBox_Hand_L' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, Hitbox_LowerArm_R) == 0x0014E0, "Member 'ABP_LivingStatue_C::Hitbox_LowerArm_R' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, Hitbox_LowerArm_L) == 0x0014E8, "Member 'ABP_LivingStatue_C::Hitbox_LowerArm_L' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, Hitbox_UpperArm_R) == 0x0014F0, "Member 'ABP_LivingStatue_C::Hitbox_UpperArm_R' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, Hitbox_UpperArm_L) == 0x0014F8, "Member 'ABP_LivingStatue_C::Hitbox_UpperArm_L' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Pelvis_02) == 0x001500, "Member 'ABP_LivingStatue_C::HitBox_Pelvis_02' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Pelvis_01) == 0x001508, "Member 'ABP_LivingStatue_C::HitBox_Pelvis_01' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBox_Head) == 0x001510, "Member 'ABP_LivingStatue_C::HitBox_Head' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HP_To_Use_Silence) == 0x001518, "Member 'ABP_LivingStatue_C::HP_To_Use_Silence' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, UseSilence) == 0x001519, "Member 'ABP_LivingStatue_C::UseSilence' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, Correct_Targets_To_Recog) == 0x001520, "Member 'ABP_LivingStatue_C::Correct_Targets_To_Recog' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, Dash_Damage_Overlap_Targets) == 0x001530, "Member 'ABP_LivingStatue_C::Dash_Damage_Overlap_Targets' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, Recog1_Capsule_Overlapped_Targets) == 0x001540, "Member 'ABP_LivingStatue_C::Recog1_Capsule_Overlapped_Targets' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, Recog2_Box_Overlapped_Targets) == 0x001550, "Member 'ABP_LivingStatue_C::Recog2_Box_Overlapped_Targets' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, AI_Set) == 0x001560, "Member 'ABP_LivingStatue_C::AI_Set' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, CanDash) == 0x001561, "Member 'ABP_LivingStatue_C::CanDash' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, Combat_Target_Array) == 0x001568, "Member 'ABP_LivingStatue_C::Combat_Target_Array' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, AI_Set_Can_Dash) == 0x001578, "Member 'ABP_LivingStatue_C::AI_Set_Can_Dash' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, Watch_Target_TimerHandle) == 0x001580, "Member 'ABP_LivingStatue_C::Watch_Target_TimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, HitBoxArray) == 0x001588, "Member 'ABP_LivingStatue_C::HitBoxArray' has a wrong offset!");
static_assert(offsetof(ABP_LivingStatue_C, IsMeshChanged) == 0x001598, "Member 'ABP_LivingStatue_C::IsMeshChanged' has a wrong offset!");

}

