#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_FrostSkeletonGuardman

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ABP_FrostSkeletonGuardman_structs.hpp"
#include "DungeonCrawler_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_FrostSkeletonGuardman.ABP_FrostSkeletonGuardman_C
// 0x09F0 (0x0F20 - 0x0530)
class UABP_FrostSkeletonGuardman_C final : public UDCMonsterAnimInstanceBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_FrostSkeletonGuardman::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0538(0x000C)(HasGetValueTypeHash)
	uint8                                         Pad_5917[0x4];                                     // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0548(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0550(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0558(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0578(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x05A0(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x05C8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0610(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0630(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x06A0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x06C0(0x00C8)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0788(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x07B0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x07D8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0800(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0828(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0850(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x0898(0x0028)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x08C0(0x00C8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x0988(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x09B0(0x00F0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0AA0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0AC0(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x0B08(0x0028)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x0B30(0x00C8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0BF8(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0C20(0x00F0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0D10(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0D30(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0D58(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0D78(0x00C8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0E40(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0E88(0x0080)()
	double                                        Direction;                                         // 0x0F08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_Play_Hit_Start_Reaction;                    // 0x0F10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void ExecuteUbergraph_ABP_FrostSkeletonGuardman(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_FrostSkeletonGuardman_C">();
	}
	static class UABP_FrostSkeletonGuardman_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_FrostSkeletonGuardman_C>();
	}
};
static_assert(alignof(UABP_FrostSkeletonGuardman_C) == 0x000010, "Wrong alignment on UABP_FrostSkeletonGuardman_C");
static_assert(sizeof(UABP_FrostSkeletonGuardman_C) == 0x000F20, "Wrong size on UABP_FrostSkeletonGuardman_C");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, UberGraphFrame) == 0x000530, "Member 'UABP_FrostSkeletonGuardman_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, __AnimBlueprintMutables) == 0x000538, "Member 'UABP_FrostSkeletonGuardman_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimBlueprintExtension_PropertyAccess) == 0x000548, "Member 'UABP_FrostSkeletonGuardman_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimBlueprintExtension_Base) == 0x000550, "Member 'UABP_FrostSkeletonGuardman_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_Root) == 0x000558, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_TransitionResult_6) == 0x000578, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_TransitionResult_5) == 0x0005A0, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_SequencePlayer_2) == 0x0005C8, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_StateResult_4) == 0x000610, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_BlendSpacePlayer) == 0x000630, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_StateResult_3) == 0x0006A0, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_StateMachine_1) == 0x0006C0, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_TransitionResult_4) == 0x000788, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_TransitionResult_3) == 0x0007B0, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_TransitionResult_2) == 0x0007D8, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_TransitionResult_1) == 0x000800, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_TransitionResult) == 0x000828, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_SequencePlayer_1) == 0x000850, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_UseCachedPose_4) == 0x000898, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_ApplyAdditive_1) == 0x0008C0, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_UseCachedPose_3) == 0x000988, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_LayeredBoneBlend_1) == 0x0009B0, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_StateResult_2) == 0x000AA0, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_SequencePlayer) == 0x000AC0, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_UseCachedPose_2) == 0x000B08, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_ApplyAdditive) == 0x000B30, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_UseCachedPose_1) == 0x000BF8, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_LayeredBoneBlend) == 0x000C20, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_StateResult_1) == 0x000D10, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_UseCachedPose) == 0x000D30, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_StateResult) == 0x000D58, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_StateMachine) == 0x000D78, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_Slot) == 0x000E40, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, AnimGraphNode_SaveCachedPose) == 0x000E88, "Member 'UABP_FrostSkeletonGuardman_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, Direction) == 0x000F08, "Member 'UABP_FrostSkeletonGuardman_C::Direction' has a wrong offset!");
static_assert(offsetof(UABP_FrostSkeletonGuardman_C, Should_Play_Hit_Start_Reaction) == 0x000F10, "Member 'UABP_FrostSkeletonGuardman_C::Should_Play_Hit_Start_Reaction' has a wrong offset!");

}

